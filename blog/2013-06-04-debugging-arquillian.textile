---
layout: post
title: "Debugging Arquillian Test Execution"
tags: [ "arquillian", "debugging" ]
---

It is practically unavoidable to hit issues during a test execution. Fortunately, with the Arquillian, debugging such issue is a really simple task.

h3. Revealing Arquillian Internals

Curious what might happen as the test fails?

Let's look at a following snippet of a "Arquillian execution log":https://gist.github.com/lfryc/5755788:



div(alert alert-info). For a sake of simplification, I have removed some unimportant parts.

bc(prettify).. (E) ManagerProcessing
	(O) LoadableExtensionLoader.load
	(E) ServiceLoader
(E) ManagerStarted
(E) BeforeSuite
(E) BeforeClass
	(E) DroneConfigured
		(O) DroneCreator.createWebTestBrowser
PhantomJS is launching GhostDriver...
		(E) DroneReady
(E) Before
(E) Test
	(E) ExecutionEvent
		(O) LocalTestExecuter.execute
(E) FilterResponse
		(E) ExecuteWarp
(E) FilterRequest
	(O) EnrichmentObserver.tryEnrichRequest
        (R) /ITTableState/faces/index.xhtml;jsessionid=v97p4MziZB0-9ymGaHHuQqcW
	(E) EnrichRequest
		(O) EnrichmentObserver.enrichRequest
                (W) /ITTableState/faces/index.xhtml;jsessionid=v97p4MziZB0-9ymGaHHuQqcW
(E) FilterResponse
	(E) DeenrichResponse
(E) After
(E) AfterSuite
(E) ManagerStopping

p. Arquillian Core is de facto an "extensible event machine based":https://github.com/aslakknutsen/arquillian.github.com/blob/e2fc397f166a8dbca2a45ccea5c509c617abe524/guides/getting_started_spi.textile on a network of loosely coupled components - _services_ - which are triggered by _events_ and their _observers_.

Arquillian can print a nice overview (in a form of event tree) revealing how events flows through a system while running a test.

h4. Legend

In order to 

bc(prettify).. [E] observable event
  - an event was fired
  - or object was produced to the context
  - or exception happened in an observer
[O] observer - the event was observed by a observer
[I] interceptor - the event was intercepted

p. If you compare the event tree on the start of this blog, you can now identify that the tree contains an information how events are fired (<tt>[E]</tt>), what observers reacts on them (<tt>[O]</tt>) and what interceptors are used during an observing (<tt>[I]</tt>).

Additionally some extensions like Warp can add some own information:

bc(prettify).. [R] the request was noticed on a proxy
[W] the request was inspected by Warp

h3. Turning Debugging Mode On

You can turn the debugging mode by using the VM argument (both, for the test and for the application server):

bc(prettify).. -Darquillian.debug=true

h4. Debugging in JBoss Developer Studio

IDEs usually does pretty good job and allows you to configure VM arguments as needed.

Eclipse specifically has little drawback - the configuration of VM arguments is set on a level of test configuration.

If you are using "JBoss Developer Studio (7+)":https://devstudio.jboss.com/earlyaccess/7.0/, you are lucky man - it allows you to "configure VM arguments":http://screencast.com/t/Lrh0AA2hD55 for all executed application servers and JUnit/TestNG tests.
