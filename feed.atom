<?xml version="1.0" encoding="utf-8" ?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4242/</id>
  <title>Lukas Fryc</title>
  <updated>2014-01-31T13:31:24+00:00</updated>
  <link href="http://localhost:4242/feed.atom" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4242/" rel="alternate" type="text/html" />
  <entry>
    <id>http://localhost:4242/blog/2014/01/j-hackfest-jvm-languages-frameworks-tools.html</id>
    <title>JHackFest in Brno - Java &amp; JVM languages, Frameworks and Tools</title>
    <updated>2014-01-31T13:31:24+00:00</updated>
    <published>2014-01-31T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2014/01/j-hackfest-jvm-languages-frameworks-tools.html" rel="alternate" type="text/html" />
    <author>
      <name>Lukas Fryc</name>
    </author>
    <category term="event"></category>
    <category term="hackfest"></category>
    <summary>
      
      
      
      If you are an open-source hacker and you love technologies based on Java Virtual Machine, don&#8217;t miss an opportunity to hack on some your ideas or join others in building something interesting in this small hackfest we organize a third year in a row on Developer Conference in Brno.
      
      
      
      
      Occassion
      
      
      The hack-fest will take place at Saturday, February 8th in a Workshop room L2 at Masaryk University in Brno.
      
      
      We got a distinguished hackfest room from 15:50 to &#8230; (to the time we need, but the party starts 19:45 ;-) ).
      
      
      Official schedule and invitation.
      
      
      
      
      Organization
      
      
      No organization!
      
      
      Let&#8217;s come with your ideas in mind and we...
    </summary>
    <content type="html">
      &lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If you are an open-source hacker and you love technologies based on Java Virtual Machine, don’t miss an opportunity to hack on some your ideas or join others in building something interesting in this small hackfest we organize a &lt;a href=&quot;http://lukas.fryc.eu/blog/2013/02/jhackfest.html&quot;&gt;third&lt;/a&gt; &lt;a href=&quot;http://lukas.fryc.eu/blog/2012/02/wrap-up-arquillian-hackfest-developer.html&quot;&gt;year&lt;/a&gt; in a row on &lt;a href=&quot;http://www.devconf.cz&quot;&gt;Developer Conference in Brno&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_occassion&quot;&gt;Occassion&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The hack-fest will take place at &lt;a href=&quot;http://sched.co/1bUQGTN&quot;&gt;Saturday, February 8th in a Workshop room L2&lt;/a&gt; at &lt;a href=&quot;http://www.devconf.cz/content/city-and-venue&quot;&gt;Masaryk University in Brno&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We got a distinguished hackfest room from 15:50 to … (to the time we need, but &lt;a href=&quot;http://sched.co/1eA7oHK&quot;&gt;the party starts 19:45&lt;/a&gt; ;-) ).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://sched.co/1bUQGTN&quot;&gt;Official schedule and invitation&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_organization&quot;&gt;Organization&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;No organization!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Let’s &lt;strong&gt;come with your ideas&lt;/strong&gt; in mind and we will all &lt;strong&gt;try hard to give them a live together&lt;/strong&gt;!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_entry_level&quot;&gt;Entry Level&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There is &lt;strong&gt;no prior expertise needed&lt;/strong&gt;, the hackfest is targeted on everyone who wants to contribute and might not even know yet how to get there.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_steps&quot;&gt;Steps&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Everyone will be able to find something what he can contribute to, and &lt;strong&gt;together we can achieve given goals more easily&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_ideas&quot;&gt;Ideas&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Let’s do not collect ideas beforehand - we will write them down to the whiteboard instead. You can still reach me at &lt;a href=&quot;https://twitter.com/lfryc&quot;&gt;@lfryc&lt;/a&gt; or during the conference if you have some questions.&lt;/p&gt;
      &lt;/div&gt;
      &lt;hr&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;My personal wishes are: extending test coverage of the &lt;a href=&quot;http://javaee-samples.github.io/&quot;&gt;Java EE 7 samples&lt;/a&gt; with Juraj Huska, adding cool new &lt;a href=&quot;http://arquillian.org/&quot;&gt;Arquillian feature&lt;/a&gt; or maybe cracking some &lt;a href=&quot;http://arquillian.org/&quot;&gt;Ceylon/JavaScript&lt;/a&gt; with Tomas Hradec? Who knows, it will be fun … :-)&lt;/p&gt;
      &lt;/div&gt;
      &lt;hr&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We are all eagerly looking forward to the event, so don’t hesitate! Come join us!&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2013/06/richfaces-build-restructure.html</id>
    <title>RichFaces Build Re-Structure</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2013-06-10T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2013/06/richfaces-build-restructure.html" rel="alternate" type="text/html" />
    <author>
      <name>Lukas Fryc</name>
    </author>
    <category term="richfaces"></category>
    <summary>
      
      
      
      As part of the RichFaces 5 effort, we have undergone a huge refactoring of the RichFaces project structure .
      
      
      
      
      Why?
      
      
      Over time we have identified requirements which the project build cannot meet because the build at the time was not ready to support them.
      
      
      We have collected most of these needs as user stories. Let me just re-iterate ones which are related to a final framework user:
      
      
      User Perspective
      
      
      
      As a RichFaces user I want to
      
      
      
      
      include only a single jar in my applications pom file so that I can easily make use of the RichFaces components and framework without requiring complicated changes to the build
      
      
      include...
    </summary>
    <content type="html">
      &lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As part of the RichFaces 5 effort, we have &lt;a href=&quot;https://community.jboss.org/wiki/RichFaces50BuildRedesign&quot;&gt;undergone a huge refactoring&lt;/a&gt; of the RichFaces project structure .&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_why&quot;&gt;Why?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Over time we have identified requirements which the project build cannot meet because the build at the time was not ready to support them.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We have collected most of these needs as user stories. Let me just re-iterate ones which are related to a final framework user:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_user_perspective&quot;&gt;User Perspective&lt;/h3&gt;
      &lt;div class=&quot;quoteblock&quot;&gt;
      &lt;blockquote&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As a &lt;strong&gt;RichFaces user&lt;/strong&gt; I want to&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;include only a &lt;strong&gt;single jar&lt;/strong&gt; in my applications pom file so that I can easily make use of the RichFaces components and framework without requiring complicated changes to the build&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;include only a &lt;strong&gt;single namespace&lt;/strong&gt; for use of RichFaces components so that I can more quickly and easily author new pages, with all components being discoverable with IDE autocompletion&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;use RichFaces &lt;strong&gt;samples/examples as a starting point&lt;/strong&gt; for my project so that I can easily include the provided sample code in my application.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As you can read further in &lt;a href=&quot;#_where_we_are&quot;&gt;Where we are&lt;/a&gt; section, we have succeeded to cover first two points completely!&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_contributor_perspective&quot;&gt;Contributor Perspective&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As an open source project we rely on the simplicity of our build and code structure to encourage new contributions. If it is hard for the core developer team to navigate the project structure, how must it be hard for others?&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I won’t dive into specific user stories here, but let’s just say that the &lt;strong&gt;build is way, way simpler then it was&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We believe that this re-structure will lower the development barrier of the great new features we have planned for RichFaces 5.  With the new build structure we can code as quickly as possible while maintaining even better stability.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;And it should also encourage you, our community, to dive into the framework code!&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_where_we_are&quot;&gt;Where we are?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The upcoming 5.0.0.Alpha1 is intended to be functionally equivalent with last release of RichFaces 4 available today (4.3.2).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Aside from the namespace change and package refactorings, we strove to make sure that everything works the same, with extensive QA efforts in this regard for this release.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_dependencies&quot;&gt;Dependencies&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Most visible changes were introduced into system dependencies:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Maven users should include just one dependency (&lt;code&gt;org.richfaces:richfaces&lt;/code&gt;),&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Ant users should include just one JAR (&lt;code&gt;richfaces.jar&lt;/code&gt;).&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This is a huge simplification over what you need to go through in the &lt;a href=&quot;http://docs.jboss.org/richfaces/latest_4_X/Developer_Guide/en-US/html/chap-Developer_Guide-Getting_started_with_RichFaces.html#sect-Developer_Guide-Getting_started_with_RichFaces-Technical_Requirements-Project_libraries_and_dependencies&quot;&gt;RichFaces 4 setup&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_namespaces&quot;&gt;Namespaces&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Additionally, two RichFaces tag libraries (&lt;code&gt;a4j&lt;/code&gt;/&lt;code&gt;rich&lt;/code&gt;) were merged to one, so there is only one namespace (&lt;code&gt;http://richfaces.org/rich&lt;/code&gt;) with a new default prefix (&lt;code&gt;r&lt;/code&gt;):&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;&amp;lt;!DOCTYPE html&amp;gt;
      &amp;lt;html lang=&quot;en&quot;
          xmlns=&quot;http://www.w3.org/1999/xhtml&quot;
          ...
          xmlns:r=&quot;http://richfaces.org/rich&quot;&amp;gt;
      
      &amp;lt;/html&amp;gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This is simple to change in your own projects with some simple &quot;sed&quot; commands (or whatever regexp tool you prefer) over your entire code base:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;sed -ri 's#xmlns:a4j=&quot;http://richfaces.org/a4j&quot;##g'
      sed -ri 's#xmlns:rich=&quot;http://richfaces.org/rich&quot;#xmlns:r=&quot;http://richfaces.org/rich#g'
      sed -ri 's#&amp;lt;(/?)(a4j|rich):#&amp;lt;\1r:#g'&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Remember to commit all any previous changes before performing those changes: I can’t provide any guaranties! :-)&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_refactored_java_packages&quot;&gt;Refactored Java Packages&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The last concern is that we made sure the whole project is structured properly on the level of Java packages.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Your code will be affected mainly when you use component bindings (&lt;code&gt;binding=#{...}&lt;/code&gt;) or programatic component instantiation (&lt;code&gt;Application#createComponent(...)&lt;/code&gt;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Additionally, there are also changes to packages in which the RichFaces servlets reside, so check your &lt;code&gt;web.xml&lt;/code&gt; configuration:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;org.richfaces.servlet.PushServlet&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;org.richfaces.servlet.ResourceServlet&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph alert alert-info&quot;&gt;
      &lt;p&gt;Note that moving Java classes across packages was done in a 1:1 fashion, so once you switch from RichFaces 4 to RichFaces 5, you just need to review &amp;amp; fix compilation failures and you are all set (statically typed languages FTW!).&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_restructured_resources&quot;&gt;Restructured Resources&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As we merged all the components to single module, we found out the resource structure to be quite unwiedly. We did resource cleanup, so any resource keys you might use will be changed.  You can go to the &lt;a href=&quot;https://github.com/richfaces/richfaces/tree/5.0.0.Alpha1/framework/src/main/resources/META-INF/resources&quot;&gt;&lt;code&gt;META-INF/resources&lt;/code&gt;&lt;/a&gt; to see where to find the re-located resources.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_sample_example_simplification&quot;&gt;Sample/Example Simplification?&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;_still_work_in_progress&quot;&gt;Still Work in Progress&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We didn’t yet touch samples and a Showcase application much - it’s for specific reason - we want you to see &lt;code&gt;Alpha1&lt;/code&gt; as a first milestone for a migration to RichFaces 5 and this major release should not really be migration nightmare.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph alert alert-info&quot;&gt;
      &lt;p&gt;In fact, I imagine the migration path through the use of RichFaces 5 Alpha1 as a base where just small changes are needed, followed by upgrade to Beta/CR/Final releases which will already have all the new shiny goodness inside.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;By the time we release RichFaces 5.0.0.Final, the examples will be more easy to run with and they will be used to show and document advanced use-cases of our components, as you can already see in our prototype of the &lt;a href=&quot;https://github.com/richfaces/richfaces/tree/master/framework/src/main/resources/META-INF/resources&quot;&gt;Bootstrap Showcase&lt;/a&gt; which was incredible effort of our awesome community (yeah, I’m pointing to you, &lt;a href=&quot;http://pauldijou.fr/&quot;&gt;Paul Dijou&lt;/a&gt;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_give_it_a_try&quot;&gt;Give it a try!&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;That’s it. For medium sized projects, this could be almost effortless migration (not that I’m encouraging your production system to use alpha release :-) ).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;However if you start a RichFaces project today on a green field, you can use &lt;code&gt;Alpha1&lt;/code&gt; as a base for your development. As we will proceed further with upcoming milestones, you will be able to upgrade in order to evaluate our shiny new components!&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2013/06/richfaces-issue-reproduction-debugging.html</id>
    <title>Issue Reproduction &amp; Debugging with RichFaces Framework Tests</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2013-06-09T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2013/06/richfaces-issue-reproduction-debugging.html" rel="alternate" type="text/html" />
    <author>
      <name>Lukas Fryc</name>
    </author>
    <category term="richfaces"></category>
    <summary>
      
      
      
      When an issue is discovered in an real application, it needs to be reproduced by the dev team in a sandbox environment.
      
      
      It really helps to have this reproducer in the form of an automated test that should work on a given sample code, but that is failing due to the underlying issue.
      
      
      Such a test can be used for debugging the issue, leading into its assessment and resolution, and finally (once resolved) guarding against a regression.
      
      
      This is exactly the use case for employing the Arquillian framework.
      
      
      
      
      Sample Framework Test
      
      
      Let&#8217;s look at the following integration test for FocusManager taken from the RichFace&#8217;s source.
      
      
      This...
    </summary>
    <content type="html">
      &lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When an issue is discovered in an real application, it needs to be reproduced by the dev team in a sandbox environment.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;It really helps to have this reproducer in the form of an automated test that should work on a given sample code, but that is failing due to the underlying issue.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Such a test can be used for debugging the issue, leading into its assessment and resolution, and finally (once resolved) guarding against a regression.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This is exactly the use case for employing the Arquillian framework.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_sample_framework_test&quot;&gt;Sample Framework Test&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Let’s look at the following integration test for &lt;a href=&quot;http://localhost:4242/blog/2013/01/richfaces-focus-in-richfaces-4-3.html&quot;&gt;&lt;code&gt;FocusManager&lt;/code&gt;&lt;/a&gt; taken from the RichFace’s source.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This test verifies that after a request the &lt;code&gt;FocusManager&lt;/code&gt; will enforce the focus of a particular input.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/richfaces/richfaces/blob/release/5.0.0.Alpha1/framework/src/test/integration/org/richfaces/ui/focus/ITFocusManager.java#L136&quot;&gt;&lt;code&gt;ITFocusManager.java:136&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;@Test
      public void when_there_is_form_based_focus_but_focus_was_enforced_using_FocusManager_then_it_is_not_aplied() {
      
          contextPath = URLUtils.buildUrl(contextPath, &quot;form.jsf&quot;);
      
          Warp.initiate(openPage).inspect(new VerifyFocusEnforcingOverridesFocusSettings(&quot;form:input2&quot;));
          assertEquals(input2, getFocusedElement());
      
          Warp.initiate(submit).inspect(new VerifyFocusEnforcingOverridesFocusSettings(&quot;form:input2&quot;));
          assertEquals(input2, getFocusedElement());
      
          Warp.initiate(ajax).inspect(new VerifyFocusEnforcingOverridesFocusSettings(&quot;form:input2&quot;));
          assertEquals(input2, getFocusedElement());
      }&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In the external file, you can find a definition of &lt;a href=&quot;https://github.com/richfaces/richfaces/blob/release/5.0.0.Alpha1/framework/src/test/integration/org/richfaces/ui/focus/VerifyFocusEnforcingOverridesFocusSettings.java&quot;&gt;Warp’s inspection&lt;/a&gt; which is suppose to verify which component is going to be focused after the request:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/richfaces/richfaces/blob/release/5.0.0.Alpha1/framework/src/test/integration/org/richfaces/ui/focus/VerifyFocusEnforcingOverridesFocusSettings.java&quot;&gt;&lt;code&gt;VerifyFocusEnforcingOverridesFocusSettings.java&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;public class VerifyFocusEnforcingOverridesFocusSettings extends VerifyFocusEnforcing {
      
          private static final long serialVersionUID = 1L;
      
          /**
           * @param enforceFocusId clientId of input component to be enforced to gain focus
           */
          public VerifyFocusEnforcingOverridesFocusSettings(String enforceFocusId) {
              super(enforceFocusId);
          }
      
          @AfterPhase(Phase.RENDER_RESPONSE)
          public void verify_focus_is_applied(@ArquillianResource FacesContext context) {
              AbstractFocus component = bean.getComponent();
              FocusRendererBase renderer = bean.getRenderer();
              assertFalse(renderer.shouldApply(context, component));
          }
      }&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph alert alert-note&quot;&gt;
      &lt;p&gt;Note that there is no mocking involved. We are using a &lt;strong&gt;real implementation&lt;/strong&gt; in a &lt;strong&gt;real JSF context&lt;/strong&gt; driven by a &lt;strong&gt;real browser&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The only missing piece here is the XHTML file we test - we define it right in the source, so the test and its sources are all in one place:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/richfaces/richfaces/blob/release/5.0.0.Alpha1/framework/src/test/integration/org/richfaces/ui/focus/ITFocusManager.java#L188&quot;&gt;&lt;code&gt;ITFocusManager.java:188&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;private static void addFormFocusIndexPage(FrameworkDeployment deployment) {
          FaceletAsset p = new FaceletAsset();
      
          p.body(&quot;&amp;lt;h:form id='form'&amp;gt;&quot;);
          p.body(&quot;    &amp;lt;r:focus id='focus' binding='#{componentBean.component}' /&amp;gt;&quot;);
      
          p.body(&quot;    &amp;lt;h:inputText id='input1' /&amp;gt;&quot;);
          p.body(&quot;    &amp;lt;h:inputText id='input2' /&amp;gt;&quot;);
      
          p.body(&quot;    &amp;lt;h:commandButton id='submit' value='Submit' /&amp;gt;&quot;);
      
          p.body(&quot;    &amp;lt;r:commandButton id='ajax' render='@form' value='Ajax' /&amp;gt;&quot;);
      
          p.body(&quot;&amp;lt;/h:form&amp;gt;&quot;);
      
          deployment.archive().addAsWebResource(p, &quot;form.xhtml&quot;);
      }&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;That is everything you need to reproduce the issue in automated way.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_authoring_new_tests&quot;&gt;Authoring New Tests&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When you write a test for reproduction you don’t even need to start on a green field, since a lot of components already have &lt;a href=&quot;https://github.com/richfaces/richfaces/tree/master/framework/src/test/integration/org/richfaces/ui&quot;&gt;some tests&lt;/a&gt; and creating a specific reproducer is usually matter of copying &amp;amp; pasting with appropriate modifications to fit your new scenario.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The tests themselves can be written really easily since they reflect how we interact with a page in a browser (WebDriver API) and what the request causes on the server (Warp inspections).&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_issue_assessment&quot;&gt;Issue Assessment&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;RichFaces Framework tests even offers great tools for issue assessment so you can really quickly decide whether&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;is the issue a regression?&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;you can switch the test to use older RichFaces version&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;is the issue present in only a specific environment?&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;specific browser&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Mojarra / MyFaces&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;By switching various maven profiles in the framework build and test execution, you can easily execute a test in different environments and effectively identify the root cause.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When you write a framework test you not only &lt;strong&gt;reproduce the issue&lt;/strong&gt;, but you also &lt;strong&gt;help with issue assessment and investigation&lt;/strong&gt; and finally provide code to &lt;strong&gt;verify that the component works as expected&lt;/strong&gt; with any future changes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2013/06/richfaces-framework-tests.html</id>
    <title>Introducing RichFaces Framework Tests</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2013-06-08T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2013/06/richfaces-framework-tests.html" rel="alternate" type="text/html" />
    <author>
      <name>Lukas Fryc</name>
    </author>
    <category term="richfaces"></category>
    <summary>
      
      
      
      This post is a wrap-up for the Testing JSF and RichFaces with Arquillian series which I started with:
      
      
      
      
      As we announced earlier, we are undergoing several changes in our approach to how RichFaces is tested. We already have an extensive functional test suite authored by a top-notch RichFaces QE team, but this suite doesn&#8217;t allow us to react quickly on regressions introduced and so we usually find some of them during release testing.
      
      
      
      
      The series was divided to four parts
      
      
      
      
      technology used,
      
      
      fast test development turnaround,
      
      
      debugging,
      
      
      continuous integration
      
      
      
      
      which pretty much covers what we have achieved in last couple of months. And every bit of that...
    </summary>
    <content type="html">
      &lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This post is a wrap-up for the &lt;a href=&quot;http://localhost:4242/blog/tags/testing-jsf/&quot;&gt;Testing JSF and RichFaces with Arquillian&lt;/a&gt; series which I started with:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;quoteblock&quot;&gt;
      &lt;blockquote&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As we announced earlier, we are undergoing several changes in our approach to how RichFaces is tested. We already have an extensive functional test suite authored by a top-notch RichFaces QE team, but &lt;strong&gt;this suite doesn’t allow us to react quickly on regressions&lt;/strong&gt; introduced and so we usually find some of them during release testing.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The series was divided to four parts&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://localhost:4242/blog/2013/01/richfaces-testing.html&quot;&gt;technology used&lt;/a&gt;,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://localhost:4242/blog/2013/06/testing-jsf-richfaces-arquillian-2-rapid-test-development.html&quot;&gt;fast test development turnaround&lt;/a&gt;,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://localhost:4242/blog/2013/06/testing-jsf-richfaces-arquillian-3-mastering-debugger.html&quot;&gt;debugging&lt;/a&gt;,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://localhost:4242/blog/2013/06/testing-jsf-richfaces-arquillian-4-continous-integration.html&quot;&gt;continuous integration&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;which pretty much covers what we have achieved in last couple of months. And every bit of that effort we are sharing with our community in form of Arquillian extensions - &lt;a href=&quot;https://github.com/arquillian/arquillian-extension-warp/blob/master/README.md&quot;&gt;Warp&lt;/a&gt; and &lt;a href=&quot;https://docs.jboss.org/author/display/ARQGRA2/Home&quot;&gt;Graphene&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Still, there are few points I would like to share with you in relation to the architecture of the test suite which is rather specific for &lt;strong&gt;testing the RichFaces framework&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_test_architecture_requirements&quot;&gt;Test Architecture Requirements&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The special requirements for running integration tests in variety of supported environments:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;JSF implementations:&lt;/strong&gt; Mojarra, MyFaces, Mojarra in JBoss&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;browsers:&lt;/strong&gt; Chrome, Firefox, Internet Explorer&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;application servers:&lt;/strong&gt; JBoss EAP 6.1, WildFly, JBoss AS 7, TomEE, GlassFish&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;servlet containers:&lt;/strong&gt; Tomcat&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Additionaly, some related requirements:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;reusing our test harness across subprojects&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;issue reproduction &amp;amp; debugging&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;testing against older versions of the framework&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;testing against different JSF implementations&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;smoke testing&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;build stability&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;post commit verification&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;pull request verification&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;test categorization&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;limiting the scope of execution&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;for tests failing globally or in a specific environment&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;resolution of a container binary from Maven&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I have to say that to cover all those aspects is quite a challenge. :-)&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_tl_dr&quot;&gt;TL;DR&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There is a complete &lt;a href=&quot;https://github.com/richfaces/richfaces/blob/master/TESTS.md&quot;&gt;Framework Tests documentation&lt;/a&gt; which covers all the aspects of authoring, executing and maintaining the test suite.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You will also find there all the information needed to give those tests a try.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_matrix_jobs&quot;&gt;Matrix Jobs&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As our &lt;a href=&quot;https://github.com/richfaces/richfaces-qa/pulse/monthly&quot;&gt;QE team&lt;/a&gt; does a really good job with test automation, they are getting a new toy and challenge at the same time: &lt;strong&gt;test everywhere&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Thanks to extensive Arquillian support for various browsers and application servers in different run modes (managed/remote), it is pretty straight forward to run on different implementations.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The matrix jobs are run on a &lt;a href=&quot;https://ci.jboss.org/hudson/view/Richfaces/&quot;&gt;Jenkins continuous integration server&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_issue_reproduction_debugging&quot;&gt;Issue Reproduction &amp;amp; Debugging&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;From the point an issue is reproduced, it needs to be reproduced in a sandbox environment.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In order to be efficient during issue reproduction, we prepare framework tests in every case where it seems beneficial.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In case you are interested in how we write those tests, I have &lt;a href=&quot;http://localhost:4242/blog/2013/06/richfaces-issue-reproduction-debugging.html&quot;&gt;dedicated a special post to this topic&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_test_categorization&quot;&gt;Test Categorization&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Some tests aren’t guaranteed to work on every supported environment for two reasons:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;the test is not able to run in a target environment&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;the test hits a bug which is reproducible only in a given environment&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We could just accept the fact that, in some environments, certain tests are failing. However we found that in order to verify results of continous jobs in a straight-forward manner, we should only run tests which are known to be stable on the target environment.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;One of our &lt;a href=&quot;https://github.com/richfaces/richfaces/blob/master/TESTS.md#test-categories&quot;&gt;many supported categories&lt;/a&gt; are &quot;smoke tests&quot;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;_smoke_testing&quot;&gt;Smoke Testing&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Smoke tests help us to evaluate that a certain commit is stable enough so that it can be integrated into the &lt;code&gt;master&lt;/code&gt; branch and it can be further assessed by more advanced test suites.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Before we introduced framework tests, we simply used unit tests for this assessment which themselves didn’t &lt;a href=&quot;http://localhost:4242/blog/2013/01/richfaces-testing.html&quot;&gt;sufficiently guard the gramework&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Fortunately we are able to run a limited subset of framework tests on &lt;a href=&quot;http://localhost:4242/blog/2013/06/testing-jsf-richfaces-arquillian-4-continous-integration.html#phantomjs&quot;&gt;a headless browser&lt;/a&gt; to ensure that framework and components fundamentally work.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Developers are encouraged to run smoke tests before they push commits upstream (it takes just 10 minutes to run locally). Additionally it is beneficial to run a subset of all tests which could be potentially affected by changes (e.g. for a family of components).&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_continous_integration_in_a_cloud&quot;&gt;Continous Integration in a Cloud&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For the sake of a peaceful sleep, we run smoke tests in a cloud on post-commit basis.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;After evaluating several cloud providers, we have decided to go with &lt;a href=&quot;https://travis-ci.org/richfaces/richfaces/builds&quot;&gt;Travis CI&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In order to build in Travis CI, you just need to add &lt;a href=&quot;https://github.com/richfaces/richfaces/blob/release/5.0.0.Alpha1/.travis.yml&quot;&gt;&lt;code&gt;.travis.yml&lt;/code&gt;&lt;/a&gt; file and enable a post-commit hook in your GitHub repository configuration.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Travis CI will make sure to verify not only the &lt;code&gt;master&lt;/code&gt; branch, but also all &lt;a href=&quot;https://travis-ci.org/richfaces/richfaces/branches&quot;&gt;feature branches&lt;/a&gt; and &lt;a href=&quot;https://travis-ci.org/richfaces/richfaces/pull_requests&quot;&gt;pull requests&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;With both tools, you can now just send an patch (pull request) to the repository and &lt;a href=&quot;https://travis-ci.org/richfaces/richfaces/pull_requests&quot;&gt;you will get feedback&lt;/a&gt; within half an hour!&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;RichFaces Framework Tests and their architecture really goes further than the usual Arquillian user’s needs.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;However the setup is very flexible and allows us to do test-driven development in as complex environment as JSF.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We strongly believe that framework tests are the &lt;strong&gt;way to deliver an even more stable library&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2013/06/testing-jsf-richfaces-arquillian-4-continous-integration.html</id>
    <title>Testing JSF and RichFaces with Arquillian - Part IV - Running in Continuous Integration</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2013-06-07T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2013/06/testing-jsf-richfaces-arquillian-4-continous-integration.html" rel="alternate" type="text/html" />
    <category term="arquillian"></category>
    <category term="warp"></category>
    <category term="graphene"></category>
    <category term="jsf"></category>
    <category term="richfaces"></category>
    <category term="series"></category>
    <category term="testing-jsf"></category>
    <summary>
      Once you started developing some integration tests, you should also think about how and where to run them.
      The last part of this series is dedicated to running tests in continuous integration.
      As continuous integration with a unit tests is really straight-forward, configuring integration tests to be run continuously starts to be little cumbersome.
      When we designed test architecture for RichFaces framework, we have focused on ideal testing approach which would empower us to do anything we need to cover our daily jobs -
      
      We didn&#8217;t specifically care about how to make the tests fast, because it would bring another layer of complexity and...
    </summary>
    <content type="html">
      &lt;p&gt;Once you started developing some integration tests, you should also think about how and where to run them.&lt;/p&gt;
      &lt;p&gt;The last part of this series is dedicated to running tests in continuous integration.&lt;/p&gt;
      &lt;p&gt;As continuous integration with a unit tests is really straight-forward, configuring integration tests to be run continuously starts to be little cumbersome.&lt;/p&gt;
      &lt;p&gt;When we designed test architecture for RichFaces framework, we have focused on ideal testing approach which would empower us to do anything we need to cover our daily jobs -&lt;/p&gt;
      &lt;div class=&quot;alert alert-info&quot;&gt;
      &lt;p&gt;We didn’t specifically care about how to make the tests fast, because it would bring another layer of complexity and hard-times during debugging.&lt;/p&gt;
      &lt;p&gt;This is something we have learned from the test development using &lt;a href=&quot;https://github.com/richfaces4/jsf-test&quot;&gt;jsf-test library&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;h2&gt;Integration Testing First Principle&lt;/h2&gt;
      &lt;p&gt;&lt;em&gt;Integration Testing First Principle&lt;/em&gt; enables you to first focus on verifying correctness, and then later paying attention to making it faster and more efficient (see &lt;a href=&quot;#fast-feedback&quot;&gt;Fast Feedback for Continuous Development&lt;/a&gt; part bellow).&lt;/p&gt;
      &lt;p&gt;Thanks to architecture of the Arquillian testing framework and its extensions, there are always options on how to improve the execution time.&lt;/p&gt;
      &lt;h3&gt;Extensive Coverage in &lt;span title=&quot;Continuous Integration&quot;&gt;CI&lt;/span&gt;
      &lt;/h3&gt;
      &lt;p&gt;Once the test suite is written, we need to run it continuously to ensure that the code is compatible with all supported browsers and containers. That’s pretty &lt;a href=&quot;http://localhost:4242/blog/2013/06/richfaces-framework-tests.html#_matrix_jobs&quot;&gt;simple task when you use Arquillian&lt;/a&gt;.&lt;/p&gt;
      &lt;h4&gt;Managing Integration Environment&lt;/h4&gt;
      &lt;p&gt;As opposed to development time (when we want to achieve fast turnaround), in continuous integration we are seeking different goals – the ability to control a complete tested environment from out test suite. We can say we are &lt;em&gt;managing&lt;/em&gt; integration environment.&lt;/p&gt;
      &lt;h5&gt;Managed Containers&lt;/h5&gt;
      &lt;p&gt;Once we switch tests to run in continuous integration, we can leverage &lt;a href=&quot;https://docs.jboss.org/author/display/ARQ/Container+adapters&quot;&gt;Arquillian managed containers&lt;/a&gt; to bootstrap a container and manage its lifecycle.&lt;/p&gt;
      &lt;h5&gt;Managed Browsers&lt;/h5&gt;
      &lt;p&gt;Similarly, the &lt;a href=&quot;https://docs.jboss.org/author/display/ARQ/Drone#Drone-Selenium2%28WebDriver%29configuration&quot;&gt;Drone extension&lt;/a&gt; allows to instantiate browsers directly, without need to manually start the Selenium Server.&lt;/p&gt;
      &lt;p&gt;Once the browser session is managed, Drone itself makes sure that a browser is instantiated and destroyed as required and for a following test, you always get clean session – just as recommended by test isolation practices.&lt;/p&gt;
      &lt;div class=&quot;alert alert-info&quot;&gt;
      &lt;p&gt;Selenium allows to test against a variety of browsers: Firefox, Chrome, Internet Explorer, Opera, Safari, Android, iPhone/iPad.&lt;/p&gt;
      &lt;p&gt;Ideally, you should setup your tests to run your tests against each of the browsers you support.&lt;/p&gt;
      &lt;/div&gt;
      &lt;h4&gt;SauceLabs ~ Browsers in a Cloud&lt;/h4&gt;
      &lt;p&gt;In order to use real browsers, it is usually necessary to invest in your test infrastructure.&lt;/p&gt;
      &lt;p&gt;Fortunately even this initial infrastructure investment can be avoided by using cloud browser-providers like &lt;a href=&quot;http://saucelabs.com/&quot;&gt;SauceLabs&lt;/a&gt;.&lt;/p&gt;
      &lt;p&gt;Drone supports this out-sourcing-to-a-cloud shift and simplifies it to a &lt;a href=&quot;http://sauceio.com/index.php/2012/12/sauce-extension-for-arquillian-drone/&quot;&gt;simple configuration switch&lt;/a&gt;.&lt;/p&gt;
      &lt;h3 id=&quot;fast-feedback&quot;&gt;Fast Feedback for Continuous Development&lt;/h3&gt;
      &lt;p&gt;Once we have configured tests to be run against real implementations while following &lt;em&gt;Integration Testing First Principle&lt;/em&gt;, it is time to make it really useful by configuring it to deliver fast feedback.&lt;/p&gt;
      &lt;p&gt;In order to guard against regressions which could be introduced by code changes, we should run tests continuously after each commit.&lt;/p&gt;
      &lt;p&gt;This could be very resource-consuming since we have so far written just real browser tests.&lt;/p&gt;
      &lt;h4 id=&quot;phantomjs&quot;&gt;PhantomJS ~ Mock Browser&lt;/h4&gt;
      &lt;p&gt;Fortunately there are browsers which can run WebDriver-based tests headlessly, without any external dependencies and faster then real browsers.&lt;/p&gt;
      &lt;p&gt;And that’s where Arquillian and Drone shine again: you can simply &lt;a href=&quot;http://arquillian.org/blog/2013/05/03/arquillian-extension-drone-1-2-0-Alpha2/&quot;&gt;switch from real browsers to a mocked browser&lt;/a&gt;.&lt;/p&gt;
      &lt;p&gt;There are currently two mock browsers with support for WebDriver:&lt;/p&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt; – a headless fork of QtWebKit (similar to Chrome/V8 engine)&lt;/li&gt;
      	&lt;li&gt;
      &lt;a href=&quot;http://htmlunit.sourceforge.net/&quot;&gt;HtmlUnit&lt;/a&gt; – an artifical engine based on Rhino&lt;/li&gt;
      &lt;/ul&gt;&lt;div class=&quot;alert alert-info&quot;&gt;
      &lt;p&gt;We favor PhantomJS, since it gives us an ability to debug test failures easily and it provides us with results close to results from the real browser implementations.&lt;/p&gt;
      &lt;p&gt;Rhino engine is incredibly fast, but we found that it is not enough for testing RichFaces JavaScript code yet.&lt;/p&gt;
      &lt;/div&gt;
      &lt;h2&gt;Conclusion&lt;/h2&gt;
      &lt;p&gt;When we put all the pieces together, we get the greatness from both worlds – we are &lt;strong&gt;testing on the real browsers and the real containers&lt;/strong&gt; during full-fledge testing sessions, but we also get as &lt;strong&gt;fast feedback&lt;/strong&gt; as possible with our integration tests running on the mock browsers.&lt;/p&gt;
      &lt;p&gt;In this series I wanted to show you that testing &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; can be really simple with employing right tools for the job. Arquillian gives us everything we need:&lt;/p&gt;
      &lt;ul&gt;
      &lt;li&gt;extensive coverage&lt;/li&gt;
      	&lt;li&gt;ability to run in continous integration&lt;/li&gt;
      	&lt;li&gt;effective development and debugging workflows&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;At the end, you are provided with incredibly useful set of technologies which guards your implementation, increases the trust in a code and, what’s most important, it &lt;strong&gt;makes the testing fun again&lt;/strong&gt;!&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2013/06/testing-jsf-richfaces-arquillian-3-mastering-debugger.html</id>
    <title>Testing JSF and RichFaces with Arquillian - Part III - Mastering the Debugger</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2013-06-06T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2013/06/testing-jsf-richfaces-arquillian-3-mastering-debugger.html" rel="alternate" type="text/html" />
    <category term="arquillian"></category>
    <category term="warp"></category>
    <category term="graphene"></category>
    <category term="jsf"></category>
    <category term="richfaces"></category>
    <category term="series"></category>
    <category term="testing-jsf"></category>
    <summary>
      We have previously discussed which technologies to use and how to improve the test development turnaround when we want to test JSF with Arquillian.
      However developing tests using the right tools used the right way isn&#8217;t the last stop in a development cycle. However by improving our tooling and speeding up our development cycle we cover just a half of efforts we put into test suites.
      The another big portion we spent with is test maintanance. Your tests will very likely hit issues which you will need to analyze sooner than later.
      And that&#8217;s where Arquillian strikes again &#8211; it not only helps...
    </summary>
    <content type="html">
      &lt;p&gt;We have previously discussed &lt;a href=&quot;http://localhost:4242/blog/2013/01/richfaces-testing.html&quot;&gt;which technologies to use&lt;/a&gt; and &lt;a href=&quot;http://localhost:4242/blog/2013/06/testing-jsf-richfaces-arquillian-2-rapid-test-development.html&quot;&gt;how to improve the test development turnaround&lt;/a&gt; when we want to test &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; with Arquillian.&lt;/p&gt;
      &lt;p&gt;However developing tests using the right tools used the right way isn’t the last stop in a development cycle. However by improving our tooling and speeding up our development cycle we cover just a half of efforts we put into test suites.&lt;/p&gt;
      &lt;p&gt;The another big portion we spent with is test maintanance. Your tests will very likely hit issues which you will need to analyze sooner than later.&lt;/p&gt;
      &lt;p&gt;And that’s where Arquillian strikes again – it not only helps you to discover a bug, it will also help you to debug it and find the root cause.&lt;/p&gt;
      &lt;h2&gt;Debugging&lt;/h2&gt;
      &lt;p&gt;With an automated test scenario in form of Arquillian test, you are getting the &lt;strong&gt;ultimate tool for reproduction&lt;/strong&gt; of an issue in your hands.&lt;/p&gt;
      &lt;p&gt;You can repeatedly run the test, and always as you hit an issue, you are also provided with the context which led you to the failure.&lt;/p&gt;
      &lt;p&gt;So let’s stop refreshing a browser window in order to see an issue – write a reproduction scenario and open &lt;strong&gt;the&lt;/strong&gt; tool, which will give you immense power during test maintanance – the debugger.&lt;/p&gt;
      &lt;h3&gt;Server Debugging&lt;/h3&gt;
      &lt;p&gt;When you started an application server in debug mode, the only step left is attaching your &lt;span class=&quot;caps&quot;&gt;IDE&lt;/span&gt; to a remote &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/technotes/guides/jpda/architecture.html&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JDI&lt;/span&gt;&lt;/a&gt; session.&lt;/p&gt;
      &lt;p&gt;In order to debug all the context, it is useful to attach the sources of an application server (that is another case where open source projects shines).&lt;/p&gt;
      &lt;div class=&quot;alert alert-info&quot;&gt;In order to save the time setting up the debugging environment, JBoss Developer Studio comes with an &lt;a href=&quot;https://community.jboss.org/en/tools/blog/2012/01/24/jboss-source-lookup&quot;&gt;automated application server source lookup&lt;/a&gt;. Really neat feature.&lt;/div&gt;
      &lt;h3&gt;Browser Debugging&lt;/h3&gt;
      &lt;p&gt;The opposite end of your application usually comes a little wild – a web client. In order to tame this beast, you will need to master an altogether different sort of tool: browser development tools.&lt;/p&gt;
      &lt;p&gt;Each of the mainstream browsers comes with such tools:&lt;/p&gt;
      &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://developers.google.com/chrome-developer-tools/&quot;&gt;Chrome DevTools&lt;/a&gt;&lt;/li&gt;
      	&lt;li&gt;
      &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools&quot;&gt;Firefox Developer Tools&lt;/a&gt; (alternatively &lt;a href=&quot;https://www.getfirebug.com/&quot;&gt;Firebug&lt;/a&gt;)&lt;/li&gt;
      	&lt;li&gt;&lt;a href=&quot;http://www.opera.com/dragonfly/documentation/&quot;&gt;Opera Dragonfly&lt;/a&gt;&lt;/li&gt;
      	&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd565628(v=vs.85).aspx&quot;&gt;Internet Explorer DevTools&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;The fact that by using Selenium you control a real browser will help you to hit same issues you are running into during test execution.&lt;/p&gt;
      &lt;h4&gt;Reusable Debugging Session&lt;/h4&gt;
      &lt;p&gt;Do you remember I told you to use a remote reusable session? It is not just for the sake of saving browser startup time.&lt;/p&gt;
      &lt;p&gt;When &lt;a href=&quot;https://docs.jboss.org/author/display/ARQ/Drone#Drone-Selenium2%28WebDriver%29configuration&quot;&gt;Drone’s reusable remote session feature&lt;/a&gt; is enabled, the browser session remains open until you kill it. As oppose to a standard Selenium mode which starts and stops the browser for each test case, you can recycle the browser session setup – including the setup of the developer tools (opened tabs, breakpoints, etc.).&lt;/p&gt;
      &lt;h4&gt;Warp&lt;/h4&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/lfryc/arquillian.github.com/blob/warp-docs/docs/warp.adoc&quot;&gt;The Warp extension&lt;/a&gt; opens completely another set of options – it is a tool for programatic inspection of a server-side application logic while test is executed from the perspective of the client. And it plays really nice with a browser-based tests.&lt;/p&gt;
      &lt;p&gt;Warp can be used to narrow down an issue. Do you have an assumption that something is going wrong on the server? Just &lt;strong&gt;describe your expectations&lt;/strong&gt; in your test code as assertion. Do you want to debug some code which is hardly accessible – let’s &lt;strong&gt;hook into the execution&lt;/strong&gt; and see what happens.&lt;/p&gt;
      &lt;h3&gt;Debugging Arquillian&lt;/h3&gt;
      &lt;p&gt;I can guarantee that sometimes the Arquillian tests will fail to do what you want.&lt;/p&gt;
      &lt;p&gt;No matter whether you are hitting an Arquillian’s issue or your own issue, it always helps to see &lt;a href=&quot;http://localhost:4242/blog/2013/06/debugging-arquillian.html&quot;&gt;what actually Arquillian do&lt;/a&gt; and compare it with your assumptions. &lt;strong&gt;Revealing a test execution internals&lt;/strong&gt; can sometimes avoid a lot of time debugging issues caused by badly written test.&lt;/p&gt;
      &lt;h2&gt;Conclusion&lt;/h2&gt;
      &lt;p&gt;As you can see, Arquillian empowers you not only with new options of how to write reliable tests in very lean fashion, but also the infinite power of debugging application on both, server-side and client-side.&lt;/p&gt;
      &lt;p&gt;So, stop mocking the tests, when you can &lt;strong&gt;use real tests that gives you outstanding insight nothing can surpass&lt;/strong&gt;.&lt;/p&gt;
      &lt;h3&gt;Next Time&lt;/h3&gt;
      &lt;p&gt;In the next part of this &lt;a href=&quot;http://localhost:4242/blog/tags/testing-jsf/&quot;&gt;series&lt;/a&gt;, I will explain how we &lt;a href=&quot;http://localhost:4242/blog/2013/06/testing-jsf-richfaces-arquillian-4-continous-integration.html&quot;&gt;achieved automation&lt;/a&gt; – and as I already announced, we won’t stay just with simple test execution.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2013/06/testing-jsf-richfaces-arquillian-2-rapid-test-development.html</id>
    <title>Testing JSF and RichFaces with Arquillian - Part II - Rapid Test Development</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2013-06-05T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2013/06/testing-jsf-richfaces-arquillian-2-rapid-test-development.html" rel="alternate" type="text/html" />
    <category term="arquillian"></category>
    <category term="warp"></category>
    <category term="graphene"></category>
    <category term="jsf"></category>
    <category term="richfaces"></category>
    <category term="series"></category>
    <category term="testing-jsf"></category>
    <summary>
      In a previous post we have discussed what technologies we use for testing JSF and RichFaces in particular.
      The tools we use focus on testing complex business applications with rich user interfaces. But as the complexity of an application evolves, the level of the abstraction can grow unwieldy.
      Fortunatelly Arquillian allows us to tame the complexity and get an application&#8217;s evolution under control. As Arquillian focuses on testing the real behavior of an application in its real integration environment, it gives you a satisfactory feeling that what you have done really will work in production.
      Real Stuff &#8211; It Must Be Slow(?)
      However leveraging...
    </summary>
    <content type="html">
      &lt;p&gt;In a previous post we have discussed what technologies we use for testing &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; and RichFaces in particular.&lt;/p&gt;
      &lt;p&gt;The tools we use focus on testing &lt;strong&gt;complex business applications with rich user interfaces&lt;/strong&gt;. But as the complexity of an application evolves, the level of the abstraction can grow unwieldy.&lt;/p&gt;
      &lt;p&gt;Fortunatelly Arquillian allows us to tame the complexity and get an application’s evolution under control. As Arquillian focuses on testing the real behavior of an application in its real integration environment, it gives you a &lt;strong&gt;satisfactory feeling&lt;/strong&gt; that what you have done really will work in production.&lt;/p&gt;
      &lt;h3&gt;Real Stuff – It Must Be Slow(?)&lt;/h3&gt;
      &lt;p&gt;However leveraging real stuff for testing &lt;em&gt;(the same as with magic)&lt;/em&gt; always comes with a price: it is usually hard to set up and slow to execute.  That’s why it is pretty boring, isn’t it?&lt;/p&gt;
      &lt;p&gt;&lt;em&gt;Not exactly.&lt;/em&gt;&lt;/p&gt;
      &lt;p&gt;With the right tools employed, you can achieve a really fast test development approach that will make testing fun again!&lt;/p&gt;
      &lt;h3&gt;Fast Development Turnaround&lt;/h3&gt;
      &lt;h5&gt;Running Test from an &lt;span class=&quot;caps&quot;&gt;IDE&lt;/span&gt;
      &lt;/h5&gt;
      &lt;p&gt;Really. With Arquillian, you can always run the integration test from an &lt;span class=&quot;caps&quot;&gt;IDE&lt;/span&gt;.  In fact, it is the preferred way to develop and debug tests.&lt;/p&gt;
      &lt;p&gt;Doing so will avoid the need to bootstrap the build system and save you some (or &lt;a href=&quot;http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference&quot;&gt;rather a lot of&lt;/a&gt;) cycles.&lt;/p&gt;
      &lt;div class=&quot;alert alert-info&quot;&gt;The &lt;a href=&quot;https://devstudio.jboss.com/earlyaccess/&quot;&gt;JBoss Developer Studio&lt;/a&gt; and its &lt;a href=&quot;http://docs.jboss.org/tools/whatsnew/arquillian/arquillian-news-4.1.0.Beta1.html&quot;&gt;Arquillian Eclipse integration&lt;/a&gt; even understand the semantics of Arquillian tests and gives you capabilities of scaffolding, contextual navigation, exploring of deployments, etc.&lt;/div&gt;
      &lt;h5&gt;Remote Container&lt;/h5&gt;
      &lt;p&gt;Even though containers nowadays start applications &lt;a href=&quot;http://zeroturnaround.com/rebellabs/the-great-java-application-server-debate-with-tomcat-jboss-glassfish-jetty-and-liberty-profile/6/&quot;&gt;blazingly fast&lt;/a&gt;, you should use a manually started container and let Arquillian connect to it using a &lt;a href=&quot;https://docs.jboss.org/author/display/ARQ/Container+adapters&quot;&gt;remote container adapter&lt;/a&gt;.&lt;/p&gt;
      &lt;p&gt;This will save you the time needed to intialize the container and all you need to do is to deploy the application (which itself can be time-consuming, as you can read below).&lt;/p&gt;
      &lt;h5&gt;Deployable Archives&lt;/h5&gt;
      &lt;h6&gt;Micro-Deployments&lt;/h6&gt;
      &lt;p&gt;When constructing an application deployment, you should &lt;a href=&quot;http://blog.diabol.se/?p=322&quot;&gt;use as minimal a deployment as possible&lt;/a&gt;. &lt;em&gt;Period.&lt;/em&gt;&lt;/p&gt;
      &lt;p&gt;It will then take less time to construct the deployable archive and it can be deployed to the container faster.&lt;/p&gt;
      &lt;h6&gt;Prototyping&lt;/h6&gt;
      &lt;p&gt;As it might be time-consuming to split the application into it’s simplest possible pieces and allow for the composition of micro-deployments, it is still a very useful tool in the early stages of application development.&lt;/p&gt;
      &lt;p&gt;In the prototyping stage, you can simply implement against &lt;a href=&quot;http://martinfowler.com/articles/mocksArentStubs.html&quot;&gt;stub implementations&lt;/a&gt; of real interfaces that your application will need to integrate with at the end.&lt;/p&gt;
      &lt;h6&gt;Avoiding Unnecessary Initialization&lt;/h6&gt;
      &lt;p&gt;Even if you decide not to split the deployment into micro-deployments, you should nevertheless give special attention to minimizing the time the application needs to initialize after deployment.&lt;/p&gt;
      &lt;p&gt;Doing so can save you addtional time for both you and your colleages. And you just need to decide whether (e.g. for testing &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; views) the messaging system is really in fact necessary.&lt;/p&gt;
      &lt;h5&gt;Reusable Remote Selenium Session&lt;/h5&gt;
      &lt;p&gt;Selenium / WebDriver is an outstanding helper for browser automation, but it is very demanding when it comes to it’s initialization. Usually Selenium itself needs to be started first and then you can connect to it and request the creation of a browser session.&lt;/p&gt;
      &lt;p&gt;Luckily, the architecture of Selenium allows you to use not only direct control over the browser, but you can also use a remote session – you connect the test to the Selenium Server which is already started.&lt;/p&gt;
      &lt;p&gt;Furthermore, you can also connect to a running browser – by Drone’s exclusive &lt;a href=&quot;http://blog.itcrowd.pl/2013/02/arquillian-graphene-2-and-webdriver.html&quot;&gt;browser session reuse&lt;/a&gt; feature.&lt;/p&gt;
      &lt;p&gt;This way the test will not need to start anything, it will just connect to the instance of a browser which is already running and request the page directly.&lt;/p&gt;
      &lt;h3&gt;Time Savings&lt;/h3&gt;
      &lt;p&gt;Okay, I might not be convincing you yet, so let’s see a &lt;a href=&quot;https://github.com/richfaces/richfaces/blob/5.0.0.Alpha1/TESTS.md#framework-tests-overview&quot;&gt;real life scenario&lt;/a&gt; and execute a test from the command line:&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;$ mvn verify -Dintegration=jbossas71 -Dbrowser=chrome -DskipTests=true -Dgeneration.skip=true -Doptimization.skip=true -Darquillian.container.uninstall=false -Dtest=ITTableState &lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;When we execute a specific test case from the Maven &lt;span class=&quot;caps&quot;&gt;CLI&lt;/span&gt;, it executes in &lt;strong&gt;33.6s&lt;/strong&gt; (considering that some unnecessary steps were disabled).&lt;/p&gt;
      &lt;p&gt;Because we have actually executed 5 tests from the integration case &lt;tt&gt;ITTableState&lt;/tt&gt;, we can further improve the execution time just by selecting one particular test – let’s execute the test from our &lt;span class=&quot;caps&quot;&gt;IDE&lt;/span&gt;.&lt;/p&gt;
      &lt;h4&gt;&lt;span class=&quot;caps&quot;&gt;IDE&lt;/span&gt;&lt;/h4&gt;
      &lt;p&gt;The &lt;span class=&quot;caps&quot;&gt;IDE&lt;/span&gt; reports we have executed a specific test method in &lt;strong&gt;19.0s&lt;/strong&gt;. That’s a fair improvement.&lt;/p&gt;
      &lt;div class=&quot;alert alert-info&quot;&gt;
      &lt;p&gt;How is it possible?&lt;/p&gt;
      &lt;p&gt;The Maven build itself is able to do incremental builds (as long as the plugins you use support it). Even though, the plugin needs to be always initiated just to check that nothing changed. The &lt;span class=&quot;caps&quot;&gt;IDE&lt;/span&gt; is smarter here as it does an incremental build when the source code changes. When you execute the test, everything is already built and you don’t need to spend any extra time by doing a build of the application.&lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt;Okay, but I promised you we can a significant improvement of the test execution time – let’s see how close to zero execution time we can go.. ;-)&lt;/p&gt;
      &lt;h4&gt;Remote Servers&lt;/h4&gt;
      &lt;p&gt;When I start noth the application server and the Selenium Server, I’m pretty prepared to do the job right way.&lt;/p&gt;
      &lt;p&gt;When I execute the test for the first time, it takes &lt;strong&gt;12.9s&lt;/strong&gt;. But what happens is that the browser window is opened by Selenium Server and it remains open after the test finishes. Let’s run the test again.&lt;/p&gt;
      &lt;p&gt;For the second test run, it now takes just &lt;strong&gt;6.5s&lt;/strong&gt;. That’s &lt;em&gt;&lt;span class=&quot;caps&quot;&gt;FIVE&lt;/span&gt;&lt;/em&gt; time less than when we executed the test for the first time.&lt;/p&gt;
      &lt;p&gt;But there is not only the advantage of repeated time savings, there is a similarly huge impact on the psychological side of things.  Your brain does not do a (harmful) context switch on the order of seconds.  So once the test finishes, you are still focused on the task and it’s tiny details – provided the test finishes quickly enough.&lt;/p&gt;
      &lt;div class=&quot;alert alert-info&quot;&gt;
      &lt;p&gt;For a critics’ eyes: you can still save some additional time: when you disable Arquillian’s deployment management, deploy the test into the container before the execution, and provide the &lt;span class=&quot;caps&quot;&gt;URL&lt;/span&gt; of a application directly to the test, then the execution of the test alone goes down to &lt;strong&gt;1.7s&lt;/strong&gt;. At least half ot this time is spent in an initialization of a Arquillian Core.&lt;/p&gt;
      &lt;p&gt;&lt;br&gt;
      Don’t blame Arquillian – the big portion of this overhead which Arquillian gives to the execution is caused by initializations which happen once per test suite, so during over several runs, you won’t feel it at all. But during development, it can matter! And we are working on that. :-)&lt;/p&gt;
      &lt;/div&gt;
      &lt;h3&gt;Conclusion&lt;/h3&gt;
      &lt;p&gt;As you can saw, with the right tools in place, you can achieve incredibly fast testing turnaround.&lt;/p&gt;
      &lt;p&gt;In the next parts of &lt;a href=&quot;../../tags/testing-jsf/&quot;&gt;this series&lt;/a&gt;, we will focus on:&lt;/p&gt;
      &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;../../2013/06/testing-jsf-richfaces-arquillian-3-mastering-debugger.html&quot;&gt;how to master debugging tools&lt;/a&gt;&lt;/li&gt;
      	&lt;li&gt;&lt;a href=&quot;../../2013/06/testing-jsf-richfaces-arquillian-4-continous-integration.html&quot;&gt;running integration tests in continuous integration&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2013/06/debugging-arquillian.html</id>
    <title>Debugging Arquillian Test Execution</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2013-06-04T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2013/06/debugging-arquillian.html" rel="alternate" type="text/html" />
    <category term="arquillian"></category>
    <category term="debugging"></category>
    <summary>
      It is practically unavoidable to hit issues during a test execution. Fortunately, with the Arquillian, debugging such issue is a really simple task.
      Revealing Arquillian Internals
      Curious what might happen as the test fails?
      Let&#8217;s look at a following snippet of a Arquillian execution log:
      For a sake of simplification, I have removed some unimportant parts.
      (E) ManagerProcessing
      	(O) LoadableExtensionLoader.load
      	(E) ServiceLoader
      (E) ManagerStarted
      (E) BeforeSuite
      (E) BeforeClass
      	(E) DroneConfigured
      		(O) DroneCreator.createWebTestBrowser
      PhantomJS is launching GhostDriver...
      		(E) DroneReady
      (E) Before
      (E) Test
      	(E) ExecutionEvent
      		(O) LocalTestExecuter.execute
      (E) FilterResponse
      		(E) ExecuteWarp
      (E) FilterRequest
      	(O) EnrichmentObserver.tryEnrichRequest
              (R) /ITTableState/faces/index.xhtml;jsessionid=v97p4MziZB0-9ymGaHHuQqcW
      	(E) EnrichRequest
      		(O) EnrichmentObserver.enrichRequest
                      (W) /ITTableState/faces/index.xhtml;jsessionid=v97p4MziZB0-9ymGaHHuQqcW
      (E)...
    </summary>
    <content type="html">
      &lt;p&gt;It is practically unavoidable to hit issues during a test execution. Fortunately, with the Arquillian, debugging such issue is a really simple task.&lt;/p&gt;
      &lt;h3&gt;Revealing Arquillian Internals&lt;/h3&gt;
      &lt;p&gt;Curious what might happen as the test fails?&lt;/p&gt;
      &lt;p&gt;Let’s look at a following snippet of a &lt;a href=&quot;https://gist.github.com/lfryc/5755788&quot;&gt;Arquillian execution log&lt;/a&gt;:&lt;/p&gt;
      &lt;div class=&quot;alert alert-info&quot;&gt;For a sake of simplification, I have removed some unimportant parts.&lt;/div&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;(E) ManagerProcessing
      	(O) LoadableExtensionLoader.load
      	(E) ServiceLoader
      (E) ManagerStarted
      (E) BeforeSuite
      (E) BeforeClass
      	(E) DroneConfigured
      		(O) DroneCreator.createWebTestBrowser
      PhantomJS is launching GhostDriver...
      		(E) DroneReady
      (E) Before
      (E) Test
      	(E) ExecutionEvent
      		(O) LocalTestExecuter.execute
      (E) FilterResponse
      		(E) ExecuteWarp
      (E) FilterRequest
      	(O) EnrichmentObserver.tryEnrichRequest
              (R) /ITTableState/faces/index.xhtml;jsessionid=v97p4MziZB0-9ymGaHHuQqcW
      	(E) EnrichRequest
      		(O) EnrichmentObserver.enrichRequest
                      (W) /ITTableState/faces/index.xhtml;jsessionid=v97p4MziZB0-9ymGaHHuQqcW
      (E) FilterResponse
      	(E) DeenrichResponse
      (E) After
      (E) AfterSuite
      (E) ManagerStopping&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;Arquillian Core is de facto an &lt;a href=&quot;https://github.com/aslakknutsen/arquillian.github.com/blob/e2fc397f166a8dbca2a45ccea5c509c617abe524/guides/getting_started_spi.textile&quot;&gt;extensible event machine based&lt;/a&gt; on a network of loosely coupled components – &lt;em&gt;services&lt;/em&gt; – which are triggered by &lt;em&gt;events&lt;/em&gt; and their &lt;em&gt;observers&lt;/em&gt;.&lt;/p&gt;
      &lt;p&gt;Arquillian can print a nice overview (in a form of event tree) revealing how events flows through a system while running a test.&lt;/p&gt;
      &lt;h4&gt;Legend&lt;/h4&gt;
      &lt;p&gt;In order to&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;[E] observable event
        - an event was fired
        - or object was produced to the context
        - or exception happened in an observer
      [O] observer - the event was observed by a observer
      [I] interceptor - the event was intercepted&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;If you compare the event tree on the start of this blog, you can now identify that the tree contains an information how events are fired (&lt;tt&gt;[E]&lt;/tt&gt;), what observers reacts on them (&lt;tt&gt;[O]&lt;/tt&gt;) and what interceptors are used during an observing (&lt;tt&gt;[I]&lt;/tt&gt;).&lt;/p&gt;
      &lt;p&gt;Additionally some extensions like Warp can add some own information:&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;[R] the request was noticed on a proxy
      [W] the request was inspected by Warp&lt;/code&gt;&lt;/pre&gt;
      &lt;h3&gt;Turning Debugging Mode On&lt;/h3&gt;
      &lt;p&gt;You can turn the debugging mode by using the VM argument (both, for the test and for the application server):&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;-Darquillian.debug=true&lt;/code&gt;&lt;/pre&gt;
      &lt;h4&gt;Debugging in JBoss Developer Studio&lt;/h4&gt;
      &lt;p&gt;IDEs usually does pretty good job and allows you to configure VM arguments as needed.&lt;/p&gt;
      &lt;p&gt;Eclipse specifically has little drawback – the configuration of VM arguments is set on a level of test configuration.&lt;/p&gt;
      &lt;p&gt;If you are using &lt;a href=&quot;https://devstudio.jboss.com/earlyaccess/7.0/&quot;&gt;JBoss Developer Studio 7+&lt;/a&gt;, you are lucky man – it allows you to &lt;a href=&quot;http://screencast.com/t/Lrh0AA2hD55&quot;&gt;configure VM arguments&lt;/a&gt; for all executed application servers and JUnit/TestNG tests.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2013/02/jhackfest.html</id>
    <title>JHackFest in Brno - Java &amp; JVM languages, Frameworks and Tools</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2013-02-13T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2013/02/jhackfest.html" rel="alternate" type="text/html" />
    <category term="event"></category>
    <category term="arquillian"></category>
    <summary>
      Developer Conference will be held in Brno in just under two weeks. Since it will highly increase the concentration of hackers and people who are fond of open source, we leverage this fantastic opportunity to organize a hackfest!
      Last year we organized a hackfest with a focus on testing and the event was very successful.
      This year we are opening the hackfest to all projects and ideas related to Java and JVM languages (groovy, scala, clojure, ceylon, jruby, javascript, &#8230;), frameworks or tools.
      Occassion
      The hackfest will take place Februry 23-24th (conference days), close to the conference rooms and labs, in meeting room B431...
    </summary>
    <content type="html">
      &lt;p&gt;&lt;a href=&quot;http://devconf.cz/&quot;&gt;Developer Conference&lt;/a&gt; will be held in Brno in just under two weeks. Since it will highly increase the concentration of hackers and people who are fond of open source, we leverage this &lt;strong&gt;fantastic&lt;/strong&gt; opportunity to organize a &lt;strong&gt;hackfest&lt;/strong&gt;!&lt;/p&gt;
      &lt;p&gt;Last year we organized &lt;a href=&quot;https://plus.google.com/109501071933862146039/posts/dyo3hU9smcj&quot;&gt;a hackfest&lt;/a&gt; with a focus on testing and &lt;a href=&quot;http://lukas.fryc.eu/blog/2012/02/wrap-up-arquillian-hackfest-developer.html&quot;&gt;the event was very successful&lt;/a&gt;.&lt;/p&gt;
      &lt;p&gt;This year we are opening the hackfest to all projects and ideas related to &lt;strong&gt;Java and &lt;span class=&quot;caps&quot;&gt;JVM&lt;/span&gt; languages (groovy, scala, clojure, ceylon, jruby, javascript, …), frameworks or tools&lt;/strong&gt;.&lt;/p&gt;
      &lt;h2&gt;Occassion&lt;/h2&gt;
      &lt;p&gt;The hackfest will take place &lt;strong&gt;Februry 23-24th&lt;/strong&gt; (&lt;a href=&quot;http://developerconference2013.sched.org/grid-full&quot;&gt;conference days&lt;/a&gt;), close to the conference rooms and labs, in &lt;strong&gt;meeting room B431&lt;/strong&gt; (pavilion B, 4th floor).&lt;/p&gt;
      &lt;h4&gt;Watch the Event&lt;/h4&gt;
      &lt;p&gt;If you are not able to come, you can watch the event with Twitter hashtag &lt;a href=&quot;https://twitter.com/search/realtime?q=%23hackdevconf&quot;&gt;&lt;code&gt;#hackdevconf&lt;/code&gt;&lt;/a&gt;. We cover there latest happenings.&lt;/p&gt;
      &lt;h2&gt;Schedule&lt;/h2&gt;
      &lt;p&gt;The event is on the &lt;a href=&quot;http://developerconference2013.sched.org/grid-full&quot;&gt;official conference schedule&lt;/a&gt;:&lt;/p&gt;
      &lt;ul&gt;
      &lt;li&gt;Saturday &lt;a href=&quot;http://developerconference2013.sched.org/event/7c08b775babc1f87f4432cd7f7fc90e5#.URt29OknnVM&quot;&gt;12:30-18:30&lt;/a&gt;
      &lt;/li&gt;
      	&lt;li&gt;Sunday &lt;a href=&quot;http://developerconference2013.sched.org/event/21c5f9d1b0d412790bbfa32a6cdbbeab#.URt3SOknnVM&quot;&gt;09:00-18:30&lt;/a&gt;
      &lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;We extend the hackfest to go beyond the conference schedule and will continue hacking on &lt;strong&gt;Monday 25th at the &lt;a href=&quot;http://goo.gl/maps/gIv9y&quot;&gt;Red Hat Office&lt;/a&gt; in Brno&lt;/strong&gt;.&lt;/p&gt;
      &lt;h2&gt;Hackers &amp;amp; Mentors&lt;/h2&gt;
      &lt;ul&gt;
      &lt;li&gt;Would you like to hack on some &lt;strong&gt;cool new features&lt;/strong&gt; for your project?&lt;/li&gt;
      	&lt;li&gt;Do you have &lt;strong&gt;ideas&lt;/strong&gt; that deserve to be pushed further?&lt;/li&gt;
      	&lt;li&gt;Do you love working with &lt;strong&gt;code and interesting projects&lt;/strong&gt;?&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;There will be plenty of people willing to hack with you and give life to interesting ideas.&lt;/p&gt;
      &lt;h2&gt;Organization&lt;/h2&gt;
      &lt;h4&gt;Start&lt;/h4&gt;
      &lt;p&gt;At the start of the hackfest (Saturday 12:30) we will collect and review the proposed ideas. You can propose new ideas on the spot, so don’t worry if you didn’t get a chance to blog about it upfront.&lt;/p&gt;
      &lt;p&gt;Then we will do a quick vote in order to estimate the interest in a particular projects/idea.&lt;/p&gt;
      &lt;p&gt;After separating the hackers into groups, we will dive down into the code.&lt;/p&gt;
      &lt;h4&gt;Finish &amp;amp; Summary&lt;/h4&gt;
      &lt;p&gt;When finished, we will summarize each project’s achievements – the project development can finish during the event or, preferably, at the end of each day.&lt;/p&gt;
      &lt;h2&gt;Collecting Ideas&lt;/h2&gt;
      &lt;p&gt;In order to publicize your idea, you can either &lt;strong&gt;write a blog&lt;/strong&gt; or you can &lt;strong&gt;&lt;a href=&quot;https://docs.google.com/a/fryc.eu/forms/d/1lguajStvzZwReBz7BZo3n0O0Sx5N3_u1To_T1Dg9skg/viewform&quot;&gt;submit it using this form&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
      &lt;p&gt;If you have &lt;strong&gt;more than one idea&lt;/strong&gt; to propose or you want to &lt;strong&gt;track many ideas for a particular project&lt;/strong&gt;, you can write a wiki article to track them all in one place.&lt;/p&gt;
      &lt;p&gt;All ideas submitted before the start of the event will be collected on this page.&lt;/p&gt;
      &lt;p&gt;Keep in mind that we will be showing off the hacks we have done during the day / conference to the other hackers. So try to limit the scope of the idea to something that can be coded and be up and running within the given time. (We’re not looking for perfection, but if it compiles at the end of the day you get bonus points ;)&lt;/p&gt;
      &lt;h4&gt;Links to collected ideas&lt;/h4&gt;
      &lt;p&gt;(collection in progress)&lt;/p&gt;
      &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://arquillian.org/blog/2013/02/16/devconf-hackfest/&quot;&gt;Arquillian hack ideas&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;&lt;h2&gt;Confirmed Mentors&lt;/h2&gt;
      &lt;table class=&quot;table table-bordered&quot;&gt;
      &lt;tr&gt;
      &lt;th&gt;Name &lt;/th&gt;
      		&lt;th&gt;Role &lt;/th&gt;
      		&lt;th&gt;Project &lt;/th&gt;
      	&lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt; Aslak Knutsen &lt;/td&gt;
      		&lt;td&gt; Project Lead &lt;/td&gt;
      		&lt;td&gt; Arquillian &lt;/td&gt;
      	&lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt; Christian Sadilek &lt;/td&gt;
      		&lt;td&gt; Core Dev &lt;/td&gt;
      		&lt;td&gt; Errai &lt;/td&gt;
      	&lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt; Dan Allen &lt;/td&gt;
      		&lt;td&gt; Community Lead &lt;/td&gt;
      		&lt;td&gt; Arquillian &lt;/td&gt;
      	&lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt; Karel Piwko &lt;/td&gt;
      		&lt;td&gt; QE Lead &lt;/td&gt;
      		&lt;td&gt; Web Framework Kit &lt;/td&gt;
      	&lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt; Lukas Fryc &lt;/td&gt;
      		&lt;td&gt; Core Dev &lt;/td&gt;
      		&lt;td&gt; RichFaces, Arquillian &lt;/td&gt;
      	&lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt; Marek Schmidt &lt;/td&gt;
      		&lt;td&gt; QE Lead &lt;/td&gt;
      		&lt;td&gt; Seam &lt;/td&gt;
      	&lt;/tr&gt;
      &lt;/table&gt;&lt;h2&gt;Venue&lt;/h2&gt;
      &lt;p&gt;The hackfest will be held near the conference, so &lt;strong&gt;feel free to move around between interesting talks or labs and the hackfest&lt;/strong&gt; – but coordinate with your teammates to avoid confusion and loss of valuable hacktime.&lt;/p&gt;
      &lt;p&gt;We will have access to the internet, a projector, a chart, a big table and two small tables, some refreshments, etc.&lt;/p&gt;
      &lt;p&gt;&lt;img src=&quot;../../../images/blog/2013-02-13-jhackfest.textile/20130213_090020.jpg&quot;&gt;&lt;/p&gt;
      &lt;p&gt;We’re all eagerly looking forward to the event, so don’t hesitate! Come join us!&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2013/01/richfaces-testing.html</id>
    <title>Testing JSF and RichFaces with Arquillian - Part I - Used Technologies</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2013-01-29T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2013/01/richfaces-testing.html" rel="alternate" type="text/html" />
    <category term="arquillian"></category>
    <category term="warp"></category>
    <category term="graphene"></category>
    <category term="jsf"></category>
    <category term="richfaces"></category>
    <category term="series"></category>
    <category term="testing-jsf"></category>
    <summary>
      As we announced earlier, we are undergoing several changes in our approach to how RichFaces is tested. We already have an extensive functional test suite authored by a top-notch RichFaces QE team, but this suite doesn&#8217;t allow us to react quickly on regressions introduced and so we usually find some of them during release testing.
      We came to the conclusion that we are doing testing too late after a commit and that the tests we have are too far from a real environment &#8211; they are not real enough.
      The Integration Environment Complexity
      The problem which we face is given by the complexity...
    </summary>
    <content type="html">
      &lt;p&gt;As we announced earlier, we are undergoing several changes in our approach to how RichFaces is tested. We already have an extensive functional test suite authored by a top-notch RichFaces QE team, but &lt;strong&gt;this suite doesn’t allow us to react quickly on regressions&lt;/strong&gt; introduced and so we usually find some of them during release testing.&lt;/p&gt;
      &lt;p&gt;We came to the conclusion that we are doing &lt;strong&gt;testing too late after a commit&lt;/strong&gt; and that &lt;strong&gt;the tests we have are too far from a real environment&lt;/strong&gt; – they are &lt;em&gt;not real enough&lt;/em&gt;.&lt;/p&gt;
      &lt;h3&gt;The Integration Environment Complexity&lt;/h3&gt;
      &lt;p&gt;The problem which we face is given by the complexity of the client-server nature of web frameworks like &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt;.&lt;/p&gt;
      &lt;p&gt;In RichFaces, we build on top of client-side libraries (jQuery, jQuery UI, etc.) that communicate through the &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; client-side library with the &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; backend to an application server.&lt;/p&gt;
      &lt;p&gt;The testing of client-side interactions is then so complex that it is often not covered by tests at all.&lt;/p&gt;
      &lt;p&gt;But while one is avoiding testing of client-side interaction, he might easily underestimate its importance.&lt;/p&gt;
      &lt;div class=&quot;alert alert-info&quot;&gt;Client-side code is very fragile due to diversity of browser implementations – its testing is unavoidable in every serious project.&lt;/div&gt;
      &lt;h4&gt;Standard approaches&lt;/h4&gt;
      &lt;p&gt;The code we write in RichFaces component library can be easily unit tested and so we test regularly units both on the client-side and on the server-side.&lt;/p&gt;
      &lt;p&gt;But the real working units we need to test are in fact &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; components. They are composed from client-side code (Javascript and &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;), &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; templates, Java code and &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; configuration. There are currently only limited options to test them in unit-testing fashion. None of them is really effective.&lt;/p&gt;
      &lt;p&gt;This is the usual story when it comes to integration testing.&lt;/p&gt;
      &lt;h5&gt;Mocking&lt;/h5&gt;
      &lt;p&gt;One might think that this is a case for testing by mocking. &lt;a href=&quot;https://github.com/richfaces4/jsf-test&quot;&gt;So did we&lt;/a&gt;.&lt;/p&gt;
      &lt;p&gt;After years of development, we ended up with many mocks and we got nothing in return other than &lt;strong&gt;hard work for a compiler and huge amount of code to maintain&lt;/strong&gt;. These mocked tests we had were not really guarding us against code modifications and refactoring. Yeah, the mock-based tests are pretty fast, but they don’t guard us from bugs.&lt;/p&gt;
      &lt;div class=&quot;alert alert-info&quot;&gt;You might know that situation – &lt;strong&gt;why you should write a test when you don’t believe it will help you&lt;/strong&gt; to verify correctness and enable change?&lt;/div&gt;
      &lt;p&gt;Using mocks for a component or integration testing is not a way to success.&lt;/p&gt;
      &lt;h3&gt;Arquillian for the Rescue&lt;/h3&gt;
      &lt;p&gt;Fortunately there is one team which lives with the idea “Stop Mocking at All” in mind, and focuses on getting testing real again.&lt;/p&gt;
      &lt;h4&gt;Effortless Test Harness&lt;/h4&gt;
      &lt;p&gt;&lt;a href=&quot;http://arquillian.org/&quot;&gt;Arquillian&lt;/a&gt; integrates with (almost) every application container out there in a unified manner, so it’s very easy to set your application for a cross-container testing.&lt;/p&gt;
      &lt;h5&gt;Easy Packaging&lt;/h5&gt;
      &lt;p&gt;For a packaging of application pieces, you can leverage the &lt;a href=&quot;http://arquillian.org/guides/shrinkwrap_introduction/&quot;&gt;ShrinkWrap &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;&lt;/a&gt; to easily achieve either packaging of micro-deployments or the whole application (using &lt;a href=&quot;https://gist.github.com/kpiwko/5697999&quot;&gt;ShrinWrap Resolvers&lt;/a&gt;). Additionally, you can use a fluent &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; for describing the deployment configuration (&lt;a href=&quot;https://community.jboss.org/wiki/ShrinkwrapDeploymentDescriptorsWiki&quot;&gt;ShrinkWrap Descriptors&lt;/a&gt;).&lt;/p&gt;
      &lt;h4&gt;Get Me a Real Browser&lt;/h4&gt;
      &lt;p&gt;From the perspective of web UI testing it is important that Arquillian allows the control of real browsers using a &lt;a href=&quot;https://docs.jboss.org/author/display/ARQ/Drone&quot;&gt;Drone extension&lt;/a&gt;. Drone brings a browser to the test and exposes it using the widely-adopted &lt;a href=&quot;https://docs.jboss.org/author/display/ARQGRA2/Using+WebDriver&quot;&gt;WebDriver &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;@Drone WebDriver driver;&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;No matter which browser you use, you will write the same test just once and you will be empowered to run it on (almost) every browser out there in an unified manner.&lt;/p&gt;
      &lt;p&gt;In this way, you can run your tests everywhere:&lt;/p&gt;
      &lt;ul&gt;
      &lt;li&gt;on various versions of mainstream &lt;strong&gt;desktop browsers&lt;/strong&gt;
      &lt;/li&gt;
      	&lt;li&gt;on various &lt;strong&gt;mobile devices&lt;/strong&gt; (emulated or real)&lt;/li&gt;
      	&lt;li&gt;on &lt;strong&gt;mocked browsers&lt;/strong&gt;
      &lt;/li&gt;
      	&lt;li&gt;remotely on &lt;strong&gt;virtualized browser grids&lt;/strong&gt; (on-demand)&lt;/li&gt;
      	&lt;li&gt;remotely using a &lt;strong&gt;cloud browser provider&lt;/strong&gt;
      &lt;/li&gt;
      &lt;/ul&gt;&lt;div class=&quot;alert alert-info&quot;&gt;Note: WebDriver is the Selenium 2 &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;, which is undergoing the process of &lt;a href=&quot;https://dvcs.w3.org/hg/webdriver/raw-file/default/webdriver-spec.html&quot;&gt;W3C standardation&lt;/a&gt;.&lt;/div&gt;
      &lt;h4&gt;Arquillian Saves the Day&lt;/h4&gt;
      &lt;p&gt;With Arquillian, you can let the browser of your choice talk to the application server of your choice.&lt;/p&gt;
      &lt;p&gt;But you can do much more and test more effectively if you will look at additional Arquillian’s extensions:&lt;/p&gt;
      &lt;h3&gt;Gray-Box Testing&lt;/h3&gt;
      &lt;p&gt;&lt;em&gt;Warp your test from the Client to the Server.&lt;/em&gt;&lt;/p&gt;
      &lt;p&gt;In server-side web frameworks, you typically do complex interactions which involves a portion of client-side code and a portion of server-side state manipulation. But how to test more complex interactions? What happens when we trigger client-side code (e.g. hit a button)? What is the reaction on the server-side (e.g. are &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; events raised)?&lt;/p&gt;
      &lt;p&gt;That’s exactly where a &lt;a href=&quot;https://github.com/arquillian/arquillian-extension-warp/blob/master/README.md&quot;&gt;Arquillian Warp&lt;/a&gt; extension comes in – it allows you to write tests as a combination of client-side activities and inspect what is happening in the server as simply as&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;Warp
          .initiate(Activity)
          .inspect(Inspection);&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;It allows you to perform anything you can imagine on the client-side and once your client makes a &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; request to the server, you can inspect what happens on the server-side.&lt;/p&gt;
      &lt;p&gt;During a server inspection, you can inject, test and assert state injected of the application in the same way as you would do in Arquillian’s in-container test.&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;@Inject MyBean myBean;&lt;/code&gt;
      
      &lt;code class=&quot;prettify&quot;&gt;@AfterPhase(INVOKE_APPLICATION)
      public void verifyThatBeanWasInvoked() {
      	myBean.wasIInvoked()?
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;In the words of &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt;, you can manipulate the &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; components on the page and you can inspect what happens to the application state throughout the &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; lifecycle, looking at the state of your beans or what messages were produced as the response to the user’s action and much more.&lt;/p&gt;
      &lt;p&gt;Warp is outstanding servant when it comes to testing the real client-server interaction.&lt;/p&gt;
      &lt;div class=&quot;alert alert-info&quot;&gt;Note: Warp is officially a successor of &lt;a href=&quot;http://www.jboss.org/jsfunit/&quot;&gt;JSFUnit project&lt;/a&gt;.&lt;/div&gt;
      &lt;h3&gt;Testing &lt;span class=&quot;caps&quot;&gt;AJAX&lt;/span&gt;-heavy applications&lt;/h3&gt;
      &lt;p&gt;You could be all setup now, but you will quickly come to a conclusion that WebDriver itself isn’t strong enough to deal with highly-interactive &lt;span class=&quot;caps&quot;&gt;AJAX&lt;/span&gt;-based applications (as applications built with RichFaces are). This is where Graphene comes in.&lt;/p&gt;
      &lt;p&gt;&lt;a href=&quot;https://docs.jboss.org/author/display/ARQGRA2/Home&quot;&gt;Arquillian Graphene&lt;/a&gt; allows you to precisely and concisely describe what interactions happen in the browser so the test will execute deterministically:&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;addButton.click();
      waitGui().until().element(newRecord).is().present();&lt;/code&gt;
      
      &lt;code class=&quot;prettify&quot;&gt;assertEquals(..., newRecord.getText());&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;Ironically, it is even simpler to wait for updates from a server, since Graphene allows you to &lt;a href=&quot;https://docs.jboss.org/author/display/ARQGRA2/Request+Guards&quot;&gt;guard a communication&lt;/a&gt; between client and server – it blocks the test execution until the communication ends:&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;searchInput.sendKeys(&quot;Java Testing Platform&quot;);
      guardXhr(searchButton).click();
      assertEquals(&quot;Arquillian&quot;, searchResults.get(0).getText());&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;Graphene is an awesome tool for dealing with &lt;span class=&quot;caps&quot;&gt;AJAX&lt;/span&gt;-heavy pages.&lt;/p&gt;
      &lt;h3&gt;Page Abstractions&lt;/h3&gt;
      &lt;p&gt;Using the WebDriver &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;, you need to manipulate the page with the low-level web APIs: &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;DOM&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;, JavaScript. The tests can quickly become hard to read and maintain.&lt;/p&gt;
      &lt;p&gt;That’s why we have adopted a &lt;a href=&quot;https://docs.jboss.org/author/display/ARQGRA2/Page+Objects&quot;&gt;Page Objects&lt;/a&gt; pattern which enables you to abstract the complexity to reusable pieces.&lt;/p&gt;
      &lt;p&gt;In Graphene, you can define so called &lt;a href=&quot;https://docs.jboss.org/author/display/ARQGRA2/Page+Fragments&quot;&gt;Page Fragments&lt;/a&gt;, which will allow you to abstract small pieces of pages which are used repeatedly and reuse them through your projects.&lt;/p&gt;
      &lt;p&gt;In the world of &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt;, those pieces can be &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; components:&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;@FindBy(id = &quot;form:birthDate&quot;)
      RichfacesCalendar birthDate;&lt;/code&gt;
      
      &lt;code class=&quot;prettify&quot;&gt;@Test
      public void test() {
          birthDate.setDate(xyz);
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;The same way &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; abstracts UI components, you can abstract your testing logic.&lt;/p&gt;
      &lt;h2&gt;Conclusion&lt;/h2&gt;
      &lt;p&gt;Arquillian opens you to pretty new testing experiences – it makes writing tests as easy as unit testing, while keeping the tests real, concise and fun to write.&lt;/p&gt;
      &lt;h2&gt;Next Time&lt;/h2&gt;
      &lt;p&gt;This is the first part of blog series which will allow you to look under the hood of how we designed tests for RichFaces based applications (and how we actually test RichFaces itself).&lt;/p&gt;
      &lt;p&gt;In the next parts, I will focus on how to:&lt;/p&gt;
      &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;../../2013/06/testing-jsf-richfaces-arquillian-2-rapid-test-development.html&quot;&gt;develop integration tests fast and effectively&lt;/a&gt;&lt;/li&gt;
      	&lt;li&gt;&lt;a href=&quot;../../2013/06/testing-jsf-richfaces-arquillian-3-mastering-debugger.html&quot;&gt;how to master debugging tools&lt;/a&gt;&lt;/li&gt;
      	&lt;li&gt;&lt;a href=&quot;../../2013/06/testing-jsf-richfaces-arquillian-4-continous-integration.html&quot;&gt;run integration tests in continuous integration&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;That’s it for now! See you next time…&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2013/01/richfaces-placeholder-in-richfaces-4-3.html</id>
    <title>New in RichFaces 4.3: Placeholder</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2013-01-28T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2013/01/richfaces-placeholder-in-richfaces-4-3.html" rel="alternate" type="text/html" />
    <category term="richfaces"></category>
    <category term="richfaces-component"></category>
    <summary>
      In RichFaces 4.3 we build upon a great work from Bernard Labno who prototyped the &lt;rich:placeholder /&gt; component and shared it in the RichFaces Sandbox.
      This component gives you an ability similar to the HTML5&#8217;s placeholder &#8211; it pre-fills form inputs with text, which serves as a hint for users of what data is a particular input expects. Once you edit the input, the placeholder text will disappear.
      You can try it out on the HTML 5 sample bellow:
      
      So why do you need this new component?
      The HTML 5 placeholder attribute doesn&#8217;t work in older browsers, so to ensure backward compatibility, you would...
    </summary>
    <content type="html">
      &lt;p&gt;In RichFaces 4.3 we build upon a great work from &lt;a href=&quot;https://plus.google.com/112932410824491900575/posts&quot;&gt;Bernard Labno&lt;/a&gt; who prototyped the &lt;code&gt;&amp;lt;rich:placeholder /&amp;gt;&lt;/code&gt; component and shared it in the &lt;a href=&quot;https://github.com/richfaces/sandbox&quot;&gt;RichFaces Sandbox&lt;/a&gt;.&lt;/p&gt;
      &lt;p&gt;This component gives you an ability similar to the HTML5’s placeholder – it pre-fills form inputs with text, which serves as a hint for users of what data is a particular input expects. Once you edit the input, the placeholder text will disappear.&lt;/p&gt;
      &lt;p&gt;You can try it out on the &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; 5 sample bellow:&lt;/p&gt;
      &lt;input type=&quot;text&quot; placeholder=&quot;Placeholder text&quot;&gt;&lt;h5&gt;So why do you need this new component?&lt;/h5&gt;
      &lt;p&gt;The &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; 5 placeholder attribute doesn’t work in older browsers, so to ensure backward compatibility, you would need to use a JavaScript plugin like the one we have used: &lt;code&gt;$.watermark&lt;/code&gt;.&lt;/p&gt;
      &lt;p&gt;With RichFaces, you can leverage that as simply as:&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;h:inputText value=&quot;...&quot;&amp;gt;
          &amp;lt;rich:placeholder value=&quot;Type text here...&quot; /&amp;gt;
      &amp;lt;/h:inputText&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;h5&gt;Example&lt;/h5&gt;
      &lt;p&gt;&lt;a href=&quot;http://showcase.richfaces.org/richfaces/component-sample.jsf?demo=placeholder&amp;amp;skin=blueSky&quot;&gt;&lt;img src=&quot;../../../images/blog/2013-01-17-richfaces-placeholder-in-richfaces-4-3/placeholder.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;h3&gt;Additional features&lt;/h3&gt;
      &lt;h4&gt;Placeholder styling&lt;/h4&gt;
      &lt;p&gt;You can style the placeholder text by using the &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;.rf-plhdr {
       color: #eee
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;or for each component specifically with &lt;code&gt;styleClass&lt;/code&gt;:&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;rich:placeholder styleClass=&quot;my-special-placeholder&quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;h4&gt;Apply placeholder to multiple components&lt;/h4&gt;
      &lt;p&gt;In order to apply placeholder to multiple components, you need to use &lt;code&gt;@selector&lt;/code&gt; attribute:&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;h:inputText styleClass =&quot;my-placeholder&quot; /&amp;gt;
      &amp;lt;h:inputText styleClass =&quot;my-placeholder&quot; /&amp;gt;
      &amp;lt;rich:placeholder selector=&quot;.my-placeholder&quot; text=&quot;Fill in...&quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;h4&gt;Support for a wide-range of components&lt;/h4&gt;
      &lt;p&gt;We also make sure that &lt;code&gt;&amp;lt;rich:placeholder /&amp;gt;&lt;/code&gt; works with all RichFaces input components, so you don’t need to cope with incompatibilities.&lt;/p&gt;
      &lt;h4&gt;Give it a try&lt;/h4&gt;
      &lt;p&gt;You can try this component in a &lt;a href=&quot;http://showcase.richfaces.org/richfaces/component-sample.jsf?demo=placeholder&amp;amp;skin=blueSky&quot;&gt;RichFaces Showcase sample&lt;/a&gt;.&lt;/p&gt;
      &lt;p&gt;You can also read more about it in the RichFaces &lt;a href=&quot;http://docs.jboss.org/richfaces/4.3.X/4.3.0.CR1/Component_Reference/en-US/html/chap-Component_Reference-Functionality_extension.html#sect-Component_Reference-Functionality_extension-richplaceholder&quot;&gt;Component Reference&lt;/a&gt; and &lt;a href=&quot;http://docs.jboss.org/richfaces/4.3.X/4.3.0.CR1/vdldoc/rich/placeholder.html&quot;&gt;&lt;span class=&quot;caps&quot;&gt;VDL&lt;/span&gt; documentation&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2013/01/richfaces-focus-in-richfaces-4-3.html</id>
    <title>New in RichFaces 4.3: Focus</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2013-01-24T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2013/01/richfaces-focus-in-richfaces-4-3.html" rel="alternate" type="text/html" />
    <category term="richfaces"></category>
    <category term="richfaces-component"></category>
    <summary>
      The &lt;rich:focus /&gt; component allows you to focus on a form input once the user requests the JSF page update (either via a full-page load or an AJAX partial update). The &lt;rich:focus /&gt; component will make sure that the focused component is the best choice for the user based on following criteria:
      
      	validation results
      	tabindex settings
      	position in the page
      	which component was selected prior to the request
      
      Contributed by Community
      The &lt;rich:focus /&gt; is another sample of a RichFaces Community contribution &#8211; the component was initially proposed and implemented by Bernard Labno and he contributed it to the RichFaces Sandbox. Now you can use its...
    </summary>
    <content type="html">
      &lt;p&gt;The &lt;code&gt;&amp;lt;rich:focus /&amp;gt;&lt;/code&gt; component allows you to focus on a form input once the user requests the &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; page update (either via a full-page load or an &lt;span class=&quot;caps&quot;&gt;AJAX&lt;/span&gt; partial update). The &lt;code&gt;&amp;lt;rich:focus /&amp;gt;&lt;/code&gt; component will make sure that the focused component is the best choice for the user based on following criteria:&lt;/p&gt;
      &lt;ul&gt;
      &lt;li&gt;validation results&lt;/li&gt;
      	&lt;li&gt;
      &lt;code&gt;tabindex&lt;/code&gt; settings&lt;/li&gt;
      	&lt;li&gt;position in the page&lt;/li&gt;
      	&lt;li&gt;which component was selected prior to the request&lt;/li&gt;
      &lt;/ul&gt;&lt;h5&gt;Contributed by Community&lt;/h5&gt;
      &lt;p&gt;The &lt;code&gt;&amp;lt;rich:focus /&amp;gt;&lt;/code&gt; is another sample of a RichFaces Community contribution – the component was &lt;a href=&quot;https://community.jboss.org/thread/147735&quot;&gt;initially proposed&lt;/a&gt; and implemented by &lt;a href=&quot;https://github.com/blabno&quot;&gt;Bernard Labno&lt;/a&gt; and he contributed it to the &lt;a href=&quot;https://github.com/richfaces/sandbox&quot;&gt;RichFaces Sandbox&lt;/a&gt;. Now you can use its improved version in the core component suite with all of the advantages which that bears: stability and patches from the RichFaces team.&lt;/p&gt;
      &lt;p&gt;The component has several use cases, so let’s go through them one by one:&lt;/p&gt;
      &lt;h3&gt;Default Behavior&lt;/h3&gt;
      &lt;h4&gt;Focus on Render&lt;/h4&gt;
      &lt;p&gt;The default behavior is that the chosen component is focused each time an initial request or a postback is finished.&lt;/p&gt;
      &lt;h4&gt;Validation Awareness&lt;/h4&gt;
      &lt;p&gt;The &lt;code&gt;&amp;lt;rich:focus /&amp;gt;&lt;/code&gt; component chooses the right input based on validation results. The input component which has failed validation will be focused first.&lt;/p&gt;
      &lt;p&gt;The use case is illustrated on following example:&lt;/p&gt;
      &lt;h5&gt;Example of Validation-Aware Focusing&lt;/h5&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;h:form&amp;gt;
          &amp;lt;rich:focus /&amp;gt;&lt;/code&gt;
      
      &lt;code class=&quot;prettify&quot;&gt;    &amp;lt;h:panelGrid columns=&quot;1&quot;&amp;gt;
              &amp;lt;h:inputText label=&quot;Name&quot; id=&quot;name&quot; value=&quot;#{userBean.name}&quot;&amp;gt;
                  &amp;lt;f:validateRequired /&amp;gt;
                  &amp;lt;f:validateLength minimum=&quot;3&quot; /&amp;gt;
              &amp;lt;/h:inputText&amp;gt;&lt;/code&gt;
      
      &lt;code class=&quot;prettify&quot;&gt;        &amp;lt;h:inputText label=&quot;Job&quot; id=&quot;job&quot; value=&quot;#{userBean.job}&quot;&amp;gt;
                  &amp;lt;f:validateRequired /&amp;gt;
                  &amp;lt;f:validateLength minimum=&quot;3&quot; maximum=&quot;50&quot; /&amp;gt;
              &amp;lt;/h:inputText&amp;gt;
              ...
          &amp;lt;/h:panelGrid&amp;gt;&lt;/code&gt;
           
      &lt;code class=&quot;prettify&quot;&gt;    &amp;lt;a4j:commandButton value=&quot;Ajax Validate&quot; /&amp;gt;
      &amp;lt;/h:form&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;&lt;img src=&quot;../../../images/blog/2013-01-17-richfaces-focus-in-richfaces-4-3/validation-aware.png&quot;&gt;&lt;/p&gt;
      &lt;p&gt;You can see a working sample with full source-code in &lt;a href=&quot;http://showcase.richfaces.org/richfaces/component-sample.jsf?demo=focus&amp;amp;sample=focus&amp;amp;skin=blueSky&quot;&gt;this basic focus demo&lt;/a&gt;.&lt;/p&gt;
      &lt;h4&gt;Position in the Page&lt;/h4&gt;
      &lt;p&gt;When all components are valid, the first input on the page will be focused after the initial request.&lt;/p&gt;
      &lt;p&gt;When updating the page after postback, the first input in the submitted form will be focused.&lt;/p&gt;
      &lt;div class=&quot;alert alert-info&quot;&gt;
      &lt;strong&gt;Note:&lt;/strong&gt; The position in the page is given by placement in the &lt;span class=&quot;caps&quot;&gt;DOM&lt;/span&gt;.&lt;/div&gt;
      &lt;h4&gt;Tabindex&lt;/h4&gt;
      &lt;p&gt;The focusing priority given by the placement in the &lt;span class=&quot;caps&quot;&gt;DOM&lt;/span&gt; can be overridden by setting a component’s &lt;code&gt;tabindex&lt;/code&gt; attribute with a value greater than 0.&lt;/p&gt;
      &lt;h3&gt;Keeping Focus on Focused Component&lt;/h3&gt;
      &lt;p&gt;Another use case of the focus component is keeping one component focused during requests.&lt;/p&gt;
      &lt;p&gt;No matter whether you do a full-page update or an &lt;span class=&quot;caps&quot;&gt;AJAX&lt;/span&gt; request, the &lt;span class=&quot;caps&quot;&gt;DOM&lt;/span&gt; which contains the focused component might be replaced. In this case, the focus will be lost.&lt;/p&gt;
      &lt;h5&gt;Example&lt;/h5&gt;
      &lt;p&gt;When you have full-text search input, the user should be allowed to correct his input if his previous search failed.&lt;/p&gt;
      &lt;p&gt;In such cases, the user shouldn’t be forced to focus the input box himself. You can focus the input for him:&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;h:form&amp;gt;
      	&amp;lt;rich:focus preserve=&quot;true&quot; /&amp;gt;&lt;/code&gt;
      
      &lt;code class=&quot;prettify&quot;&gt;	&amp;lt;h:inputText id=&quot;query&quot; value=&quot;#{query}&quot; /&amp;gt;
      	&amp;lt;h:commandButton value=&quot;Search&quot; /&amp;gt;
      	&amp;lt;rich:list id=&quot;searchResults&quot;&amp;gt;
      &amp;lt;/h:form&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;You can see a &lt;a href=&quot;http://showcase.richfaces.org/richfaces/component-sample.jsf?demo=focus&amp;amp;sample=focusPreserve&amp;amp;skin=blueSky&quot;&gt;sample for this use case in RichFaces Showcase&lt;/a&gt;.&lt;/p&gt;
      &lt;h3&gt;Delayed Focus&lt;/h3&gt;
      &lt;p&gt;Sometimes it is too early to focus on a component after the &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; request.&lt;/p&gt;
      &lt;p&gt;For example the component isn’t displayed yet, thus it can’t be focused. The sample shows usage of the focus feature in a popup panel.&lt;/p&gt;
      &lt;p&gt;In this case, you can give the &lt;code&gt;&amp;lt;rich:focus /&amp;gt;&lt;/code&gt; an ID and call its &lt;code&gt;applyFocus()&lt;/code&gt; JavaScript method:&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;rich:popupPanel onshow=&quot;#{rich:component('focus')}.applyFocus();&quot;&amp;gt;
      	&amp;lt;rich:focus id=&quot;focus&quot; /&amp;gt;
      &amp;lt;/rich:popupPanel&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;Be sure to check out the sample: &lt;a href=&quot;http://showcase.richfaces.org/richfaces/component-sample.jsf?demo=focus&amp;amp;sample=focusDelayed&amp;amp;skin=blueSky&quot;&gt;delaying the popup panel’s form focus&lt;/a&gt;.&lt;/p&gt;
      &lt;h3&gt;Server-side Focus Management&lt;/h3&gt;
      &lt;p&gt;When all of the methods illustrated above do not fit your needs, then you have a last option: you can leverage the &lt;code&gt;FocusManager&lt;/code&gt; &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;.&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;FocusManager focusManager = ServiceTracker.getService(FocusManager.class);
      focusManager.focus(&quot;inputComponentId&quot;);&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;The &lt;code&gt;FocusManager&lt;/code&gt; will enforce the focus of the given component and this enforcement will take priority over any other &lt;code&gt;&amp;lt;rich:focus /&amp;gt;&lt;/code&gt; usage.&lt;/p&gt;
      &lt;p&gt;The sample: &lt;a href=&quot;http://showcase.richfaces.org/richfaces/component-sample.jsf?demo=focus&amp;amp;sample=focusManager&amp;amp;skin=blueSky&quot;&gt;enforcing a focus can be found here&lt;/a&gt;.&lt;/p&gt;
      &lt;hr&gt;&lt;p&gt;Don’t forget to check out the &lt;a href=&quot;http://docs.jboss.org/richfaces/4.3.X/4.3.0.CR1/Component_Reference/en-US/html/chap-Component_Reference-Functionality_extension.html#sect-Component_Reference-Functionality_extension-richfocus&quot;&gt;component reference&lt;/a&gt; and &lt;a href=&quot;http://docs.jboss.org/richfaces/4.3.X/4.3.0.CR1/vdldoc/rich/focus.html&quot;&gt;&lt;span class=&quot;caps&quot;&gt;VDL&lt;/span&gt; documentation&lt;/a&gt; for &lt;code&gt;&amp;lt;rich:focus /&amp;gt;&lt;/code&gt;.&lt;/p&gt;
      &lt;p&gt;I hope you will enjoy this component and that it will cover all of your use cases!&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2013/01/arquillian-graphene-2.html</id>
    <title>Graphene 2.0.0.Alpha3 Released</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2013-01-15T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2013/01/arquillian-graphene-2.html" rel="alternate" type="text/html" />
    <category term="arquillian"></category>
    <category term="graphene"></category>
    <summary>
      Highlighted Features
      
      	 jQuery Selectors
      	Graphene gets its own @FindBy annotation and ByJQuery selector in order to fully support jQuery selectors. (read more)
      
      
      	 Injecting Selenium Resources
      	The interesting Selenium APIs (HTML5, Mobile, etc.) can be injected to the test or page fragments directly. (read more)
      
      
      	 Fluent API for Waiting
      	Waiting conditions can now be defined in a nice fluent API. (read more)
      
      
      	 Injecting List of Page Fragments
      	It&#8217;s possible to inject a list of page fragments with @FindBy List&lt;PageFragment&gt;.
      
      
      	 Page Fragment Enrichment
      	Any Arquillian resource available through @ArquillianResource can be injected into page fragments.
      
      Important Bug Fixes
      
      	 XHR Request Guards
      	guardXhr wasn&#8217;t waiting for the XHR request to...
    </summary>
    <content type="html">
      &lt;h3&gt;Highlighted Features&lt;/h3&gt;
      &lt;dl&gt;
      &lt;dt&gt;
      &lt;i class=&quot;icon-star&quot;&gt;&lt;/i&gt; jQuery Selectors&lt;/dt&gt;
      	&lt;dd&gt;&lt;p&gt;Graphene gets its own &lt;code&gt;@FindBy&lt;/code&gt; annotation and &lt;code&gt;ByJQuery&lt;/code&gt; selector in order to fully support &lt;em&gt;jQuery&lt;/em&gt; selectors. (&lt;a href=&quot;#jquery-selectors&quot;&gt;read more&lt;/a&gt;)&lt;/p&gt;&lt;/dd&gt;
      &lt;/dl&gt;&lt;dl&gt;
      &lt;dt&gt;
      &lt;i class=&quot;icon-star&quot;&gt;&lt;/i&gt; Injecting Selenium Resources&lt;/dt&gt;
      	&lt;dd&gt;&lt;p&gt;The interesting Selenium APIs (HTML5, Mobile, etc.) can be injected to the test or page fragments directly. (&lt;a href=&quot;#injecting-selenium-resources&quot;&gt;read more&lt;/a&gt;)&lt;/p&gt;&lt;/dd&gt;
      &lt;/dl&gt;&lt;dl&gt;
      &lt;dt&gt;
      &lt;i class=&quot;icon-star&quot;&gt;&lt;/i&gt; Fluent &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; for Waiting&lt;/dt&gt;
      	&lt;dd&gt;&lt;p&gt;Waiting conditions can now be defined in a nice fluent &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;. (&lt;a href=&quot;#waiting-fluent-api&quot;&gt;read more&lt;/a&gt;)&lt;/p&gt;&lt;/dd&gt;
      &lt;/dl&gt;&lt;dl&gt;
      &lt;dt&gt;
      &lt;i class=&quot;icon-star&quot;&gt;&lt;/i&gt; Injecting List of Page Fragments&lt;/dt&gt;
      	&lt;dd&gt;&lt;p&gt;It’s possible to inject a list of page fragments with &lt;code&gt;@FindBy List&amp;lt;PageFragment&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/dd&gt;
      &lt;/dl&gt;&lt;dl&gt;
      &lt;dt&gt;
      &lt;i class=&quot;icon-star&quot;&gt;&lt;/i&gt; Page Fragment Enrichment&lt;/dt&gt;
      	&lt;dd&gt;&lt;p&gt;Any Arquillian resource available through &lt;code&gt;@ArquillianResource&lt;/code&gt; can be injected into page fragments.&lt;/p&gt;&lt;/dd&gt;
      &lt;/dl&gt;&lt;h3&gt;Important Bug Fixes&lt;/h3&gt;
      &lt;dl&gt;
      &lt;dt&gt;
      &lt;i class=&quot;icon-star&quot;&gt;&lt;/i&gt; &lt;span class=&quot;caps&quot;&gt;XHR&lt;/span&gt; Request Guards&lt;/dt&gt;
      	&lt;dd&gt;&lt;p&gt;&lt;code&gt;guardXhr&lt;/code&gt; wasn’t waiting for the &lt;span class=&quot;caps&quot;&gt;XHR&lt;/span&gt; request to fully complete. So we have improved it and now it not only waits for &lt;span class=&quot;caps&quot;&gt;AJAX&lt;/span&gt; callback to completely finish, but it will wait for any asynchronous processing caused by that callback to finish.&lt;/p&gt;&lt;/dd&gt;
      &lt;/dl&gt;&lt;dl&gt;
      &lt;dt&gt;
      &lt;i class=&quot;icon-star&quot;&gt;&lt;/i&gt; Protecting against Stale Elements&lt;/dt&gt;
      	&lt;dd&gt;&lt;p&gt;You are now completely protected against &lt;code&gt;StaleElementReferenceException&lt;/code&gt; when using page fragments and elements injected by &lt;code&gt;@FindBy&lt;/code&gt;, because operations on those elements are evaluated lazily (at the time of usage) and they are re-evaluated when they get stale.&lt;/p&gt;&lt;/dd&gt;
      &lt;/dl&gt;&lt;dl&gt;
      &lt;dt&gt;
      &lt;i class=&quot;icon-star&quot;&gt;&lt;/i&gt; Refined Page Fragments&lt;/dt&gt;
      	&lt;dd&gt;&lt;p&gt;Page Fragments have received a lot of bug fixes and improvements.&lt;/p&gt;&lt;/dd&gt;
      &lt;/dl&gt;&lt;h3 id=&quot;jquery-selectors&quot;&gt;jQuery Selectors&lt;/h3&gt;
      &lt;p&gt;This feature injects a &lt;tt&gt;&lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;&lt;/tt&gt; script to a tested page and allows Graphene to find elements using the &lt;a href=&quot;http://api.jquery.com/category/selectors/?rdfrom=http%3A%2F%2Fdocs.jquery.com%2Fmw%2Findex.php%3Ftitle%3DSelectors%26redirect%3Dno&quot;&gt;jQuery Selectors syntax&lt;/a&gt;:&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;@FindBy(jquery = &quot;:button:visible&quot;)
      WebElement firstVisibleButton;&lt;/code&gt;&lt;/pre&gt;
      &lt;p class=&quot;info&quot;&gt;&lt;span&gt;Note that Graphene injects jQuery in &lt;a href=&quot;http://api.jquery.com/jQuery.noConflict/&quot;&gt;non-conflict way&lt;/a&gt;, so it does not affect your tested application.&lt;/span&gt;&lt;/p&gt;
      &lt;h3 id=&quot;injecting-selenium-resources&quot;&gt;Injecting Selenium Resources&lt;/h3&gt;
      &lt;p&gt;Graphene leverages a long list of advanced Selenium features and their APIs to take full control of your browser:&lt;/p&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;strong&gt;HTML5&lt;/strong&gt;
      	&lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/html5/WebStorage.html&quot;&gt;&lt;code&gt;WebStorage&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      		&lt;li&gt;&lt;a href=&quot;http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/html5/DatabaseStorage.html&quot;&gt;&lt;code&gt;DatabaseStorage&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      		&lt;li&gt;&lt;a href=&quot;http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/html5/ApplicationCache.html&quot;&gt;&lt;code&gt;ApplicationCache&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      	&lt;/ul&gt;
      &lt;/li&gt;
      	&lt;li&gt;
      &lt;strong&gt;Mobile-specific&lt;/strong&gt;
      	&lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/TouchScreen.html&quot;&gt;&lt;code&gt;TouchScreen&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      		&lt;li&gt;&lt;a href=&quot;http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/Rotatable.html&quot;&gt;&lt;code&gt;Rotatable&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      		&lt;li&gt;&lt;a href=&quot;http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/html5/BrowserConnection.html&quot;&gt;&lt;code&gt;BrowserConnection&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      		&lt;li&gt;&lt;a href=&quot;http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/html5/LocationContext.html&quot;&gt;&lt;code&gt;LocationContext&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      	&lt;/ul&gt;
      &lt;/li&gt;
      	&lt;li&gt;
      &lt;strong&gt;Advanced Browser Control&lt;/strong&gt;
      	&lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/interactions/Actions.html&quot;&gt;&lt;code&gt;Actions&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      		&lt;li&gt;&lt;a href=&quot;http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/Keyboard.html&quot;&gt;&lt;code&gt;Keyboard&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      		&lt;li&gt;&lt;a href=&quot;http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/Mouse.html&quot;&gt;&lt;code&gt;Mouse&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      		&lt;li&gt;&lt;a href=&quot;http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/JavascriptExecutor.html&quot;&gt;&lt;code&gt;JavascriptExecutor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      		&lt;li&gt;&lt;a href=&quot;http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/TakesScreenshot.html&quot;&gt;&lt;code&gt;TakesScreenshot&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      		&lt;li&gt;&lt;a href=&quot;http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/Capabilities.html&quot;&gt;&lt;code&gt;Capabilities&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      	&lt;/ul&gt;
      &lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;You can inject those using &lt;code&gt;@ArquillianResource&lt;/code&gt; annotation:&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;@ArquillianResource
      BrowserConnection connection;&lt;/code&gt;
      
      &lt;code class=&quot;prettify&quot;&gt;@Test
      public void test() {
          connection.setOnline(false);
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;h3 id=&quot;waiting-fluent-api&quot;&gt;Fluent &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; for Waiting&lt;/h3&gt;
      &lt;p&gt;The Alpha2 &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; allowed you to define a wait like this:&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;waitAjax().until(element(button).isVisible());&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;In order to fully support code-completion, we have decided to deprecate this &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; in favor of a fluent &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;:&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;waitAjax().until().element(button).is().visible();&lt;/code&gt;&lt;/pre&gt;
      &lt;h3&gt;Roadmap&lt;/h3&gt;
      &lt;p&gt;This release is a significant milestone &lt;a href=&quot;https://community.jboss.org/message/777443#777443&quot;&gt;on the way to Beta1&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2013/01/arquillian-extension-warp-1.html</id>
    <title>Warp 1.0.0.Alpha2 Released</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2013-01-15T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2013/01/arquillian-extension-warp-1.html" rel="alternate" type="text/html" />
    <category term="arquillian"></category>
    <category term="warp"></category>
    <summary>
      It has been a pretty long road from Alpha1 to this release, focused primarily on polishing the user experience.
      So without any further ado, let’s look at the new shiny features!
      Highlighted Features
      
      	 Renaming Warp API methods
      	The API methods were renamed according to the results of our public survey. (read more)
      
      In the simplest scenario you want to inspect the first request after performing a given client activity. For this purpose, you can use a basic Warp API known from Alpha1:
      Warp
          .initiate(Activity)
          .inspect(Inspection);
      This will intercept the first request coming from the client and ignore the rest of...
    </summary>
    <content type="html">
      &lt;p&gt;It has been a pretty long road from Alpha1 to this release, focused primarily on polishing the user experience.&lt;/p&gt;
      &lt;p&gt;So without any further ado, let’s look at the new shiny features!&lt;/p&gt;
      &lt;h3&gt;Highlighted Features&lt;/h3&gt;
      &lt;dl&gt;
      &lt;dt&gt;
      &lt;i class=&quot;icon-star&quot;&gt;&lt;/i&gt; Renaming Warp &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; methods&lt;/dt&gt;
      	&lt;dd&gt;&lt;p&gt;The &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; methods were renamed according to the results of our public survey. (&lt;a href=&quot;#renaming-warp-api&quot;&gt;read more&lt;/a&gt;)&lt;/p&gt;&lt;/dd&gt;
      &lt;/dl&gt;&lt;p&gt;In the simplest scenario you want to inspect the first request after performing a given client activity. For this purpose, you can use a basic Warp &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; known from Alpha1:&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;Warp
          .initiate(Activity)
          .inspect(Inspection);&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;This will intercept the first request coming from the client and ignore the rest of the potential requests.&lt;/p&gt;
      &lt;p&gt;Additionally, Warp will ignore requests for &lt;tt&gt;favicon.ico&lt;/tt&gt; which could fail your test unexpectadly.&lt;/p&gt;
      &lt;p&gt;You can find more samples for this &lt;a href=&quot;https://github.com/arquillian/arquillian-extension-warp/blob/1.0.0.Alpha2/api/src/test/java/org/jboss/arquillian/warp/TestExecutionAPI.java#L62&quot;&gt;&lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; in a source&lt;/a&gt; .&lt;/p&gt;
      &lt;dl&gt;
      &lt;dt&gt;
      &lt;i class=&quot;icon-star&quot;&gt;&lt;/i&gt; Anonymous and Inner Classes&lt;/dt&gt;
      	&lt;dd&gt;&lt;p&gt;It’s now much easier to define a verification code, which is also more readable.&lt;/p&gt;&lt;/dd&gt;
      &lt;/dl&gt;&lt;p&gt;In &lt;em&gt;Alpha1&lt;/em&gt;, you had to use a &lt;em&gt;top-level&lt;/em&gt; or a &lt;em&gt;static inner classes&lt;/em&gt; to define inspections.&lt;/p&gt;
      &lt;p&gt;In &lt;em&gt;Alpha2&lt;/em&gt;, you can provide &lt;em&gt;non-static inner class&lt;/em&gt; or even &lt;em&gt;anonymous class&lt;/em&gt;.&lt;/p&gt;
      &lt;div class=&quot;filename&quot;&gt;HelloWarp.java&lt;/div&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;Warp
          // first you need to initiate activity which triggers HTTP request
          .initiate(new Activity() {
              public void perform() {
                  ajaxButton.click();
              }
          })&lt;/code&gt;
      
      &lt;code class=&quot;prettify&quot;&gt;    // and then specify what behavior should be inspected on the server
          .inspect(new Inspection() {&lt;/code&gt;
      
      &lt;code class=&quot;prettify&quot;&gt;        // don't forget to specify serialVerionUID to allow serialization
              private static final long serialVersionUID = 1L;&lt;/code&gt;
              
      &lt;code class=&quot;prettify&quot;&gt;        // bring JSF context via dependency injection
              @ArquillianResource
              FacesContext facesContext;&lt;/code&gt;
      
      &lt;code class=&quot;prettify&quot;&gt;        // verify expected behavior in given request phase
              @AfterPhase(RESTORE_VIEW)
              public void beforeServlet() {
                  assertTrue(facesContext.isPostback());
              }
          });&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;This example showed how to use the new &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; together with anonymous inspections&lt;/p&gt;
      &lt;dl&gt;
      &lt;dt&gt;
      &lt;i class=&quot;icon-star&quot;&gt;&lt;/i&gt; Multiple Requests / Request Groups&lt;/dt&gt;
      	&lt;dd&gt;&lt;p&gt;It is possible to intercept several requests during one Warp execution.&lt;/p&gt;&lt;/dd&gt;
      &lt;/dl&gt;&lt;p&gt;Warp allows you to verify more than one request triggered by a single client activity. This allows you to verify e.g. a request for &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; page and all its resources (JS, &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;, images) separately. This feature is called &lt;em&gt;Request Groups&lt;/em&gt;.&lt;/p&gt;
      &lt;div class=&quot;filename&quot;&gt;TestRequestGroups.java&lt;/div&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;// Request Group execution will return WarpResult
      WarpResult result = Warp
          .initiate(Activity)
          // a group specification without name - the name will be generated
          .group()
              .observe(HttpRequestFilter)
              .inspect(Inspection1)
          // a named group specification - the result can be easily accessed
          .group(&quot;second&quot;)
              .observe(HttpRequestFilter)
              .inspect(Inspection2)
          // you need to execute whole Request Group once it is completely specified
          .execute();&lt;/code&gt;
          
      &lt;code class=&quot;prettify&quot;&gt;    // you can access details of finished execution
          result.getGroup(&quot;second&quot;).getInspection();&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;The &lt;em&gt;Request Groups&lt;/em&gt; execution returns a &lt;code&gt;WarpResult&lt;/code&gt; which contains details about the finished execution. In order to access the results related to a specific group, you can give the group a name&lt;/p&gt;
      &lt;dl&gt;
      &lt;dt&gt;
      &lt;i class=&quot;icon-star&quot;&gt;&lt;/i&gt; Request Observers &amp;amp; Fluent &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;
      &lt;/dt&gt;
      	&lt;dd&gt;&lt;p&gt;The new &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; for observing the correct request allows you to select which request should be verified on a server.&lt;/p&gt;&lt;/dd&gt;
      &lt;/dl&gt;&lt;p&gt;When using &lt;em&gt;Request Groups&lt;/em&gt;, all of the requests will be inspected by the inspections defined in that group. There might be one or more requests verified by each group.&lt;/p&gt;
      &lt;p&gt;Since multiple request can be triggered, you might want to choose the correct request to observe. For this purpose, we have the &lt;code&gt;HttpRequestFilter&lt;/code&gt; interface, where you specify which &lt;code&gt;HttpRequest&lt;/code&gt; should matches the current group.&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;import static org.jboss.arquillian.warp.client.filter.http.HttpFilters.request;&lt;/code&gt;
      
      &lt;code class=&quot;prettify&quot;&gt;// will accept only requests for HTML
      ...group()
          .observe(request().uri().contains(&quot;.html&quot;))&lt;/code&gt;
      
      &lt;code class=&quot;prettify&quot;&gt;// will accept only REST requests for JSON
      ...group()
          .observe(request().header().containsValue(&quot;Accept&quot;, &quot;application/json&quot;))&lt;/code&gt;
      
      &lt;code class=&quot;prettify&quot;&gt;// will accept only POST requests
      ...group()
         .observe(request().method().equal(POST))&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;In order to simplify writing the Warp specifications, you can define the observer using a fluent &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; and static factory methods.&lt;/p&gt;
      &lt;dl&gt;
      &lt;dt&gt;
      &lt;i class=&quot;icon-star&quot;&gt;&lt;/i&gt; Dependency Injection for Servlets and &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt;
      &lt;/dt&gt;
      	&lt;dd&gt;&lt;p&gt;Test enrichers now allow the the injection of Servlet and &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; resources. (&lt;a href=&quot;#servlet-jsf-enrichments&quot;&gt;read more&lt;/a&gt;)&lt;/p&gt;&lt;/dd&gt;
      &lt;/dl&gt;&lt;dl&gt;
      &lt;dt&gt;
      &lt;i class=&quot;icon-star&quot;&gt;&lt;/i&gt; Renaming Phaser to Warp &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt;
      &lt;/dt&gt;
      	&lt;dd&gt;&lt;p&gt;The &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; specific extension was renamed from Phaser to Warp &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt;. (&lt;a href=&quot;#renaming-phaser-to-warp-jsf&quot;&gt;read more&lt;/a&gt;)&lt;/p&gt;&lt;/dd&gt;
      &lt;/dl&gt;&lt;dl&gt;
      &lt;dt&gt;
      &lt;i class=&quot;icon-star&quot;&gt;&lt;/i&gt; Introduction of Dependency Chain&lt;/dt&gt;
      	&lt;dd&gt;&lt;p&gt;The dependency chain was introduced to bring in all necessary dependencies by specifying just one dependency. (&lt;a href=&quot;#warp-dependency-chain&quot;&gt;read more&lt;/a&gt;)&lt;/p&gt;&lt;/dd&gt;
      &lt;/dl&gt;&lt;dl&gt;
      &lt;dt&gt;
      &lt;i class=&quot;icon-star&quot;&gt;&lt;/i&gt; Warp Extensions for &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt; and Spring &lt;span class=&quot;caps&quot;&gt;MVC&lt;/span&gt;
      &lt;/dt&gt;
      	&lt;dd&gt;&lt;p&gt;Thanks to &lt;a href=&quot;http://localhost:4242/community/contributors/&quot;&gt;Jakub Narloch&lt;/a&gt;, we have two new additions to Arquillian Galaxy. (&lt;a href=&quot;#warp-extensions-rest-spring&quot;&gt;read more&lt;/a&gt;)&lt;/p&gt;&lt;/dd&gt;
      &lt;/dl&gt;&lt;h3&gt;Under the Hood&lt;/h3&gt;
      &lt;dl&gt;
      &lt;dt&gt;
      &lt;i class=&quot;icon-star&quot;&gt;&lt;/i&gt; Usability and Debugging Improvements&lt;/dt&gt;
      	&lt;dd&gt;&lt;p&gt;A focus of Alpha2 was to polishing the way Warp behave in case of failures and on debuggability of Warp execution.&lt;/p&gt;&lt;/dd&gt;
      &lt;/dl&gt;&lt;dl&gt;
      &lt;dt&gt;
      &lt;i class=&quot;icon-star&quot;&gt;&lt;/i&gt; Validation of Warp Specification&lt;/dt&gt;
      	&lt;dd&gt;&lt;p&gt;Warp now validates that the number of observed requests match a number of expected requests. It also makes sure that all of defined lifecycle callbacks are executed on the server, to avoid any false positives.&lt;/p&gt;&lt;/dd&gt;
      &lt;/dl&gt;&lt;p&gt;As you can see there are many of new features, so let’s look at them separately:&lt;/p&gt;
      &lt;h3 id=&quot;renaming-warp-api&quot;&gt;Renaming Warp &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;
      &lt;/h3&gt;
      &lt;p&gt;After Alpha1 we &lt;a href=&quot;https://community.jboss.org/message/777404#777404&quot;&gt;got several requests&lt;/a&gt; for clarifying the Warp high-level &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;:&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;Warp.execute(ClientAction).verify(ServerAssertion)&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;The &lt;a href=&quot;https://docs.google.com/spreadsheet/viewform?formkey=dFlZeGI3ZklOUVlDX2M2V2owUkFmYVE6MQ&quot;&gt;announced survey&lt;/a&gt; helped us choose the new &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;. As a result, &lt;a href=&quot;https://issues.jboss.org/secure/attachment/12358992/warp-api-method-naming-survey-responses.pdf&quot;&gt;88% of participants reported&lt;/a&gt; they found this new &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; more natural:&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;Warp.initiate(Activity).inspect(Inspection)&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;Big thanks to everyone who participated in the survey! This type of collaboration makes me really proud to be part of the team.&lt;/p&gt;
      &lt;h3 id=&quot;warp-extensions-rest-spring&quot;&gt;Warp Extensions: &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt; and Spring &lt;span class=&quot;caps&quot;&gt;MVC&lt;/span&gt;
      &lt;/h3&gt;
      &lt;p&gt;Warp was from the beginning built as a project that focused on any framework/technology that is based on top of the Servlet &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;.&lt;/p&gt;
      &lt;p&gt;Thus it’s not surprising that there are already two extensions shaping out thanks to &lt;a href=&quot;http://localhost:4242/community/contributors/&quot;&gt;Jakub Narloch&lt;/a&gt;:&lt;/p&gt;
      &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://localhost:4242/blog/2012/07/24/arquillian-extension-spring-1-0-0-Alpha2/&quot;&gt;Spring &lt;span class=&quot;caps&quot;&gt;MVC&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
      	&lt;li&gt;&lt;a href=&quot;https://github.com/jmnarloch/arquillian-extension-warp-rest&quot;&gt;&lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;&lt;h3 id=&quot;warp-dependency-chain&quot;&gt;Introduction of Dependency Chain&lt;/h3&gt;
      &lt;p&gt;Putting Warp to work in your Maven project is now as easy as defining a single dependency:&lt;/p&gt;
      &lt;div class=&quot;filename&quot;&gt;pom.xml&lt;/div&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;org.jboss.arquillian.extension&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;arquillian-warp&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;1.0.0.Alpha2&amp;lt;/version&amp;gt;
          &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
      &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;This declaration will bring Warp core, which supports Servlet &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; lifecycle callbacks.&lt;/p&gt;
      &lt;h3 id=&quot;renaming-phaser-to-warp-jsf&quot;&gt;Renaming Phaser to Warp &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt;
      &lt;/h3&gt;
      &lt;p&gt;Initially we had created Phaser as the next generation of the successful &lt;a href=&quot;http://www.jboss.org/jsfunit/&quot;&gt;JSFUnit&lt;/a&gt;. It occured to use that Phaser is an unfortunate name and it just makes it harded to understand the Arquillian eco-system.&lt;/p&gt;
      &lt;p&gt;That’s why we have come up with a simpler variant – so let me introduce the Warp &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; extension.&lt;/p&gt;
      &lt;p&gt;You can bring Warp &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; to your project just by adding the following declaration:&lt;/p&gt;
      &lt;div class=&quot;filename&quot;&gt;pom.xml&lt;/div&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;org.jboss.arquillian.extension&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;arquillian-warp-jsf&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;1.0.0.Alpha2&amp;lt;/version&amp;gt;
      &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;h3 id=&quot;servlet-jsf-enrichments&quot;&gt;Dependency Injection for Servlets and &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt;
      &lt;/h3&gt;
      &lt;p&gt;After the announcement of the Alpha1 release, we focused on improving Warp to come closer to the Arquillian goal: bring all necessary dependencies to the test (in our case to inspection).&lt;/p&gt;
      &lt;p&gt;Now, you can not only inject all &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; managed beans (&lt;code&gt;@Inject&lt;/code&gt;), &lt;span class=&quot;caps&quot;&gt;EJB&lt;/span&gt; beans (&lt;code&gt;@EJB&lt;/code&gt;) or container managed resources &lt;code&gt;@Resource&lt;/code&gt;, but you can also inject the following resources:&lt;/p&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;strong&gt;Servlet resources&lt;/strong&gt;
      	&lt;ul&gt;
      &lt;li&gt;
      &lt;code&gt;ServletRequest&lt;/code&gt; or &lt;code&gt;HttpServletRequest&lt;/code&gt;
      &lt;/li&gt;
      		&lt;li&gt;
      &lt;code&gt;ServletResponse&lt;/code&gt; or &lt;code&gt;HttpServletResponse&lt;/code&gt;
      &lt;/li&gt;
      	&lt;/ul&gt;
      &lt;/li&gt;
      &lt;/ul&gt;&lt;ul&gt;
      &lt;li&gt;
      &lt;strong&gt;&lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; resources&lt;/strong&gt;
      	&lt;ul&gt;
      &lt;li&gt;&lt;code&gt;FacesContext&lt;/code&gt;&lt;/li&gt;
      		&lt;li&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/li&gt;
      		&lt;li&gt;
      &lt;code&gt;ELContext&lt;/code&gt;, &lt;code&gt;ELResolver&lt;/code&gt;, &lt;code&gt;ExpressionFactory&lt;/code&gt;
      &lt;/li&gt;
      		&lt;li&gt;&lt;code&gt;ExceptionHandler&lt;/code&gt;&lt;/li&gt;
      		&lt;li&gt;&lt;code&gt;Flash&lt;/code&gt;&lt;/li&gt;
      		&lt;li&gt;&lt;code&gt;NavigationHandler&lt;/code&gt;&lt;/li&gt;
      		&lt;li&gt;&lt;code&gt;PartialViewContext&lt;/code&gt;&lt;/li&gt;
      		&lt;li&gt;&lt;code&gt;RenderKit&lt;/code&gt;&lt;/li&gt;
      		&lt;li&gt;&lt;code&gt;ResourceHandler&lt;/code&gt;&lt;/li&gt;
      		&lt;li&gt;&lt;code&gt;StateManager&lt;/code&gt;&lt;/li&gt;
      		&lt;li&gt;&lt;code&gt;UIViewRoot&lt;/code&gt;&lt;/li&gt;
      		&lt;li&gt;&lt;code&gt;ViewHandler&lt;/code&gt;&lt;/li&gt;
      	&lt;/ul&gt;
      &lt;/li&gt;
      &lt;/ul&gt;&lt;h3&gt;Migration from Alpha1&lt;/h3&gt;
      &lt;p&gt;We’ve create a little &lt;a href=&quot;https://gist.github.com/4275537&quot;&gt;bash script&lt;/a&gt; to convert the java source from Alpha1 &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; to Alpha2 that might help you with the upgrade.&lt;/p&gt;
      &lt;h3&gt;How to Learn Warp?&lt;/h3&gt;
      &lt;p&gt;The best way now is to look at functional tests for &lt;a href=&quot;https://github.com/arquillian/arquillian-extension-warp/tree/master/ftest/src/test/java/org/jboss/arquillian/warp/ftest&quot;&gt;Warp&lt;/a&gt; or &lt;a href=&quot;https://github.com/arquillian/arquillian-extension-warp/tree/master/extension/jsf-ftest/src/test/java/org/jboss/arquillian/warp/jsf/ftest&quot;&gt;Warp &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
      &lt;h3&gt;Roadmap&lt;/h3&gt;
      &lt;p&gt;The roadmap to &lt;em&gt;Beta1&lt;/em&gt; is pretty clear:&lt;/p&gt;
      &lt;ul&gt;
      &lt;li&gt;documentation and guides&lt;/li&gt;
      	&lt;li&gt;adding features known from &lt;a href=&quot;http://docs.jboss.org/seam/2.0.1.GA/reference/en/html/testing.html&quot;&gt;SeamTest&lt;/a&gt; and &lt;a href=&quot;http://www.jboss.org/jsfunit/&quot;&gt;JSFUnit&lt;/a&gt;
      &lt;/li&gt;
      	&lt;li&gt;new injections and event hooks (e.g. improved &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; integration)&lt;/li&gt;
      	&lt;li&gt;hardering and usability enhancements (here we rely on your issue reports!)&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;Along the way we will welcome &lt;strong&gt;every idea for integrating Warp with your favorite web framework&lt;/strong&gt; – so don’t be a stranger and come to us!&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2012/09/arquillian-graphene-2.html</id>
    <title>Graphene 2.0.0.Alpha2 Released</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2012-09-17T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2012/09/arquillian-graphene-2.html" rel="alternate" type="text/html" />
    <category term="arquillian"></category>
    <category term="graphene"></category>
    <summary>
      Graphene 2 is building on top of the Selenium WebDriver API and provide extensions for writing reusable, robust and AJAX-enabled tests with improved readability.
      Graphene 2 uses the ideas from Graphene 1 (based on Selenium 1 API) and applies it to the world of Selenium WebDriver.
      You can read more about the difference between Graphene 1 and Graphene 2 in the Reference Documentation
      Features
      Page Abstractions
      Page abstractions allow you to abstract page functionality using the well-known Selenium design pattern Page Objects. In Graphene you can inject page objects directly into the test case using the @Page annotation.
      But we take the Page Objects pattern one...
    </summary>
    <content type="html">
      &lt;p&gt;&lt;em&gt;Graphene 2&lt;/em&gt; is building on top of the Selenium WebDriver &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; and provide extensions for writing &lt;strong&gt;reusable&lt;/strong&gt;, &lt;strong&gt;robust&lt;/strong&gt; and &lt;strong&gt;&lt;span class=&quot;caps&quot;&gt;AJAX&lt;/span&gt;-enabled&lt;/strong&gt; tests with improved &lt;strong&gt;readability&lt;/strong&gt;.&lt;/p&gt;
      &lt;p&gt;&lt;em&gt;Graphene 2&lt;/em&gt; uses the ideas from &lt;em&gt;Graphene 1&lt;/em&gt; (based on &lt;em&gt;Selenium 1 &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;&lt;/em&gt;) and applies it to the world of &lt;a href=&quot;http://seleniumhq.org/projects/webdriver/&quot;&gt;Selenium WebDriver&lt;/a&gt;.&lt;/p&gt;
      &lt;p&gt;You can read more about the difference between Graphene 1 and Graphene 2 in the &lt;a href=&quot;https://docs.jboss.org/author/pages/viewpage.action?pageId=53118297&quot;&gt;Reference Documentation&lt;/a&gt;&lt;/p&gt;
      &lt;h3&gt;Features&lt;/h3&gt;
      &lt;h4&gt;Page Abstractions&lt;/h4&gt;
      &lt;p&gt;&lt;a href=&quot;https://docs.jboss.org/author/display/ARQGRA2/Page+Abstractions&quot;&gt;Page abstractions&lt;/a&gt; allow you to abstract page functionality using the well-known Selenium design pattern &lt;a href=&quot;http://code.google.com/p/selenium/wiki/PageObjects&quot;&gt;&lt;em&gt;Page Objects&lt;/em&gt;&lt;/a&gt;. In Graphene you can inject page objects directly into the test case using the &lt;code&gt;@Page&lt;/code&gt; annotation.&lt;/p&gt;
      &lt;p&gt;But we take the &lt;em&gt;Page Objects&lt;/em&gt; pattern one step further with the concept of &lt;a href=&quot;https://docs.jboss.org/author/display/ARQGRA2/Page+Fragments&quot;&gt;&lt;em&gt;Page Fragments&lt;/em&gt;&lt;/a&gt; . &lt;em&gt;Page Fragments&lt;/em&gt; are reusable parts within a page encapsulated into an object similar to &lt;em&gt;Page Objects&lt;/em&gt;. A good example of &lt;em&gt;Page Fragments&lt;/em&gt; are JavaScript widgets or forms.&lt;/p&gt;
      &lt;p&gt;The concept of &lt;em&gt;Page Fragments&lt;/em&gt; comes from an idea that those components share a same underlying &lt;span class=&quot;caps&quot;&gt;DOM&lt;/span&gt; structure, the only difference between all occurences of a component is a location in a &lt;span class=&quot;caps&quot;&gt;DOM&lt;/span&gt; tree where a component is rendered – this is denoted by the &lt;code&gt;@Root&lt;/code&gt; annotation. You can define this root location for each concrete occurence using a &lt;code&gt;@FindBy(locator)&lt;/code&gt; annotation.&lt;/p&gt;
      &lt;h4&gt;Fluent-&lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; for Waiting Conditions&lt;/h4&gt;
      &lt;p&gt;Graphene provides a set of widely used &lt;a href=&quot;https://docs.jboss.org/author/display/ARQGRA2/Graphene+Utility+Class&quot;&gt;conditions to avoid writing them repeatedly&lt;/a&gt;.&lt;/p&gt;
      &lt;h4&gt;Request Guards&lt;/h4&gt;
      &lt;p&gt;&lt;a href=&quot;https://docs.jboss.org/author/display/ARQGRA2/Request+Guards&quot;&gt;Request guards&lt;/a&gt; block the Selenium test execution until a network communication caused by a given action ends. Guards support blocking on &lt;em&gt;&lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt;&lt;/em&gt; and &lt;em&gt;&lt;span class=&quot;caps&quot;&gt;XHR&lt;/span&gt; (&lt;span class=&quot;caps&quot;&gt;AJAX&lt;/span&gt;)&lt;/em&gt; but can also be used to verify that no such requests were done.&lt;/p&gt;
      &lt;h4&gt;Under the Hood&lt;/h4&gt;
      &lt;p&gt;There are some low level features exposed as &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; that are used by Graphene internally. While not used regularly within a normal test, can be handy to write more robust tests:&lt;/p&gt;
      &lt;h5&gt;&lt;a href=&quot;https://docs.jboss.org/author/display/ARQGRA2/JavaScript+Interface&quot;&gt;JavaScript Interface&lt;/a&gt;&lt;/h5&gt;
      &lt;p&gt;This allows you to write a Java interface which automatically translates Java &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; invocations to JavaScript calls:&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;@JavaScript
      public interface Document {
          String getTitle();
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;h5&gt;Page Extensions&lt;/h5&gt;
      &lt;p&gt;&lt;a href=&quot;https://docs.jboss.org/author/display/ARQGRA2/Page+Extensions&quot;&gt;Page Extensions&lt;/a&gt; allow you to inject arbitrary JavaScript code in the page under the test. The javascript code might help you to test complex situations as well as bring completely new features for improving testing. Graphene internally uses &lt;em&gt;Page Extensions&lt;/em&gt; for &lt;em&gt;Request Guards&lt;/em&gt;.&lt;/p&gt;
      &lt;h5&gt;&lt;a href=&quot;https://docs.jboss.org/author/display/ARQGRA2/Graphene+Context+and+Proxy&quot;&gt;Graphene Context&lt;/a&gt;&lt;/h5&gt;
      &lt;p&gt;Graphene allows you to obtain current thread-local context of a browser session and inject it exactly where you need. No more need for driver reference propagation.&lt;/p&gt;
      &lt;h4&gt;Documentation&lt;/h4&gt;
      &lt;p&gt;Last but definitely not the least addition is &lt;a href=&quot;https://docs.jboss.org/author/display/ARQGRA2/Home&quot;&gt;the great documentation&lt;/a&gt; for all of the features above including answers for general questions like &lt;a href=&quot;https://docs.jboss.org/author/pages/viewpage.action?pageId=53118297&quot;&gt;&lt;em&gt;how Selenium 1, Graphene 1, Selenium WebDriver and Graphene 2 relates to each other&lt;/em&gt;&lt;/a&gt;, what’s the &lt;a href=&quot;https://docs.jboss.org/author/display/ARQGRA2/Using+Drone&quot;&gt;&lt;em&gt;relation between Graphene’s, Drone and Arquillian&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
      &lt;h3&gt;&lt;a href=&quot;https://docs.jboss.org/author/display/ARQGRA2/Getting+Started&quot;&gt;Getting Started&lt;/a&gt;&lt;/h3&gt;
      &lt;p&gt;It’s the same as with any other Arquillian extension: open the &lt;span class=&quot;caps&quot;&gt;IDE&lt;/span&gt;, setup the &lt;a href=&quot;https://docs.jboss.org/author/display/ARQGRA2/Framework+Integration+Options&quot;&gt;Maven dependency&lt;/a&gt; and you are ready to &lt;a href=&quot;https://docs.jboss.org/author/display/ARQGRA2/Getting+Started&quot;&gt;start testing&lt;/a&gt;!&lt;/p&gt;
      &lt;h3&gt;What’s next?&lt;/h3&gt;
      &lt;p&gt;In the upcoming releases, we would like to focus on more new features as well as migrate some features from Graphene 1 to Graphene 2:&lt;/p&gt;
      &lt;ul&gt;
      &lt;li&gt;Forge plugin for quick start&lt;/li&gt;
      	&lt;li&gt;command interceptors&lt;/li&gt;
      	&lt;li&gt;parallel browser session control&lt;/li&gt;
      	&lt;li&gt;jQuery/Sizzle locators&lt;/li&gt;
      	&lt;li&gt;
      &lt;span class=&quot;caps&quot;&gt;AJAX&lt;/span&gt;/&lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; Communication Halter&lt;/li&gt;
      	&lt;li&gt;page abstraction improvements&lt;/li&gt;
      	&lt;li&gt;closer integration with the Arquillian event system&lt;/li&gt;
      	&lt;li&gt;helpers for writing browser specific code&lt;/li&gt;
      &lt;/ul&gt;&lt;h3&gt;Call to Action&lt;/h3&gt;
      &lt;p&gt;&lt;a href=&quot;https://community.jboss.org/en/arquillian&quot;&gt;Let us know what you think&lt;/a&gt; and &lt;a href=&quot;https://issues.jboss.org/browse/ARQGRA&quot;&gt;help us shape Graphene&lt;/a&gt; to be what you want it to be.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2012/08/incremental-build-with-richfaces-cdk.html</id>
    <title>Incremental build with RichFaces CDK</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2012-08-30T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2012/08/incremental-build-with-richfaces-cdk.html" rel="alternate" type="text/html" />
    <category term="richfaces"></category>
    <category term="cdk"></category>
    <summary>
      
      To whom of us using RichFaces CDK and being unsatisfied with a build time, our day just came!
      CDK got an incremental build feature, which caches information collected during a Library compilation and store it on a hard drive.
      Once you trigger a build for a second time, the last modification time of all sources is compared to last modification time of cache file.
      When CDK recognizes that any source has changed, it will re-compile it and the collected data will be applied on Library model again, effectively rewriting old data.
      How to Configure Incremental Build
      How to configure incremental build in your CDK project?...
    </summary>
    <content type="html">
      &lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;
      &lt;p&gt;To whom of us using RichFaces &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt; and being unsatisfied with &lt;b&gt;a build time&lt;/b&gt;, our day just came!&lt;/p&gt;
      &lt;p&gt;&lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt; got an &lt;b&gt;incremental build feature&lt;/b&gt;, which caches information collected during a Library compilation and store it on a hard drive.&lt;/p&gt;
      &lt;p&gt;Once you trigger a build for a second time, the last modification time of all sources is compared to last modification time of cache file.&lt;/p&gt;
      &lt;p&gt;When &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt; recognizes that any source has changed, it will re-compile it and the collected data will be applied on Library model again, effectively rewriting old data.&lt;/p&gt;
      &lt;h2&gt;How to Configure Incremental Build&lt;/h2&gt;
      &lt;p&gt;How to configure incremental build in your &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt; project? It’s pretty simple: &lt;b&gt;you don’t need to do anything&lt;/b&gt;.&lt;/p&gt;
      &lt;p&gt;Incremental build is &lt;b&gt;turned on by default&lt;/b&gt; to make your life easier and to save your precious time.&lt;/p&gt;
      &lt;p&gt;I recommend you to configure &lt;a href=&quot;https://github.com/richfaces/richfaces-sandbox/tree/master/hot-deployment&quot;&gt;the fast &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt; turnaround using JRebel&lt;/a&gt; – together with the incremental build, nothing will beat you in the &lt;a href=&quot;http://www.bleathem.ca/blog/2011/11/richfaces-4-cdk-jqeury-ui-tabs.html&quot;&gt;rich &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; components development time&lt;/a&gt;.&lt;/p&gt;
      &lt;h2&gt;Troubleshooting&lt;/h2&gt;
      &lt;p&gt;When using incremental build at current implementation, be aware that in some cases when you do &lt;b&gt;structural changes&lt;/b&gt; (e.g. renaming methods), you may get to a point where the incrementally &lt;b&gt;generated sources will not be valid&lt;/b&gt; – sometimes it won’t make any trouble (attribute renaming), sometimes sources generated by &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt; might not be even compilable at all.&lt;/p&gt;
      &lt;p&gt;In this case, you just need to recompile the sources from scratch, either with additional &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;maven-cdk-plugin&lt;/span&gt; configuration&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;$ mvn cdk:generate -Dcdk.recompile=true&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;or using &lt;a href=&quot;https://github.com/richfaces/richfaces-sandbox/tree/master/hot-deployment&quot;&gt;command line interface&lt;/a&gt;:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;$ bash run.sh --force-recompile&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;However in most cases, incremental build will work just fine. :-)&lt;/p&gt;
      &lt;h2&gt;Improvement&lt;/h2&gt;
      &lt;div&gt;Using incremental build, I have achieved build-time improvement from &lt;b&gt;10 545&lt;/b&gt; &lt;b&gt;ms&lt;/b&gt; to &lt;b&gt;1 622 ms &lt;/b&gt;in &lt;a href=&quot;https://github.com/richfaces/sandbox/tree/develop/bootstrap&quot;&gt;Bootstrap sandbox project&lt;/a&gt;.&lt;/div&gt;
      &lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div&gt;Such an improvement will allow us to re-factor RichFaces component suite to be developed just from one maven module and simplify a build a lot.&lt;/div&gt;
      &lt;h3&gt;Enjoy &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; component development!&lt;/h3&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2012/08/jsf-meets-skinning-awesomeness-of-less.html</id>
    <title>JSF meets Skinning Awesomeness of LESS</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2012-08-03T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2012/08/jsf-meets-skinning-awesomeness-of-less.html" rel="alternate" type="text/html" />
    <category term="richfaces"></category>
    <category term="less"></category>
    <summary>
      A strength of JSF is in how it enables you to quickly write applications, providing you with a plethora of components abstracting complex functions.
      Skinning, Styling &amp; CSS
      But when it comes to skinning and styling those components, JSF is not very helpful. But let’s not malign JSF here &#8211; it&#8217;s not the fault of JSF.
      Rather, we should blame CSS, which lacks the dynamicity that would allow the strong skinning features.
      CSS Pre-Processors to the Rescue
      That&#8217;s exactly where technologies like LESS and SASS come in. They are processors which provide an  alternative syntax similar to CSS, that basically allow you to do...
    </summary>
    <content type="html">
      &lt;p&gt;A strength of &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; is in how it enables you to quickly write applications, providing you with a plethora of components abstracting complex functions.&lt;/p&gt;
      &lt;h2&gt;Skinning, Styling &amp;amp; &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;
      &lt;/h2&gt;
      &lt;p&gt;But when it comes to skinning and styling those components, &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; is not very helpful. But let’s not malign &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; here – it’s not the fault of &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt;.&lt;/p&gt;
      &lt;p&gt;Rather, we should blame &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;, which lacks the dynamicity that would allow the strong skinning features.&lt;/p&gt;
      &lt;h2&gt;
      &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; Pre-Processors to the Rescue&lt;/h2&gt;
      &lt;p&gt;That’s exactly where technologies like &lt;b&gt;&lt;a href=&quot;http://lesscss.org/&quot;&gt;&lt;span class=&quot;caps&quot;&gt;LESS&lt;/span&gt;&lt;/a&gt;&lt;/b&gt; and &lt;b&gt;&lt;a href=&quot;http://sass-lang.com/&quot;&gt;&lt;span class=&quot;caps&quot;&gt;SASS&lt;/span&gt;&lt;/a&gt;&lt;/b&gt; come in. They are processors which provide an  alternative syntax similar to &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;, that basically allow you to do magic with your style-sheets and how they are are structured – &lt;b&gt;variables, mixins, functions, etc&lt;/b&gt;.&lt;/p&gt;
      &lt;p&gt;As the &lt;a href=&quot;http://www.jboss.org/richfaces/&quot;&gt;RichFaces&lt;/a&gt; team is currently working on leveraging &lt;a href=&quot;http://twitter.github.com/bootstrap/&quot;&gt;Twitter Bootstrap&lt;/a&gt;, we want to embrace its beauties completely, and thus adopted its ability to style components in a simple and reusable way, while also enabling style extensions.&lt;/p&gt;
      &lt;p&gt;Now, you can see this magic in the &lt;a href=&quot;http://bootstrap-richfaces.rhcloud.com/&quot;&gt;RichFaces Bootstrap showcase&lt;/a&gt;.&lt;/p&gt;
      &lt;p&gt;What is this magic and how you can achieve it? Let’s see in this demo:&lt;/p&gt;
      &lt;p&gt;&lt;iframe allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot; height=&quot;300&quot; mozallowfullscreen=&quot;mozallowfullscreen&quot; src=&quot;http://player.vimeo.com/video/46676086&quot; webkitallowfullscreen=&quot;webkitallowfullscreen&quot; width=&quot;380&quot;&gt;&lt;/iframe&gt; &lt;br&gt;&lt;a href=&quot;http://vimeo.com/46676086&quot;&gt;Incredibly fast styling with &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; and &lt;span class=&quot;caps&quot;&gt;LESS&lt;/span&gt;&lt;/a&gt; from &lt;a href=&quot;http://vimeo.com/lukasfryc&quot;&gt;Lukas Fryc&lt;/a&gt; on &lt;a href=&quot;http://vimeo.com/&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;
      &lt;p&gt;You can clone the Bootstrap showcase on GitHub repository:&lt;/p&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/richfaces/sandbox&quot;&gt;https://github.com/richfaces/sandbox&lt;/a&gt;&lt;/p&gt;
      &lt;h2&gt;How does it work?&lt;/h2&gt;
      &lt;p&gt;When the project is imported to the &lt;span class=&quot;caps&quot;&gt;IDE&lt;/span&gt;, you can achieve &lt;b&gt;instant turnaround&lt;/b&gt; without need to reload (or even re-deploy) anything – you just turn on the &lt;b&gt;Instant &lt;span class=&quot;caps&quot;&gt;LESS&lt;/span&gt;&lt;/b&gt; functionality using a bookmark with the following &lt;span class=&quot;caps&quot;&gt;URL&lt;/span&gt; and the &lt;b&gt;&lt;a href=&quot;https://github.com/cloudhead/less.js&quot;&gt;client-side &lt;span class=&quot;caps&quot;&gt;LESS&lt;/span&gt; compiler&lt;/a&gt;&lt;/b&gt; will take care of the rest:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;javascript:less.instant.toggle();&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;Your browser will now constantly watch for changes in the application resources.&lt;/p&gt;
      &lt;p&gt;We use &lt;a href=&quot;http://zeroturnaround.com/software/jrebel/&quot;&gt;&lt;b&gt;JRebel&lt;/b&gt;&lt;/a&gt; to ensure resources are pushed to the server immediately after we save them in the &lt;span class=&quot;caps&quot;&gt;IDE&lt;/span&gt;. This isn’t necessary if you use an &lt;b&gt;expanded &lt;span class=&quot;caps&quot;&gt;WAR&lt;/span&gt;&lt;/b&gt;, but we load &lt;span class=&quot;caps&quot;&gt;LESS&lt;/span&gt; resources from &lt;span class=&quot;caps&quot;&gt;JAR&lt;/span&gt; projects and that’s where servers usually fall short. Luckily JRebel comes to save our butt, making possible** the hot-reloading of resources** within a &lt;span class=&quot;caps&quot;&gt;JAR&lt;/span&gt; that are served using the &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; Resource Handler.&lt;/p&gt;
      &lt;h2&gt;Production Mode&lt;/h2&gt;
      &lt;p&gt;The above method works well while in the &lt;b&gt;Development&lt;/b&gt; stage of a project. But with that approach, &lt;span class=&quot;caps&quot;&gt;LESS&lt;/span&gt; compiles resources in the browser and thus would slow down your application.&lt;/p&gt;
      &lt;p&gt;In &lt;b&gt;Production&lt;/b&gt; project stage is where &lt;b&gt;built-time compilation&lt;/b&gt; comes into play. We use the popular project &lt;b&gt;&lt;a href=&quot;http://code.google.com/p/wro4j/&quot;&gt;wro4j&lt;/a&gt;&lt;/b&gt; - a pre-processor, minifier and optimizer for many alternative syntaxes for web languages.  Specifically we are using the &lt;a href=&quot;http://code.google.com/p/wro4j/wiki/MavenPlugin&quot;&gt;wro4j-maven-plugin&lt;/a&gt; and &lt;a href=&quot;https://github.com/jbosstools/m2e-wro4j&quot;&gt;M2E connector for this Maven plugin&lt;/a&gt; (written by our fellow Fred Bricon, who wrote &lt;a href=&quot;https://community.jboss.org/en/tools/blog/2012/01/17/css-and-js-minification-using-eclipse-maven-and-wro4j&quot;&gt;a blog about usage of this plugin&lt;/a&gt;).&lt;/p&gt;
      &lt;p&gt;Let’s check the Production Mode out, it is also as awesome as the Development Mode and its instant turnaround feature!&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2012/05/arquillian-extension-warp-1.html</id>
    <title>Warp 1.0.0.Alpha1 Released</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2012-05-27T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2012/05/arquillian-extension-warp-1.html" rel="alternate" type="text/html" />
    <category term="arquillian"></category>
    <category term="warp"></category>
    <summary>
      
      	Have you ever wanted to test a web application using real HTTP requests, but still have the opportunity to verify server-side state and behavior?
      	Wouldn&#8217;t it be great to have the full power of Arquillian Drone, driving Selenium or WebDriver on the client, then combine that with an Arquillian in-container test?
      
      Now you can!
      Ike&#8217;s innovative army has created yet another powerful weapon for your testing arsenal, Arquillian Warp.
      Testing on both sides of the request
      Arquillian Warp fills the void between client-side and server-side testing. Using Warp, you can initiate an HTTP request using a client-side testing tool such as WebDriver and, in the...
    </summary>
    <content type="html">
      &lt;ul&gt;
      &lt;li&gt;Have you ever wanted to test a web application using &lt;em&gt;real&lt;/em&gt; &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; requests, but still have the opportunity to verify &lt;em&gt;server-side&lt;/em&gt; state and behavior?&lt;/li&gt;
      	&lt;li&gt;Wouldn’t it be great to have the full power of Arquillian Drone, driving Selenium or WebDriver on the client, then combine that with an Arquillian in-container test?&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Now you can!&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;Ike’s innovative army has created yet another powerful weapon for your testing arsenal, Arquillian Warp.&lt;/p&gt;
      &lt;h3&gt;Testing on both sides of the request&lt;/h3&gt;
      &lt;p&gt;&lt;strong&gt;Arquillian Warp fills the void between client-side and server-side testing.&lt;/strong&gt; Using Warp, you can initiate an &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; request using a client-side testing tool such as WebDriver and, &lt;em&gt;in the same request cycle&lt;/em&gt;, execute in-container server-side tests. This powerful combination lets you cover integration across client and server.&lt;/p&gt;
      &lt;p&gt;Now you can send &lt;em&gt;real&lt;/em&gt; requests that execute &lt;em&gt;real&lt;/em&gt; application logic and render content in a &lt;em&gt;real&lt;/em&gt; browser and test it &lt;em&gt;end-to-end&lt;/em&gt;. Mocks? Who needs those? Imagine the debugging possibilities this opens up!&lt;/p&gt;
      &lt;p&gt;This may sound like sci-fi, but it’s a reality. &lt;strong&gt;It’s advanced alien technology for killing real bugs that you can get your hands on today!&lt;/strong&gt;&lt;/p&gt;
      &lt;h3&gt;Let’s warp to the code&lt;/h3&gt;
      &lt;p&gt;We’ll start with a normal Arquillian Drone client-side test with one enhancement, a &lt;code&gt;@WarpTest&lt;/code&gt; annotation on the test class. This extra annotation instructs Arquillian Warp to enhance the request.&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;@WarpTest
      @RunWith(Arquillian.class)
      public class BasicWarpTest {
          @Drone
          WebDriver browser;&lt;/code&gt;
      
      &lt;code class=&quot;prettify&quot;&gt;    @ArquillianResource
          URL contextPath;&lt;/code&gt;
      
      &lt;code class=&quot;prettify&quot;&gt;    @Deployment
          public static WebArchive createDeployment() { ... }&lt;/code&gt;
      
      &lt;code class=&quot;prettify&quot;&gt;    @Test
          @RunAsClient
          public void test_initial_page() {
              // triggers a HTTP request to a server
              browser.navigate().to(contextPath);
              // stay tuned...
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;Note that you can use &lt;em&gt;any &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; client&lt;/em&gt;. For the sake of simplicity we’ve used &lt;code&gt;@Drone&lt;/code&gt; to hook WebDriver (Selenium 2) into our test. Additionally, we’ve declared a web archive to be tested and injected its &lt;span class=&quot;caps&quot;&gt;URL&lt;/span&gt; into the test case.&lt;/p&gt;
      &lt;p&gt;So far, we’ve defined a basic Drone test. Let’s start to warp this test so we can use it to test server-side logic as well. We begin by defining an implementation of &lt;code&gt;ServerAssertion&lt;/code&gt; as an inner class of the test:&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;public static class InitialRequestAssertion extends ServerAssertion {
          @Inject
          TowelBean towel;&lt;/code&gt;
      
      &lt;code class=&quot;prettify&quot;&gt;    @AfterPhase(RENDER_RESPONSE)
          public void test_initial_state() {
              // verify we are on right viewId
              assertEquals(&quot;/index.xhtml&quot;, FacesContext.getCurrentInstance().getViewRoot().getViewId());&lt;/code&gt;
      
      &lt;code class=&quot;prettify&quot;&gt;        // assert the bean state
              assertNull(42, towelBean.getAnswerToLife());
          }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;An object of this assertion class will be later enriched on the server (i.e., &lt;code&gt;TowelBean&lt;/code&gt; will be injected) and then the lifecycle method annotated with &lt;code&gt;@AfterPhase&lt;/code&gt; will be invoked in an appropriate phase of the request (after the response is rendered in the &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; lifecycle). This lifecycle method is effectively our server-side test.&lt;/p&gt;
      &lt;p&gt;All we need to do now is hook this assertion class to the request that is initiated by the browser. To do that, we warp the Selenium call in a Warp action:&lt;/p&gt;
      &lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;@Test
      @RunAsClient
      public void test_initial_page() {
          // define the client action which will lead to HTTP request
          Warp.execute(new ClientAction() {
              public void action() {
                  // the original request
                  browser.navigate().to(contextPath);
              }&lt;/code&gt;
          
      &lt;code class=&quot;prettify&quot;&gt;    // enhance the subsequent HTTP request with ServerAssertion
          }).verify(new InitialRequestAssertion());
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;That’s it! Here’s how it plays out:&lt;/p&gt;
      &lt;ol&gt;
      &lt;li&gt;The Selenium-controlled browser initiates an &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; request&lt;/li&gt;
      	&lt;li&gt;The request is trapped and enhanced with the &lt;code&gt;InitialRequestAssertion&lt;/code&gt; object (which gets added as a payload of the request)&lt;/li&gt;
      	&lt;li&gt;When the request arrives at the server, the &lt;code&gt;InitialRequestAssertion&lt;/code&gt; assertion object is registered with Arquillian and the request lifecycle proceeds&lt;/li&gt;
      	&lt;li&gt;After the response is rendered on the server, the &lt;code&gt;InitialRequestAssertion&lt;/code&gt; object is enriched with all the required resources (&lt;span class=&quot;caps&quot;&gt;EJB&lt;/span&gt; beans, &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; beans, Spring beans or Arquillian resources) and the lifecycle (test) method is invoked&lt;/li&gt;
      	&lt;li&gt;Once the request is complete, the &lt;code&gt;InitialRequestAssertion&lt;/code&gt; object is sent back to the client&lt;/li&gt;
      	&lt;li&gt;If anything on the server-side failed (including assertions you defined), the failure is propagated back to the client and handled as a test failure&lt;/li&gt;
      &lt;/ol&gt;&lt;p&gt;Currently, Warp supports lifecycle callbacks for the Servlet and &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; lifecycles, but it’s designed to be able to handle any server-side lifecycle.&lt;/p&gt;
      &lt;h3&gt;Some of the highlights in this release&lt;/h3&gt;
      &lt;dl&gt;
      &lt;dt&gt;
      &lt;i class=&quot;icon-star&quot;&gt;&lt;/i&gt; Support for Servlet events&lt;/dt&gt;
      	&lt;dd&gt;
      &lt;p&gt;Warp gives you the ability to test any Servlet lifecycle with these two lifecycle annotations:&lt;/p&gt;
      &lt;p&gt;&lt;code&gt;@BeforeServlet&lt;/code&gt; – triggered before the request is processed by the Servlet&lt;br&gt;&lt;code&gt;@AfterServlet&lt;/code&gt; – triggered after the request is processed by the Servlet&lt;/p&gt;
      &lt;/dd&gt;
      &lt;/dl&gt;&lt;dl&gt;
      &lt;dt&gt;
      &lt;i class=&quot;icon-star&quot;&gt;&lt;/i&gt; Support for &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; lifecycle events (Phaser extension)&lt;/dt&gt;
      	&lt;dd&gt;
      &lt;p&gt;Warp’s Phaser extension provides integration with the &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; lifecycle. You can use these lifecycle annotations to test the application in any &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; phase:&lt;/p&gt;
      &lt;p&gt;&lt;code&gt;@BeforePhase(Phase)&lt;/code&gt; – triggered before the given &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; phase is executed&lt;br&gt;&lt;code&gt;@AfterPhase(Phase)&lt;/code&gt; – triggered after the given &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; phase is executed&lt;/p&gt;
      &lt;/dd&gt;
      &lt;/dl&gt;&lt;dl&gt;
      &lt;dt&gt;
      &lt;i class=&quot;icon-star&quot;&gt;&lt;/i&gt; Compatible with any &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; client&lt;/dt&gt;
      	&lt;dd&gt;&lt;p&gt;Warp works with any &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; client: Selenium, HtmlUnit, HttpUnit, &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt; client, JavaScript test, Android device. No boundaries here!&lt;/p&gt;&lt;/dd&gt;
      &lt;/dl&gt;&lt;dl&gt;
      &lt;dt&gt;
      &lt;i class=&quot;icon-star&quot;&gt;&lt;/i&gt; Open to more protocols&lt;/dt&gt;
      	&lt;dd&gt;&lt;p&gt;Only the &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; protocol is supported currently, but other protocols can be supported as well! (An &lt;span class=&quot;caps&quot;&gt;SPI&lt;/span&gt; will be defined in a later releases)&lt;/p&gt;&lt;/dd&gt;
      &lt;/dl&gt;&lt;dl&gt;
      &lt;dt&gt;
      &lt;i class=&quot;icon-star&quot;&gt;&lt;/i&gt; Open to more frameworks&lt;/dt&gt;
      	&lt;dd&gt;&lt;p&gt;Warp is designed to support any server-side web framework based on the Servlets &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;&lt;/p&gt;&lt;/dd&gt;
      &lt;/dl&gt;&lt;h3&gt;Need to know more?&lt;/h3&gt;
      &lt;p&gt;You can find the complete Maven-based sample usage in the &lt;a href=&quot;https://github.com/arquillian/arquillian-showcase/tree/master/warp&quot;&gt;Arquillian Showcase&lt;/a&gt;.&lt;/p&gt;
      &lt;p&gt;Additionally, you can look at the functional tests in the Warp test suite:&lt;/p&gt;
      &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/arquillian/arquillian-extension-warp/blob/1.0.0.Alpha1/ftest/src/test/java/org/jboss/arquillian/warp/ftest/WarpBasicTest.java&quot;&gt;Servlet integration&lt;/a&gt;&lt;/li&gt;
      	&lt;li&gt;&lt;a href=&quot;https://github.com/arquillian/arquillian-extension-warp/blob/1.0.0.Alpha1/extension/phaser-ftest/src/test/java/org/jboss/arquillian/warp/extension/phaser/ftest/PhaserBasicTest.java&quot;&gt;Phaser (&lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt;) integration&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;&lt;h3&gt;Roadmap&lt;/h3&gt;
      &lt;p&gt;In future releases, we’ll be looking into further improving the extension, most notably by providing framework-specific enrichments:&lt;/p&gt;
      &lt;ul&gt;
      &lt;li&gt;Injectable &lt;code&gt;HttpServletRequest&lt;/code&gt;
      &lt;/li&gt;
      	&lt;li&gt;Injectable &lt;code&gt;FacesContext&lt;/code&gt;
      &lt;/li&gt;
      	&lt;li&gt;etc.&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;Warp offers many possibilities for integration:&lt;/p&gt;
      &lt;ul&gt;
      &lt;li&gt;Support for wide range of &lt;strong&gt;server-side web frameworks&lt;/strong&gt; (Wicket, Vaadin, &lt;span class=&quot;caps&quot;&gt;GWT&lt;/span&gt;, Tapestry, …)&lt;/li&gt;
      	&lt;li&gt;Support for &lt;strong&gt;alternative protocols&lt;/strong&gt; (WebSockets)&lt;/li&gt;
      	&lt;li&gt;Built-in support for variety of &lt;strong&gt;client-side testing tools&lt;/strong&gt;
      &lt;/li&gt;
      &lt;/ul&gt;&lt;h3&gt;Call to action&lt;/h3&gt;
      &lt;p&gt;If you would like to have support for your favorite web framework, you see features that are missing or you can see room for improvement, don’t hesitate and come to the “Arquillian forums”: or the # channel on Freenode &lt;span class=&quot;caps&quot;&gt;IRC&lt;/span&gt;!&lt;/p&gt;
      &lt;p&gt;We would love to hear your ideas and feedback for how to stretch Warp to reach beyond the boundaries of the test galaxy!&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2012/05/in-foothills-of-alps-wrap-up-of-confess.html</id>
    <title>In the foothills of Alps - wrap-up of ConFess 2012</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2012-05-14T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2012/05/in-foothills-of-alps-wrap-up-of-confess.html" rel="alternate" type="text/html" />
    <category term="event"></category>
    <summary>
      
      Last week, I have been in Austria at ConFess conference.
      From my perspective, the conference underwent two significant changes: the venue was moved to Leogang, Austria and at second I was speaking there. :-)
      For the first point, I really loved the place &#8211; I&#8217;m the big fan of hiking and alpinism, so I really enjoyed the moments when we were discussing outside the conference rooms, breathing the fresh air and admiring the beauties of surrounding nature.
      
      At second it was really pleasure to speak at ConFess, as it is the first conference where I&#8217;ve ever been, and I like returning there.
      
      My first...
    </summary>
    <content type="html">
      &lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;
      &lt;p&gt;Last week, I have been in Austria at &lt;b&gt;&lt;a href=&quot;http://2012.con-fess.com/en/&quot; target=&quot;_blank&quot;&gt;ConFess conference&lt;/a&gt;&lt;/b&gt;.&lt;/p&gt;
      &lt;p&gt;From my perspective, the conference underwent two significant changes: the venue was moved to Leogang, Austria and at second I was speaking there. :-)&lt;/p&gt;
      &lt;p&gt;For the first point, I really loved the place – I’m the big fan of hiking and alpinism, so I really enjoyed the moments when we were discussing outside the conference rooms, breathing the fresh air and admiring the beauties of surrounding nature.&lt;/p&gt;
      &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2012-05-14-in-foothills-of-alps-wrap-up-of-confess/IMG_0688.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;199&quot; src=&quot;http://localhost:4242/images/blog/2012-05-14-in-foothills-of-alps-wrap-up-of-confess/IMG_0688.JPG&quot; width=&quot;320&quot;&gt;&lt;/a&gt;&lt;/div&gt;
      &lt;p&gt;At second it was really pleasure to speak at ConFess, as it is the first conference where I’ve ever been, and I like returning there.&lt;/p&gt;
      &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://www.slideshare.net/lfryc/going-mobile-with-richfaces&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;150&quot; src=&quot;http://localhost:4242/images/blog/2012-05-14-in-foothills-of-alps-wrap-up-of-confess/going-mobile.png&quot; width=&quot;200&quot;&gt;&lt;/a&gt;&lt;/div&gt;
      &lt;p&gt;My first talk was about latest movements in world of HTML5, what developers needs to consider and how &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; and RichFaces fit that story.&lt;/p&gt;
      &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://www.slideshare.net/lfryc/designing-topclass-test-suites-for-web-applications&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;150&quot; src=&quot;http://localhost:4242/images/blog/2012-05-14-in-foothills-of-alps-wrap-up-of-confess/designing-top-class-test-suites.png&quot; width=&quot;200&quot;&gt;&lt;/a&gt;&lt;/div&gt;
      &lt;p&gt;Second talk was structured as comprehensive guide to designing test suites for Java EE applications. I have revealed some of latest movements at planet Arquillian (like&lt;a href=&quot;https://community.jboss.org/message/734599&quot;&gt; JSFUnit.NG&lt;/a&gt; or &lt;a href=&quot;http://blog.it-crowd.com.pl/2012/04/arquillian-meets-jrebel.html&quot;&gt;JRebel extension&lt;/a&gt;).&lt;/p&gt;
      &lt;blockquote class=&quot;tr_bq&quot; style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;Thanks to Jan Papousek who captured the photo.&lt;/span&gt;&lt;/blockquote&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2012/04/graphene-100final-released.html</id>
    <title>Graphene 1.0.0.Final Released</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2012-04-11T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2012/04/graphene-100final-released.html" rel="alternate" type="text/html" />
    <category term="arquillian"></category>
    <category term="graphene"></category>
    <summary>
      The Arquillian Graphene, the project focusing on making a real-browser automation a breeze, is now reaching first Final release.
      The Graphene is joining rest of the Arquillian party, building on top of Arquillian framework integration and Drone extension, which reached their stable version yesterday.
      The Mission
      The project was started to address simplification of covering AJAX-enabled applications with browser automation tests.
      While Selenium project is focusing on unified API, integration with variety of browsers, Graphene project is addressing the real-world testing challenges:rapid developmentstraight-forwardreadable APIfast turnaroundobject-orientedtype-safe APIdependency injection of thread-local contextinstabilities and speed of execution in continuous integrationjQuery selectorsrequest guards
      Availability
      The Graphene bits are available in...
    </summary>
    <content type="html">
      &lt;p&gt;The Arquillian Graphene, the project focusing on &lt;b&gt;making a real-browser automation a breeze&lt;/b&gt;, is now reaching first Final release.&lt;/p&gt;
      &lt;p&gt;The Graphene is joining rest of the &lt;b&gt;Arquillian party&lt;/b&gt;, building on top of Arquillian framework integration and Drone extension, which &lt;a href=&quot;http://arquillian.org/blog/2012/04/10/arquillian-first-stable-release/&quot;&gt;reached their stable version yesterday&lt;/a&gt;.&lt;/p&gt;
      &lt;h2&gt;The Mission&lt;/h2&gt;
      &lt;p&gt;The project was started to address simplification of covering &lt;span class=&quot;caps&quot;&gt;AJAX&lt;/span&gt;-enabled applications with browser automation tests.&lt;/p&gt;
      &lt;p&gt;While Selenium project is focusing on unified &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;, integration with variety of browsers, Graphene project is addressing the real-world testing challenges:&lt;/p&gt;&lt;div&gt;
      &lt;ul style=&quot;text-align: left;&quot;&gt;
      &lt;li&gt;&lt;b&gt;rapid development&lt;/b&gt;&lt;/li&gt;
      &lt;ul&gt;
      &lt;li&gt;straight-forward&lt;/li&gt;
      &lt;li&gt;readable &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;
      &lt;/li&gt;
      &lt;li&gt;fast turnaround&lt;/li&gt;
      &lt;/ul&gt;
      &lt;li&gt;&lt;b&gt;object-oriented&lt;/b&gt;&lt;/li&gt;
      &lt;ul&gt;
      &lt;li&gt;type-safe &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;
      &lt;/li&gt;
      &lt;li&gt;dependency injection of thread-local context&lt;/li&gt;
      &lt;/ul&gt;
      &lt;li&gt;
      &lt;b&gt;instabilities&lt;/b&gt; and &lt;b&gt;speed of execution&lt;/b&gt; in continuous integration&lt;/li&gt;
      &lt;ul&gt;
      &lt;li&gt;jQuery selectors&lt;/li&gt;
      &lt;li&gt;request guards&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/ul&gt;
      &lt;h2&gt;Availability&lt;/h2&gt;
      &lt;p&gt;The Graphene bits are available in JBoss Maven repository, dual-licensed under &lt;span class=&quot;caps&quot;&gt;LGPL&lt;/span&gt; v2.1 (backward-compatibility) and &lt;span class=&quot;caps&quot;&gt;ASL&lt;/span&gt; v2.0 (which uses rest of the Arquillian sub-projects).&lt;/p&gt;
      &lt;p&gt;For those who are already using the framework with Maven, you can simply increase the version to &lt;span style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;1.0.0.Final&lt;/span&gt;.&lt;/p&gt;
      &lt;/div&gt;&lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;&lt;div&gt;You can start with the tests using our &lt;a href=&quot;https://docs.jboss.org/author/display/ARQGRA/Getting+Started&quot;&gt;Getting StartJBoss Maven repositoryed guide&lt;/a&gt;.&lt;/div&gt;
      &lt;h2&gt;The Future&lt;/h2&gt;
      &lt;p&gt;Right now we are heavily working on making the new version of Graphene 2 on the road.&lt;/p&gt;
      &lt;p&gt;Selenium 2 with its &lt;b&gt;WebDriver &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;&lt;/b&gt; made huge progress with &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; &lt;b&gt;accessibility and readability&lt;/b&gt; – it’s already pleasure to work with this &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; in Java world.&lt;/p&gt;
      &lt;p&gt;However still there are &lt;b&gt;many lacks we are going to address with Graphene 2&lt;/b&gt;, building on top of concepts brought in Graphene 1 and adding new features, which opens world of new possibilities:&lt;/p&gt;
      &lt;ul style=&quot;text-align: left;&quot;&gt;
      &lt;li&gt;dependency injection of thread-local context&lt;/li&gt;
      &lt;li&gt;fast development turnaround&lt;/li&gt;
      &lt;li&gt;cross-cutting concerns (command interception)&lt;/li&gt;
      &lt;li&gt;request guards&lt;/li&gt;
      &lt;li&gt;page extensions&lt;/li&gt;
      &lt;li&gt;component objects&lt;/li&gt;
      &lt;ul&gt;
      &lt;li&gt;extension of page objects concept&lt;/li&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/ul&gt;
      &lt;li&gt;JavaScript test execution from within Selenium test&lt;/li&gt;
      &lt;/ul&gt;&lt;div&gt;If you enjoy testing and you are unsatisfied with the current browser automation tooling, &lt;b&gt;it’s perfect time to step in&lt;/b&gt; and help us to &lt;b&gt;bring the future&lt;/b&gt;!
      &lt;h2&gt;The Project Info&lt;/h2&gt;
      &lt;p&gt;Source code: &lt;a href=&quot;https://github.com/arquillian/arquillian-graphene&quot;&gt;https://github.com/arquillian/arquillian-graphene&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;&lt;div&gt;Documentation: &lt;a href=&quot;https://docs.jboss.org/author/display/ARQGRA/Home&quot;&gt;https://docs.jboss.org/author/display/&lt;span class=&quot;caps&quot;&gt;ARQGRA&lt;/span&gt;/Home&lt;/a&gt;
      &lt;/div&gt;&lt;div&gt;Issue tracker: &lt;a href=&quot;https://issues.jboss.org/browse/ARQGRA&quot;&gt;https://issues.jboss.org/browse/&lt;span class=&quot;caps&quot;&gt;ARQGRA&lt;/span&gt;&lt;/a&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2012/04/full-fledged-debugging-for-mobile.html</id>
    <title>Full-Fledged Debugging for Mobile Browsers</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2012-04-04T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2012/04/full-fledged-debugging-for-mobile.html" rel="alternate" type="text/html" />
    <category term="debugging"></category>
    <category term="mobile"></category>
    <summary>
      A debugging of desktop applications is very common task in the world of web development. We might say the tooling here is highly developed and you can find everything you require and pretty easily. You can just use all those Firebugs, Chrome Web Inspectors, IE Developers Tools, etc.
      Not so in world of mobile devices!
      Hard Time Debugging Web Apps on Mobiles
      The debugging applications on mobile were always problem &#8211; the mobile safari for iPhone/iPad offers you at least error console, so you might know when something is going wrong. The Android built-in browser does not even provide you such tool!
      WebKit Web...
    </summary>
    <content type="html">
      &lt;p&gt;A debugging of desktop applications is very common task in the world of web development. We might say the tooling here is highly developed and you can find everything you require and pretty easily. You can just use all those Firebugs, Chrome Web Inspectors, IE Developers Tools, etc.&lt;/p&gt;
      &lt;p&gt;Not so in world of mobile devices!&lt;/p&gt;
      &lt;h2&gt;Hard Time Debugging Web Apps on Mobiles&lt;/h2&gt;
      &lt;p&gt;The debugging applications on mobile were always problem – the mobile safari for iPhone/iPad offers you at least error console, so you might know when something is going wrong. The Android built-in browser does not even provide you such tool!&lt;/p&gt;
      &lt;h2&gt;WebKit Web Inspector&lt;/h2&gt;
      &lt;p&gt;But the WebKit based browsers has solution to this – they offers WebKit Web Inspector, which you might be familiar with from using Chrome/Safari.&lt;/p&gt;
      &lt;p&gt;Fortunately, WebKit functionality has arrived to mobile browsers yet!&lt;/p&gt;
      &lt;h2&gt;Inspector for Safari / iPhone&lt;/h2&gt;
      &lt;p&gt;From little bit of search, I have found Safari was enabled to &lt;a href=&quot;http://www.webkit.org/blog/1620/webkit-remote-debugging/&quot;&gt;use remote debugging bridge&lt;/a&gt; year ago!&lt;/p&gt;
      &lt;h2&gt;Inspector for Chrome Beta / Android&lt;/h2&gt;
      &lt;p&gt;But as Ubuntu/Android user, I wasn’t able to use such a comfort. Until now!&lt;/p&gt;
      &lt;p&gt;I have upgraded my &lt;span class=&quot;caps&quot;&gt;HTC&lt;/span&gt; to Android 4 yesterday and the Chrome Beta was the first application I installed there (it isn’t available for previous Android releases).&lt;/p&gt;
      &lt;p&gt;Today I have dived into RichFaces issue which occurred on mobiles. What a pain it could be when trying to find the cause, since mobile browsers doesn’t even provide you the exact line where JavaScript error has occurred.&lt;/p&gt;
      &lt;p&gt;And guess what? Chrome Beta already allows the same like Safari – WebKit Web Inspector through the &lt;span class=&quot;caps&quot;&gt;USB&lt;/span&gt; debugging bridge.&lt;/p&gt;
      &lt;h2&gt;How To…&lt;/h2&gt;
      &lt;p&gt;The process is quite straight-forward:&lt;/p&gt;
      &lt;ul style=&quot;text-align: left;&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;http://developer.android.com/guide/developing/device.html&quot;&gt;setup the &lt;span class=&quot;caps&quot;&gt;USB&lt;/span&gt; debugging&lt;/a&gt;&lt;/li&gt;
      &lt;ul&gt;
      &lt;li&gt;let’s start from step 2 – Turn on “&lt;span class=&quot;caps&quot;&gt;USB&lt;/span&gt; Debugging” on your device.&lt;/li&gt;
      &lt;li&gt;for Ubuntu users, one additional step is required which involves registration device into udev system (described in the link above)&lt;/li&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/ul&gt;
      &lt;li&gt;
      &lt;a href=&quot;https://developers.google.com/chrome/mobile/docs/debugging&quot;&gt;enable &lt;span class=&quot;caps&quot;&gt;USB&lt;/span&gt; web debugging in Chrome Beta&lt;/a&gt; &lt;/li&gt;
      &lt;ul&gt;&lt;li&gt;involving installation of Android &lt;span class=&quot;caps&quot;&gt;SDK&lt;/span&gt;
      &lt;/li&gt;&lt;/ul&gt;
      &lt;/ul&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2012/03/incredibly-fast-jsf-component.html</id>
    <title>Incredibly Fast JSF Component Development</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2012-03-29T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2012/03/incredibly-fast-jsf-component.html" rel="alternate" type="text/html" />
    <category term="richfaces"></category>
    <category term="cdk"></category>
    <summary>
      Why is a JSF components development so painful?
      It would be really great if I could develop full-blown JSF components wrapping some JavaScript UI widget as fast as I&#8217;m developing plain HTML, wouldn&#8217;t it?
      Just two words: fast turnaround!
      Every tool and every framework which tries to simplify a process should have a strategy to allow a fast turnaround. It is lowering a learning curve and saves developers many invaluable hours. And mainly it makes working with the a tool a pleasure!
      
      
      
      RichFaces CDK
      
      The CDK project is sample of such a powerful tool &#8211; it allows you to write just two pieces -
      a Java...
    </summary>
    <content type="html">
      &lt;p&gt;Why is a &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; components development so painful?&lt;/p&gt;
      &lt;p&gt;It would be really great if I could &lt;b&gt;develop full-blown &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; components&lt;/b&gt; wrapping some JavaScript UI widget as fast as I’m developing plain &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt;, wouldn’t it?&lt;/p&gt;
      &lt;p&gt;Just two words: &lt;b&gt;fast turnaround&lt;/b&gt;!&lt;/p&gt;
      &lt;p&gt;Every tool and every framework which tries to simplify a process should have a strategy to allow a fast turnaround. It is lowering a &lt;b&gt;learning curve&lt;/b&gt; and saves developers &lt;b&gt;many invaluable hours&lt;/b&gt;. And mainly it makes working with the a tool a &lt;b&gt;pleasure&lt;/b&gt;!&lt;/p&gt;
      &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2012-03-29-incredibly-fast-jsf-component/4689159475_c1b94da93d.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em; text-align: center;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;160&quot; src=&quot;http://localhost:4242/images/blog/2012-03-29-incredibly-fast-jsf-component/4689159475_c1b94da93d.jpg&quot; width=&quot;320&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
      &lt;/div&gt;
      &lt;h2&gt;RichFaces &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt;
      &lt;/h2&gt;
      &lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;The &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt; project is sample of such a powerful tool – it allows you to write just two pieces -&lt;br&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;
      &lt;li&gt;a Java component &lt;b&gt;interface&lt;/b&gt;,&lt;/li&gt;
      &lt;li&gt;a &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; &lt;b&gt;renderer&lt;/b&gt; (with Facelets-like syntax),&lt;/li&gt;
      &lt;/ul&gt;&lt;div&gt;and then it takes these definitions and&lt;/div&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;
      &lt;li&gt;
      &lt;b&gt;generates all the boilerplate&lt;/b&gt; &lt;b&gt;code&lt;/b&gt; automatically including&lt;/li&gt;
      &lt;ul&gt;
      &lt;li&gt;all the Java code,&lt;/li&gt;
      &lt;li&gt;configurations (faces-config.xml and &lt;strong&gt;.taglib.xml),&lt;/strong&gt;
      &lt;/li&gt;
      &lt;li&gt;and a &lt;span class=&quot;caps&quot;&gt;VDL&lt;/span&gt; documentation.&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/ul&gt;&lt;div&gt;Brian Leathem has written *series of articles** introducing &lt;a href=&quot;http://blog.bleathem.ca/search/label/CDK&quot;&gt;how easy can &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; component development be when using RichFaces &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt;&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;&lt;div&gt;But besides it is the powerful tool, you can also achieve a &lt;b&gt;really fast development&lt;/b&gt; turnaround using &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt;- just by using proper tools!&lt;/div&gt;&lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2012-03-29-incredibly-fast-jsf-component/4344137529_15a658f496.jpg&quot; imageanchor=&quot;1&quot; style=&quot;font-size: medium; font-weight: normal; margin-left: 1em; margin-right: 1em; text-align: center;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;138&quot; src=&quot;http://localhost:4242/images/blog/2012-03-29-incredibly-fast-jsf-component/4344137529_15a658f496.jpg&quot; width=&quot;320&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;h3 style=&quot;text-align: left;&quot;&gt;
      &lt;h2&gt;&lt;a href=&quot;https://github.com/richfaces/richfaces-sandbox/tree/master/hot-deployment&quot;&gt;Quick Turnaround with RichFaces &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
      &lt;/h3&gt;&lt;p&gt;There is &lt;a href=&quot;https://github.com/richfaces/richfaces-sandbox/tree/master/hot-deployment&quot;&gt;&lt;span style=&quot;font-size: large;&quot;&gt;guide&lt;/span&gt;&lt;/a&gt; which covers how to setup &lt;b&gt;your tooling&lt;/b&gt; to start with a development.&lt;/p&gt;
      &lt;p&gt;It covers setting up the component and demo project in JBoss Tools (on top of Eclipse &lt;span class=&quot;caps&quot;&gt;IDE&lt;/span&gt;) and how to &lt;b&gt;automatically trigger build&lt;/b&gt; when you change &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt; resources.&lt;/p&gt;
      &lt;p&gt;And to make the deployment phase as quick as possible?&lt;/p&gt;
      &lt;p&gt;We are using JRebel to &lt;b&gt;hot-deploy built resources&lt;/b&gt; into JBoss AS 7, which is itself f&amp;amp;@#ng fast.&lt;/p&gt;
      &lt;p&gt;That’s it!&lt;/p&gt;
      &lt;p&gt;You can just &lt;strong&gt;save &amp;amp; refresh *&lt;/strong&gt;the page!&lt;/p&gt;
      &lt;div class=&quot;alert&quot;&gt;The pictures used in the blog are only illustrative, taken by various authors and published under Creative Commons license. The references: &lt;a href=&quot;http://www.flickr.com/photos/breatheindigital/4689159475/&quot;&gt;the toolkit&lt;/a&gt; by Ryan Hyde and &lt;a href=&quot;http://www.flickr.com/photos/getdown/4344137529/&quot;&gt;the trains&lt;/a&gt; by Joel Down&lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2012/03/goodbye-ajocado-welcome-graphene.html</id>
    <title>Goodbye, Ajocado - Welcome, Graphene!</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2012-03-19T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2012/03/goodbye-ajocado-welcome-graphene.html" rel="alternate" type="text/html" />
    <category term="arquillian"></category>
    <category term="graphene"></category>
    <summary>
      Goodbye, Ajocado
      Wait, the Ajocado project is not leaving us!
      It is just undergoing rename. Why such a change?
      Ajocado was everytime proud member of Arquillian family, however its name didn&#8217;t tell very well what&#8217;s its purpose in the true alien world &#8211; the name didn&#8217;t fit the story.
      Moreover, we have experienced many troubles explaining how Ajocado should be even pronounced.
      I must admit it was unlucky choice.
      Choosing the new name&#8230;
      The project is like a diamond - very strong in its basis:a strongly-typed, chaining APIefficient jQuery-based locatorsproven to handle AJAX successfullyBut on the other hand, diamonds can&#8217;t be simply manufactured.
      Let&#8217;s look what more could...
    </summary>
    <content type="html">
      &lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;
      &lt;div&gt;&lt;span style=&quot;font-size: x-large;&quot;&gt;Goodbye, Ajocado&lt;/span&gt;&lt;/div&gt;
      &lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div&gt;Wait, the Ajocado project is not leaving us!&lt;br&gt;
      It is just undergoing rename. Why such a change?&lt;/div&gt;
      &lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div&gt;
      &lt;b&gt;Ajocado&lt;/b&gt; was everytime proud member of &lt;b&gt;Arquillian&lt;/b&gt; family, however its name didn’t tell very well what’s its purpose in the true alien world – the name didn’t fit the story.&lt;/div&gt;
      &lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div&gt;Moreover, we have experienced many troubles explaining how Ajocado should be even pronounced.
      &lt;p&gt;I must admit it was unlucky choice.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;span style=&quot;font-size: x-large;&quot;&gt;Choosing the new name…&lt;/span&gt;&lt;/div&gt;
      &lt;div&gt;
      &lt;br&gt;
      The project is like a diamond - very strong in its basis:&lt;/div&gt;
      &lt;div&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;
      &lt;li&gt;a strongly-typed, chaining &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;
      &lt;/li&gt;
      &lt;li&gt;efficient jQuery-based locators&lt;/li&gt;
      &lt;li&gt;proven to handle &lt;span class=&quot;caps&quot;&gt;AJAX&lt;/span&gt; successfully&lt;/li&gt;
      &lt;/ul&gt;&lt;/div&gt;
      &lt;div&gt;But on the other hand, diamonds can’t be simply manufactured.
      &lt;p&gt;Let’s look what more could Ajocado offer us:&lt;br&gt;&lt;/p&gt;
      &lt;ul style=&quot;text-align: left;&quot;&gt;
      &lt;li&gt;rapid test development&lt;/li&gt;
      &lt;li&gt;readability&lt;/li&gt;
      &lt;li&gt;high-level abstractions&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;What can be as strong as diamond, but be much more flexible?&lt;/div&gt;
      &lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;span style=&quot;font-size: x-large;&quot;&gt;Welcome, Graphene!&lt;/span&gt;&lt;/div&gt;
      &lt;br&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;Graphene is stronger and stiffer than diamond, yet can be stretched by a quarter of its length, like rubber.&lt;/blockquote&gt;
      &lt;/div&gt;
      &lt;div&gt;Let me introduce the Graphene - the &lt;b&gt;strong&lt;/b&gt; and &lt;b&gt;flexible&lt;/b&gt; UI automation tool – the old/new member of the alien crew, on the way to save the world!&lt;/div&gt;
      &lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;span style=&quot;font-size: x-large;&quot;&gt;What’s next?&lt;/span&gt;&lt;/div&gt;
      &lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div&gt;The rename is already done, waiting in maven repositories as Graphene 1.0.0.CR3.&lt;/div&gt;
      &lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div&gt;And what about migration? It’s pretty straight-forward, as you can see in my &lt;a href=&quot;http://rik-ansikter.blogspot.com/2012/03/graphene-cr3-released-how-to-migrate.html&quot;&gt;next post&lt;/a&gt;.&lt;/div&gt;
      &lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div&gt;Thank you all who participated in choosing new name, renaming and migration testing (Vlasta Elias, Dan Allen, Jan Papousek, Karel Piwko)!
      &lt;p&gt;&lt;span style=&quot;font-size: x-large;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;br&gt;&lt;span style=&quot;font-size: x-large;&quot;&gt;More project information&lt;/span&gt;&lt;/p&gt;
      &lt;p&gt;&lt;a href=&quot;https://community.jboss.org/wiki/ArquillianGraphene&quot;&gt;Home page&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://docs.jboss.org/author/display/ARQGRA&quot;&gt;Documentation&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://issues.jboss.org/browse/ARQGRA&quot;&gt;Issue tracker&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2012/03/great-times-at-jdc-2012-egypt.html</id>
    <title>Great times at JDC 2012, Egypt</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2012-03-13T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2012/03/great-times-at-jdc-2012-egypt.html" rel="alternate" type="text/html" />
    <category term="wrap-up"></category>
    <summary>
      
      I’m finally back from Cairo, where I was invited as speaker on Java Developer Conference 2012.
      If I should think of just one word explaining the conference, I would need to say: a passion.
      You could seen the passion from everywhere: discussions, an audience, follow-up questions, organizers.
      As I have written in last post, I had three sessions there &#8211; you can read more about them or view the slides at Lanyard:
      
      
      
      
      The only what would I change is timing of sessions, because then me and Koen’s session had not conflict and Arquillian would take even more attention.
      
      I have spent lot of time in...
    </summary>
    <content type="html">
      &lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;
      &lt;p&gt;I’m finally back from Cairo, where I was invited as speaker on &lt;a href=&quot;http://jdc2012.egjug.org/&quot;&gt;Java Developer Conference 2012&lt;/a&gt;.&lt;/p&gt;
      &lt;p&gt;If I should think of just one word explaining the conference, I would need to say: &lt;b&gt;a passion&lt;/b&gt;.&lt;/p&gt;
      &lt;p&gt;You could seen the passion from everywhere: discussions, an audience, follow-up questions, organizers.&lt;/p&gt;
      &lt;p&gt;As I have written in last post, I had three sessions there – you can read more about them or view the slides at &lt;a href=&quot;http://lanyrd.com/profile/lfryc/&quot;&gt;Lanyard&lt;/a&gt;:&lt;/p&gt;
      &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://lanyrd.com/2012/jdc2012/sqkfz/&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;238&quot; src=&quot;http://localhost:4242/images/blog/2012-03-13-great-times-at-jdc-2012-egypt/talk-aerogear.png&quot; width=&quot;320&quot;&gt;&lt;/a&gt;&lt;/div&gt;
      &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://lanyrd.com/2012/jdc2012/sqkgb/&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;238&quot; src=&quot;http://localhost:4242/images/blog/2012-03-13-great-times-at-jdc-2012-egypt/talk-cdk.png&quot; width=&quot;320&quot;&gt;&lt;/a&gt;&lt;/div&gt;
      &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://lanyrd.com/2012/jdc2012/sqkgc/&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;238&quot; src=&quot;http://localhost:4242/images/blog/2012-03-13-great-times-at-jdc-2012-egypt/talk-arq.png&quot; width=&quot;320&quot;&gt;&lt;/a&gt;&lt;/div&gt;
      &lt;span style=&quot;font-size: large;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;br&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;The only what would I change is timing of sessions, because then me and &lt;a href=&quot;http://lanyrd.com/profile/koentsje/&quot;&gt;Koen’s&lt;/a&gt; session had not conflict and Arquillian would take even more attention.&lt;/div&gt;
      &lt;br&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2012-03-13-great-times-at-jdc-2012-egypt/AnjHDS2CQAAhSFk.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em; text-align: center;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;320&quot; src=&quot;http://localhost:4242/images/blog/2012-03-13-great-times-at-jdc-2012-egypt/AnjHDS2CQAAhSFk.jpg&quot; width=&quot;240&quot;&gt;&lt;/a&gt;&lt;/div&gt;
      &lt;br&gt;
      I have spent lot of time in the JBoss booth and the venue, discussing precious projects!
      &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2012-03-13-great-times-at-jdc-2012-egypt/2012-03-13-great-times-at-jdc-2012-egypt_1.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;213&quot; src=&quot;http://localhost:4242/images/blog/2012-03-13-great-times-at-jdc-2012-egypt/2012-03-13-great-times-at-jdc-2012-egypt_1.png&quot; width=&quot;320&quot;&gt;&lt;/a&gt;&lt;/div&gt;
      &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2012-03-13-great-times-at-jdc-2012-egypt/2012-03-13-great-times-at-jdc-2012-egypt_2.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;213&quot; src=&quot;http://localhost:4242/images/blog/2012-03-13-great-times-at-jdc-2012-egypt/2012-03-13-great-times-at-jdc-2012-egypt_2.png&quot; width=&quot;320&quot;&gt;&lt;/a&gt;&lt;/div&gt;
      &lt;br&gt;
      After the conference closing, the good beer and the nice mood over the discussion about various, mainly JBoss-related and philosophical questions with &lt;a href=&quot;http://lanyrd.com/profile/koentsje/&quot;&gt;Koen&lt;/a&gt; made my Sunday’s waking up really hectic – I arranged the trip over the pyramids for 9:00. Although the clock in the room was showing 6:25, it was nearly 9:30.
      &lt;p&gt;But the morning’s difficulties were quickly shaded with all the great views on pyramids – there were so nice and as Koen expressed it exactly: mind-blowing. I really need to give another thanks to the our tour guide – Mahmud for taking us all – me, &lt;a href=&quot;http://lanyrd.com/profile/joonaslehtinen/&quot;&gt;Jonaas&lt;/a&gt; and &lt;a href=&quot;http://lanyrd.com/profile/crichardson/&quot;&gt;Richard&lt;/a&gt; – to the pyramids.&lt;/p&gt;
      &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2012-03-13-great-times-at-jdc-2012-egypt/IMG_6356a.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;240&quot; src=&quot;http://localhost:4242/images/blog/2012-03-13-great-times-at-jdc-2012-egypt/IMG_6356a.JPG&quot; width=&quot;320&quot;&gt;&lt;/a&gt;&lt;/div&gt;
      &lt;p&gt;At overall, I would be really happy to speak at &lt;span class=&quot;caps&quot;&gt;JDC&lt;/span&gt; again next year as well as discover other beauties of Egypt!&lt;/p&gt;
      &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2012-03-13-great-times-at-jdc-2012-egypt/IMG_6384a.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;252&quot; src=&quot;http://localhost:4242/images/blog/2012-03-13-great-times-at-jdc-2012-egypt/IMG_6384a.JPG&quot; width=&quot;320&quot;&gt;&lt;/a&gt;&lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2012/03/speaking-at-jdc12-in-cairo-egypt.html</id>
    <title>Speaking at JDC'12 in Cairo, Egypt</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2012-03-05T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2012/03/speaking-at-jdc12-in-cairo-egypt.html" rel="alternate" type="text/html" />
    <category term="event"></category>
    <summary>
      
      I&#8217;m speaking at JAVA Developer Conference 2012 held at March 9-10th in Cairo, Egypt.
      I will give there 3 talks on my favorite topics: a web development with JBoss technologies and a testing.
      The Gear You Need To Go Mobile With Java Enterprise
      In the first talk, I&#8217;m going to cover what could the Java enterprise offer you in days of a rising mobile platform.
      A Rapid JSF Component Development with RichFaces CDK
      The second talk introduces RichFaces Component Development Kit as the tool to cover the space where JSF2 falls short &#8211; custom component development.
      Arquillian: Effective Tests from the Client to the Server
      The last...
    </summary>
    <content type="html">
      &lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;
      &lt;p&gt;I’m speaking at &lt;a href=&quot;http://jdc2012.egjug.org/&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JAVA&lt;/span&gt; Developer Conference 2012&lt;/a&gt; held at March 9-10th in Cairo, Egypt.&lt;/p&gt;
      &lt;p&gt;I will give there 3 talks on my favorite topics: a web development with JBoss technologies and a testing.&lt;/p&gt;
      &lt;h4&gt;&lt;a href=&quot;http://jdc2012.egjug.org/session/gear_you_need_go_mobile_java_enterprise&quot;&gt;The Gear You Need To Go Mobile With Java Enterprise&lt;/a&gt;&lt;/h4&gt;
      &lt;p&gt;In the first talk, I’m going to cover what could the Java enterprise offer you in days of a rising mobile platform.&lt;/p&gt;
      &lt;h4&gt;&lt;a href=&quot;http://jdc2012.egjug.org/session/rapid_jsf_component_development_richfaces_cdk&quot;&gt;A Rapid &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; Component Development with RichFaces &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt;&lt;/a&gt;&lt;/h4&gt;
      &lt;p&gt;The second talk introduces RichFaces Component Development Kit as the tool to cover the space where JSF2 falls short – custom component development.&lt;/p&gt;
      &lt;h4&gt;&lt;a href=&quot;http://jdc2012.egjug.org/session/arquillian_helping_developers_and_qa_get_along_and_get_apps_covered&quot;&gt;Arquillian: Effective Tests from the Client to the Server&lt;/a&gt;&lt;/h4&gt;
      &lt;p&gt;The last talk is about the latest movements in the space of a testing revolution started when Arquillian decided to save the earth. I will focus specifically on testing an integration of the client and the server.&lt;/p&gt;
      &lt;p&gt;My JBoss fellow, Koen Aers, will be also presenting there and he covers lot of interesting stuff: &lt;b&gt;JBoss Tools&lt;/b&gt;,&lt;strong&gt;* Forge *&lt;/strong&gt;and** Arquillian** (yeah, Ike invades Egypt!). Let’s &lt;a href=&quot;http://jdc2012.egjug.org/sessions&quot;&gt;checkout his and other sessions&lt;/a&gt;.&lt;/p&gt;
      &lt;p&gt;The event haven’t started yet, but it’s already looking like great event, I’m looking forward to see you there!&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2012/02/wrap-up-arquillian-hackfest-developer.html</id>
    <title>Wrap-up: Arquillian Hackfest @ Developer Conference 2012 Brno</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2012-02-24T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2012/02/wrap-up-arquillian-hackfest-developer.html" rel="alternate" type="text/html" />
    <category term="hackfest"></category>
    <category term="wrap-up"></category>
    <summary>
      Thank all participants for contributing to discussions on Arquillian HackFest!
      The 10 people has attended and shared their ideas on selected topics,
      and others came to see us on video stream and IRC channel!
      The initial idea for this Hackfest has arisen when we were discussing the topics we would like to cover in conference days, just after Arquillian SPI talk from Aslak.
      Although we wasn&#8217;t able to cover all declared topics,
      we focused on the ones which were most related to incoming Arquillians,
      the notes and white-boards can be find here:
      Future: GWT
      Future: JavaScript
      Future: Performance testing
      Future: JSFUnit.NG
      ( no notes here, it was really short session &#8211;...
    </summary>
    <content type="html">
      &lt;p&gt;Thank &lt;b&gt;all participants for contributing&lt;/b&gt; to discussions on Arquillian HackFest!&lt;/p&gt;
      &lt;p&gt;The &lt;b&gt;10 people has attended&lt;/b&gt; and shared their ideas on selected topics,&lt;br&gt;
      and others came to see us on video stream and &lt;span class=&quot;caps&quot;&gt;IRC&lt;/span&gt; channel!&lt;/p&gt;
      &lt;p&gt;&lt;a href=&quot;https://plus.google.com/109501071933862146039/posts/dyo3hU9smcj&quot; target=&quot;_blank&quot;&gt;The initial idea for this Hackfest&lt;/a&gt; has arisen when we were discussing the topics we would like to cover in conference days, just after &lt;b&gt;Arquillian &lt;span class=&quot;caps&quot;&gt;SPI&lt;/span&gt; talk from Aslak&lt;/b&gt;.&lt;/p&gt;
      &lt;p&gt;Although we wasn’t able to cover all declared topics,&lt;br&gt;
      we focused on the ones which were most related to incoming Arquillians,&lt;br&gt;
      the &lt;b&gt;notes and white-boards&lt;/b&gt; can be find here:&lt;/p&gt;
      &lt;p&gt;&lt;b&gt;&lt;a href=&quot;https://github.com/arquillian/arquillian-organization/wiki/Future:-gwt&quot; target=&quot;_blank&quot;&gt;Future: &lt;span class=&quot;caps&quot;&gt;GWT&lt;/span&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
      &lt;p&gt;&lt;b&gt;&lt;a href=&quot;https://github.com/arquillian/arquillian-organization/wiki/Future:-javascript&quot; target=&quot;_blank&quot;&gt;Future: JavaScript&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
      &lt;p&gt;&lt;b&gt;&lt;a href=&quot;https://github.com/arquillian/arquillian-organization/wiki/Future:-performance-testing&quot; target=&quot;_blank&quot;&gt;Future: Performance testing&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
      &lt;p&gt;&lt;b&gt;Future: JSFUnit.NG&lt;/b&gt;&lt;br&gt;
      ( no notes here, it was really short session – after Arquillian &lt;span class=&quot;caps&quot;&gt;SPI&lt;/span&gt; talks, it didn’t left much more to discuss – thanks Aslak! )&lt;/p&gt;
      &lt;p&gt;It was pleasure to see so much ideas flowing,&lt;strong&gt;* let’s grab them and equip Ike with even more mighty weapons&lt;/strong&gt;* for fighting with bugs. ;-)&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2012/02/re-routing-jsf-resource-requests-with.html</id>
    <title>Re-routing JSF resource requests with RichFaces Resource Mapping</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2012-02-13T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2012/02/re-routing-jsf-resource-requests-with.html" rel="alternate" type="text/html" />
    <category term="richfaces"></category>
    <category term="resource-loading"></category>
    <summary>
      RichFaces resource mapping can save your life when you need to serve a different resource (JS, CSS, image) file than the one originally requested. It works in the stage of determination of the resource request path.
      Specifically in all following situations, it may be really handy:
      providing alternative versions of a resourcemap several resources to oneusing external resourcesmoving resources to servers with static content
      Before diving deeper into the situations above, let&#8217;s look at how resources typically works in JSF.
      Resource loading in the picture
      Component libraries bundle resource dependencies (CSS stylesheets, JavaScript sources, images) in the distribution archives (JARs) and application-specific resources are bundled...
    </summary>
    <content type="html">
      &lt;p&gt;RichFaces resource mapping can save your life when you need to serve a different resource (JS, &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;, image) file than the one originally requested. It works in the stage of determination of the resource request path.&lt;/p&gt;
      &lt;p&gt;Specifically in all following situations, it may be really handy:&lt;br&gt;&lt;/p&gt;&lt;ul&gt;
      &lt;li&gt;providing alternative versions of a resource&lt;/li&gt;
      &lt;li&gt;map several resources to one&lt;/li&gt;
      &lt;li&gt;using external resources&lt;/li&gt;
      &lt;li&gt;moving resources to servers with static content&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;Before diving deeper into the situations above, let’s look at how resources typically works in &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt;.&lt;/p&gt;
      &lt;h3&gt;Resource loading in the picture&lt;/h3&gt;
      &lt;p&gt;Component libraries bundle resource dependencies (&lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; stylesheets, JavaScript sources, images) in the distribution archives (JARs) and application-specific resources are bundled in &lt;span class=&quot;caps&quot;&gt;WAR&lt;/span&gt; – the situation is outlined on the following picture:&lt;/p&gt;
      &lt;p&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2012-02-13-re-routing-jsf-resource-requests-with/plain.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;245&quot; src=&quot;http://localhost:4242/images/blog/2012-02-13-re-routing-jsf-resource-requests-with/plain.png&quot; width=&quot;400&quot; alt=&quot;Component libraries (JARs) and application web archive (WAR)
      and resource dependencies (green)&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;p&gt;Let’s look at all of mentioned situations one by one:&lt;/p&gt;
      &lt;h3&gt;Providing alternative file&lt;/h3&gt;
      &lt;p&gt;For example, your application requests &lt;span style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;jquery.js&lt;/span&gt; resource, but you don’t want to use default one, you want to provide alternative, maybe patched version to solve some issues. So you provide RichFaces the mapping using following configuration.&lt;/p&gt;
      &lt;p&gt;Create the file &lt;span style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;&lt;span class=&quot;caps&quot;&gt;META&lt;/span&gt;-&lt;span class=&quot;caps&quot;&gt;INF&lt;/span&gt;/richfaces/static-resource-mappings.properties&lt;/span&gt; on the classpath of your project and configure one mapping:&lt;/p&gt;
      &lt;pre class=&quot;prettify bs-docs-example&quot;&gt;&lt;code class=&quot;prettify bs-docs-example&quot;&gt;jquery.js=jquery-alternative-version.js&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;All requests for &lt;code&gt;jquery.js&lt;/code&gt; will then be served as requests for &lt;code&gt;jquery-alternative-version.js&lt;/code&gt;.&lt;/p&gt;
      &lt;p&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2012-02-13-re-routing-jsf-resource-requests-with/alternate.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;280&quot; src=&quot;http://localhost:4242/images/blog/2012-02-13-re-routing-jsf-resource-requests-with/alternate.png&quot; width=&quot;320&quot; alt=&quot;jquery.js mapped to jquery-alternate.js&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;div class=&quot;alert&quot;&gt;
      &lt;b&gt;Warning:&lt;/b&gt; Resource mapping requires resource servlet for its work – it is automatically registered in Servlets 3.0 environments (JBoss AS 6 and 7, Tomcat 7, GlassFish 3, etc.), but you will need to register that manually in Servlets 2.5 or lower environments – see &lt;a href=&quot;http://docs.jboss.org/richfaces/latest_4_X/Developer_Guide/en-US/html/chap-Developer_Guide-Advanced_features.html#sect-Developer_Guide-Advanced_features-Configuring_ResourceServlet&quot; target=&quot;_blank&quot;&gt;RichFaces Developer Guide&lt;/a&gt; for details of how configure it.&lt;/div&gt;
      &lt;div class=&quot;alert alert-info&quot;&gt;
      &lt;b&gt;Note:&lt;/b&gt; This mapping file needs to be placed in one of following locations: &lt;/div&gt;
      &lt;pre&gt;&lt;code&gt;{MAVEN_WAR_PROJECT}/src/main/resources/META-INF/richfaces/
      {JAR}/META-INF/richfaces/ 
      {WAR}/WEB-INF/classes/META-INF/richfaces/&lt;/code&gt;&lt;/pre&gt;
      &lt;div class=&quot;alert alert-info&quot;&gt;
      &lt;b&gt;Note:&lt;/b&gt; &lt;span style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;jquery-alternative-version.js&lt;/span&gt; needs to be placed in your project on one of following  locations (&lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; resource: &lt;/div&gt;
      &lt;pre&gt;&lt;code&gt;{MAVEN_WAR_PROJECT}/src/main/webapp/resources
      {MAVEN_JAR_PROJECT}/src/main/resources/
      {JAR}/META-INF/resources/&lt;/code&gt;&lt;/pre&gt;
      &lt;h4&gt;Another example&lt;/h4&gt;
      &lt;p&gt;Or you can similarly map &lt;span style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;jsf.js&lt;/span&gt; resource:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;javax.faces\:jsf.js=patched-jsf.js&lt;/code&gt;&lt;/pre&gt;
      &lt;div class=&quot;alert alert-info&quot;&gt;
      &lt;b&gt;Note:&lt;/b&gt; notice the backslash before the : (it is the escape sequence, required in the properties file)&lt;/div&gt;
      &lt;h3&gt;Map several resources to one&lt;/h3&gt;
      &lt;p&gt;Another requirement comes when you are using several component libraries in one project – oh crap, and they all are based on jQuery and each of them uses another version!&lt;/p&gt;
      &lt;p&gt;One of solutions here (except using &lt;span style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;jQuery.noConflict()&lt;/span&gt;) is map all requests for different &lt;span style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;jquery.js&lt;/span&gt; versions to one. Let’s define following mapping:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;# RichFaces bundled jQuery (following line is not necessary)
      jquery.js=jquery.js&lt;/code&gt;
      
      &lt;code&gt;# PrimeFaces bundled jQuery
      primefaces\:jquery/jquery.js=jquery.js&lt;/code&gt;
      
      &lt;code&gt;# Another project bundled jQuery
      another\:jquery.js=jquery.js&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;Okay, now all these libraries use only one version of jQuery – the RichFaces one. ;-)&lt;/p&gt;
      &lt;p&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2012-02-13-re-routing-jsf-resource-requests-with/several-resources-to-one.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;283&quot; src=&quot;http://localhost:4242/images/blog/2012-02-13-re-routing-jsf-resource-requests-with/several-resources-to-one.png&quot; width=&quot;320&quot; alt=&quot;another:jquery.js mapped to jquery.js&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;h3&gt;Using external resources&lt;/h3&gt;
      &lt;p&gt;But resource mapping isn’t used only for mapping requests to serve local resources, but external &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; resources can be served as well.&lt;/p&gt;
      &lt;p&gt;Let’s show-case this on sample of mapping requests of jQuery library to &lt;a href=&quot;http://docs.jquery.com/Downloading_jQuery#CDN_Hosted_jQuery&quot; target=&quot;_blank&quot;&gt;&lt;span class=&quot;caps&quot;&gt;CDN&lt;/span&gt;&lt;/a&gt; &lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;jquery.js=http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2012-02-13-re-routing-jsf-resource-requests-with/cdn.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;172&quot; src=&quot;http://localhost:4242/images/blog/2012-02-13-re-routing-jsf-resource-requests-with/cdn.png&quot; width=&quot;400&quot; alt=&quot;jquery.js mapped to CDN resource&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;h3&gt;Moving resources to servers with static content&lt;/h3&gt;
      &lt;p&gt;With RichFaces, you can even move all your resources to a server which serves static requests (like Apache Httpd) to lighten your application server. Just map all your resources to &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; locations.&lt;/p&gt;
      &lt;p&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2012-02-13-re-routing-jsf-resource-requests-with/static-server.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;173&quot; src=&quot;http://localhost:4242/images/blog/2012-02-13-re-routing-jsf-resource-requests-with/static-server.png&quot; width=&quot;400&quot; alt=&quot;All application resources are mapped to static server.&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;p&gt;That’s it, RichFaces Resource Mapping really can save your life! ;-)&lt;/p&gt;
      &lt;div class=&quot;alert alert-info&quot;&gt;
      &lt;b&gt;Warning:&lt;/b&gt; The implementation contains &lt;a href=&quot;https://issues.jboss.org/browse/RF-12093&quot;&gt;issue&lt;/a&gt;, thus the samples from this blog needs to be slightly modified, &lt;a href=&quot;http://rik-ansikter.blogspot.com/2012/02/re-routing-jsf-resource-requests-with.html?showComment=1332793326704#c6043193679485093247&quot;&gt;details in this comment&lt;/a&gt;. The fix will be available with RichFaces 4.2.1.CR1.&lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2012/02/optimizing-resource-loading-with.html</id>
    <title>Optimizing Resource Loading with RichFaces 4.2</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2012-02-09T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2012/02/optimizing-resource-loading-with.html" rel="alternate" type="text/html" />
    <category term="richfaces"></category>
    <category term="performance"></category>
    <summary>
      HTTP connection is an expensive commodity. But if you will look on a traditional rich JSF application, there are many resources for components which need to be loaded, thus many connections need to be established.
      The high number of HTTP requests significantly affects application load time and thus overall performance. This applies especially for high-latency network connections like geographically distant places and for mobile networks.
      Here you can see profile of loading RichFaces page. You can view sequence of requests made by browser to load all the page dependencies.
      
      
      When you will look into page source, you will see these resource dependencies defined...
    </summary>
    <content type="html">
      &lt;p&gt;&lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; connection is an expensive commodity. But if you will look on a traditional rich &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; application, there are many resources for components which need to be loaded, thus many connections need to be established.&lt;/p&gt;
      &lt;p&gt;The high number of &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; requests significantly affects application load time and thus overall performance. This applies especially for high-latency network connections like geographically distant places and for mobile networks.&lt;/p&gt;
      &lt;p&gt;Here you can see profile of loading RichFaces page. You can view sequence of requests made by browser to load all the page dependencies.&lt;/p&gt;
      &lt;p&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2012-02-09-optimizing-resource-loading-with/ro-blog-1.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;253&quot; src=&quot;http://localhost:4242/images/blog/2012-02-09-optimizing-resource-loading-with/ro-blog-1.png&quot; width=&quot;400&quot; alt=&quot;JavaScript dependencies&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;p&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2012-02-09-optimizing-resource-loading-with/ro-blog-2.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;117&quot; src=&quot;http://localhost:4242/images/blog/2012-02-09-optimizing-resource-loading-with/ro-blog-2.png&quot; width=&quot;400&quot; alt=&quot;CSS dependencies&quot;&gt;&lt;/a&gt;&lt;br&gt;
      When you will look into page source, you will see these resource dependencies defined in the head of the page:&lt;/p&gt;
      &lt;p&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2012-02-09-optimizing-resource-loading-with/ro-blog-3.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;210&quot; src=&quot;http://localhost:4242/images/blog/2012-02-09-optimizing-resource-loading-with/ro-blog-3.png&quot; width=&quot;400&quot; alt=&quot;head section will all the dependency links&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;p&gt;Simple optimization of resource loading comes in form of &lt;b&gt;aggregating several requests into one&lt;/b&gt;, thus lightening the load on both the server and the network.&lt;/p&gt;
      &lt;h3&gt;The RichFaces Way&lt;/h3&gt;
      &lt;p&gt;RichFaces offers you the simplest solution available – all RichFaces resources packaged in one file for each resource type – one JavaScript package (&lt;span style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;packed.js&lt;/span&gt;), one &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; package (&lt;span style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;packed.css&lt;/span&gt;).&lt;/p&gt;
      &lt;p&gt;The only thing you need to do is turn the packaging feature on.&lt;/p&gt;
      &lt;h3&gt;Enabling resource optimization&lt;/h3&gt;
      &lt;p&gt;Open the &lt;code&gt;web.xml&lt;/code&gt; file in your project and add following lines:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;&amp;lt;context-param&amp;gt;
          &amp;lt;param-name&amp;gt;org.richfaces.resourceOptimization.enabled&amp;lt;/param-name&amp;gt;
          &amp;lt;param-value&amp;gt;true&amp;lt;/param-value&amp;gt;
      &amp;lt;/context-param&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;div class=&quot;alert alert-info&quot;&gt;
      &lt;b&gt;Notes: &lt;/b&gt;Resource optimization was introduced in RichFaces 3.x as resource loading strategies.&lt;/div&gt;
      &lt;p&gt;It was reintroduced in 4.1, but for 4.2, its configuration was slightly changed to be more clear and concise. This blog reflects changes committed with RichFaces 4.2.0.CR1. Read more about changes in &lt;a href=&quot;http://blog.bleathem.ca/2012/02/richfaces-420cr1-release-announcement.html&quot; target=&quot;_blank&quot;&gt;release blog&lt;/a&gt;.&lt;br&gt;
      Now, deploy and open your application. When you will open page source, you can see that number of page resources (&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; elements in the head) was significantly decreased:&lt;/p&gt;
      &lt;p&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2012-02-09-optimizing-resource-loading-with/ro-blog-6.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;128&quot; src=&quot;http://localhost:4242/images/blog/2012-02-09-optimizing-resource-loading-with/ro-blog-6.png&quot; width=&quot;400&quot; alt=&quot;section with links to optimized resource dependencies&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;p&gt;Also the page load profiles looks much better:&lt;/p&gt;
      &lt;p&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2012-02-09-optimizing-resource-loading-with/ro-blog-4.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;63&quot; src=&quot;http://localhost:4242/images/blog/2012-02-09-optimizing-resource-loading-with/ro-blog-4.png&quot; width=&quot;400&quot; alt=&quot;Optimized JavaScript resources&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;p&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2012-02-09-optimizing-resource-loading-with/ro-blog-5.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;62&quot; src=&quot;http://localhost:4242/images/blog/2012-02-09-optimizing-resource-loading-with/ro-blog-5.png&quot; width=&quot;400&quot; alt=&quot;Optimized CSS resources&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;h3&gt;Packaging and Compression&lt;/h3&gt;
      &lt;p&gt;Resource optimization itself is composed from two features: packaging and compression.&lt;/p&gt;
      &lt;p&gt;Packaging phase &lt;b&gt;aggregates several resources into one&lt;/b&gt;, while compression do &lt;strong&gt;JavaScript/&lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; compression and obfuscation *&lt;/strong&gt;(powered by &lt;span class=&quot;caps&quot;&gt;YUI&lt;/span&gt; compressor).&lt;/p&gt;
      &lt;p&gt;By default, both packaging and compression are applied on RichFaces resources (in production stage).&lt;/p&gt;
      &lt;p&gt;However resource optimization is also controlled by the stage of the project. Why?&lt;/p&gt;
      &lt;h3&gt;Development mode&lt;/h3&gt;
      &lt;p&gt;Packaging is not convenient in development project stage.&lt;/p&gt;
      &lt;p&gt;When you are developing application, some problems may occur in form of JavaScript errors or wrong look because of styling issues. In these cases it’s handy to debug these JavaScript or &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; resources in uncompressed state.&lt;/p&gt;
      &lt;p&gt;The state of the project is controlled with &lt;code&gt;web.xml&lt;/code&gt; switch:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;&amp;lt;context-param&amp;gt;
          &amp;lt;param-name&amp;gt;javax.faces.PROJECT_STAGE&amp;lt;/param-name&amp;gt;
          &amp;lt;param-value&amp;gt;Development&amp;lt;/param-value&amp;gt;
      &amp;lt;/context-param&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;It will force load uncompressed, but packaged resources – great for debugging the app!&lt;/p&gt;
      &lt;h3&gt;Troubleshooting&lt;/h3&gt;
      &lt;p&gt;When you will have any issues, be sure to look into&lt;/p&gt;
      &lt;p&gt;&lt;a href=&quot;https://community.jboss.org/wiki/Troubleshooting-ResourceOptimization&quot; target=&quot;_blank&quot;&gt;Troubleshooting – Resource Optimization article&lt;/a&gt;&lt;/p&gt;
      &lt;h3&gt;Summary&lt;/h3&gt;
      &lt;p&gt;As you can see, with RichFaces Resource Optimization, you can achieve** decrease of number of resource requests**. These resources are also cached by the browsers, so after first page, client get &lt;b&gt;perfect responsiveness&lt;/b&gt;.&lt;/p&gt;
      &lt;p&gt;On the other hand, you are &lt;b&gt;increasing the size of resources&lt;/b&gt; which are necessary to be loaded on first request, since all of the RichFaces component resources are bundled in one file.&lt;/p&gt;
      &lt;p&gt;You need to choose between fast start of the app and responsiveness of the app after first request.&lt;/p&gt;
      &lt;p&gt;What’s the best option for your application, it’s up to you! ;-)&lt;/p&gt;
      &lt;h3&gt;Future Improvements?&lt;/h3&gt;
      &lt;p&gt;We have several ideas how to improve resource loading if it is really critical for your application:&lt;/p&gt;
      &lt;ul&gt;
      &lt;li&gt;several smaller files packaged for certain occasions (core, tables, panels, etc.)&lt;/li&gt;
      &lt;li&gt;provide you maven plugin which will create custom packages just to fit your application needs during the application build!&lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;If you would like to implement any of these features, or have any other ideas for enhancements, be sure to let us know!&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2012/02/configuring-richfaces-push-with-42.html</id>
    <title>4 simple steps for RichFaces Push with 4.2</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2012-02-08T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2012/02/configuring-richfaces-push-with-42.html" rel="alternate" type="text/html" />
    <category term="richfaces"></category>
    <category term="push"></category>
    <summary>
      RichFaces Push is a pretty useful component, since it enables you do a server-side push technique (pushing content from a server to a client asynchronously). What makes this component so attractive when there are plenty of other ways to achieve this?
      RichFaces is enabling application developers to build on top of push without any additional complexity.
      It is enough to use only one interface (which can even be injected using CDI) on the server side. And you need only one component on the client side: .
      In this blog, I’m not going to show all possibilities of how to use the RichFaces Push...
    </summary>
    <content type="html">
      &lt;p&gt;RichFaces Push is a pretty useful component, since it enables you do a server-side push technique (pushing content from a server to a client asynchronously). What makes this component so attractive when there are plenty of other ways to achieve this?&lt;/p&gt;
      &lt;p&gt;RichFaces is enabling application developers to build on top of push &lt;b&gt;without any additional complexity&lt;/b&gt;.&lt;/p&gt;
      &lt;p&gt;It is enough to use only one interface (which can even be injected using &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt;) on the server side. And you need only one component on the client side: &lt;span style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;&lt;push&gt;&lt;/push&gt;&lt;/span&gt;.&lt;/p&gt;
      &lt;p&gt;In this blog, I’m not going to show all possibilities of how to use the RichFaces Push – instead, I will show you, how to configure this component to work on your favorite container including small sample page and bean. Why?&lt;/p&gt;
      &lt;p&gt;We have &lt;b&gt;simplified Push drastically&lt;/b&gt; along the way from 4.0 to 4.1 and we are continuing in 4.2 to make the process of setting up a project with Push as simple as possible! That’s why I’m sharing our progress with you.&lt;/p&gt;
      &lt;h3&gt;Let’s start…&lt;/h3&gt;
      &lt;p&gt;We will start with** SimpleApp maven archetype **- it doesn’t have Push configured. It assumes that you have following dependencies installed:&lt;br&gt;&lt;/p&gt;&lt;ul&gt;
      &lt;li&gt;Maven 3.0.3+&lt;/li&gt;
      &lt;li&gt;
      &lt;span class=&quot;caps&quot;&gt;JDK&lt;/span&gt; 1.6&lt;/li&gt;
      &lt;li&gt;your favorite editor&lt;/li&gt;
      &lt;li&gt;your favorite servlet container or application server&lt;/li&gt;
      &lt;/ul&gt;&lt;h3&gt;Creating the project stub&lt;/h3&gt;
      &lt;p&gt;Okay, let’s create the new app based on the SimpleApp archetype:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;mvn archetype:generate -DarchetypeGroupId=org.richfaces.archetypes -DarchetypeArtifactId=richfaces-archetype-simpleapp -DgroupId=my.domain -DartifactId=simplepush -Dversion=1.0-SNAPSHOT -Dpackage=my.domain -DarchetypeVersion=4.2.0.CR1&lt;/code&gt;&lt;/pre&gt;
      &lt;div class=&quot;alert alert-info&quot;&gt;
      &lt;b&gt;Note:&lt;/b&gt; &lt;a href=&quot;http://docs.jboss.org/richfaces/latest_4_X/Developer_Guide/en-US/html/chap-Developer_Guide-Getting_started_with_RichFaces.html#sect-Component_Reference-Using_RichFaces_with_Maven-Using_the_RichFaces_project_archetype&quot; target=&quot;_blank&quot;&gt;RichFaces Developer Guide&lt;/a&gt; may help you when you get stuck with setting up environment:&lt;/div&gt;
      &lt;p&gt;We have created a stub for our application, now you can try to deploy it on your favorite container and verify basic functionality:&lt;/p&gt;
      &lt;p&gt;&lt;a href=&quot;http://localhost:8080/simplepush/&quot; target=&quot;_blank&quot;&gt;http://localhost:8080/simplepush/&lt;/a&gt;&lt;/p&gt;
      &lt;p&gt;You should see one ajaxified input and when typing, you should see appropriately updated output.&lt;/p&gt;
      &lt;h3&gt;4 simple steps for Push&lt;/h3&gt;
      &lt;p&gt;What are the modifications we will undertake next?&lt;br&gt;&lt;/p&gt;&lt;ul&gt;
      &lt;li&gt;install Atmosphere libraries&lt;/li&gt;
      &lt;li&gt;register a servlet (if necessary)&lt;/li&gt;
      &lt;li&gt;add a managed bean with an action triggering a push event&lt;/li&gt;
      &lt;li&gt;add an &lt;span style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;a4j:push&lt;/span&gt; component to the a page&lt;/li&gt;
      &lt;/ul&gt;&lt;h3&gt;Installing Atmosphere libraries&lt;/h3&gt;
      &lt;p&gt;Atmosphere is the only runtime dependency for RichFaces Push. Atmosphere enables integration with various containers and interoperability between browsers and push techniques (websockets, long-polling).&lt;/p&gt;
      &lt;p&gt;In order to install Atmosphere in your project, add following lines into your &lt;code&gt;pom.xml&lt;/code&gt;, in the section &lt;code&gt;&amp;lt;dependencies&amp;gt;&lt;/code&gt;:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
          &amp;lt;groupId&amp;gt;org.atmosphere&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;atmosphere-runtime&amp;lt;/artifactId&amp;gt;
      &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;div class=&quot;alert alert-info&quot;&gt;
      &lt;b&gt;Note:&lt;/b&gt; version of the dependency is automatically managed by importing the &lt;span style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;richfaces-bom&lt;/span&gt;, that’s why you don’t need to specify &lt;span style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;&lt;dependency&gt;&lt;version&gt;&lt;/version&gt;&lt;/dependency&gt;&lt;/span&gt; here.&lt;/div&gt;
      &lt;h3&gt;Registering PushServlet&lt;/h3&gt;
      &lt;p&gt;RichFaces Push requires &lt;span style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;PushServlet&lt;/span&gt; registered for web application in order to connect to a container and listen for push requests.&lt;/p&gt;
      &lt;p&gt;In &lt;b&gt;Servlets 3.0 and higher environments&lt;/b&gt; (JBoss AS 6 and 7, Tomcat 7, GlassFish 3, etc.), the servlet will be registered automatically by including RichFaces Core libraries on classpath.&lt;/p&gt;
      &lt;p&gt;However in &lt;b&gt;Servlets 2.5 and lower&lt;/b&gt;, servlet needs to be registered manually in &lt;code&gt;web.xml&lt;/code&gt;:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;&amp;lt;!-- Push Servlet - listens for user sessions --&amp;gt;
      &amp;lt;servlet&amp;gt;
          &amp;lt;servlet-name&amp;gt;Push Servlet&amp;lt;/servlet-name&amp;gt;
          &amp;lt;servlet-class&amp;gt;org.richfaces.webapp.PushServlet&amp;lt;/servlet-class&amp;gt;
          &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
      &amp;lt;/servlet&amp;gt;
      &amp;lt;servlet-mapping&amp;gt;
          &amp;lt;servlet-name&amp;gt;Push Servlet&amp;lt;/servlet-name&amp;gt;
          &amp;lt;url-pattern&amp;gt;/__richfaces_push&amp;lt;/url-pattern&amp;gt;
      &amp;lt;/servlet-mapping&amp;gt;&lt;/code&gt;
      
      &lt;code&gt;&amp;lt;!-- setups servlet-mapping in RichFaces configuration --&amp;gt;
      &amp;lt;context-param&amp;gt;
          &amp;lt;param-name&amp;gt;org.richfaces.push.handlerMapping&amp;lt;/param-name&amp;gt;
          &amp;lt;param-value&amp;gt;/__richfaces_push&amp;lt;/param-value&amp;gt;
      &amp;lt;/context-param&amp;gt;
      &amp;lt;/pre&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;h3&gt;Adding action to the managed bean&lt;/h3&gt;
      &lt;p&gt;Let’s open and edit &lt;code&gt;RichBean.java&lt;/code&gt; under &lt;code&gt;src/main/java&lt;/code&gt; in package you have defined. Add following methods:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;public Date getDate() {
          return new Date();
      }&lt;/code&gt;
      
      &lt;code&gt;public void push() throws MessageException {
          TopicKey topicKey = new TopicKey(&quot;sampleAddress&quot;);
          TopicsContext topicsContext = TopicsContext.lookup();&lt;/code&gt;
       
      &lt;code&gt;    topicsContext.publish(topicKey, &quot;empty message&quot;);&lt;/code&gt;
       
      &lt;code&gt;    System.out.println(&quot;push event&quot;);
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;h3&gt;Adding component to the page&lt;/h3&gt;
      &lt;p&gt;Open and edit &lt;code&gt;index.xhtml&lt;/code&gt; file under &lt;code&gt;src/main/webapp&lt;/code&gt; directory.&lt;/p&gt;
      &lt;p&gt;Replace contents inside of &lt;code&gt;&amp;lt;h:form&amp;gt;&lt;/code&gt; with following snippet:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;&amp;lt;a4j:commandButton value=&quot;Push!&quot; action=&quot;#{richBean.push}&quot; /&amp;gt;&lt;/code&gt;
      
      &lt;code&gt;&amp;lt;a4j:push address=&quot;sampleAddress&quot;&amp;gt;
          &amp;lt;a4j:ajax event=&quot;dataavailable&quot; render=&quot;outputDate&quot; /&amp;gt;
      &amp;lt;/a4j:push&amp;gt;&lt;/code&gt;
      
      &lt;code&gt;&amp;lt;a4j:outputPanel id=&quot;outputDate&quot;&amp;gt;
          Date: #{richBean.date}
      &amp;lt;/a4j:outputPanel&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;h3&gt;Accessing sample&lt;/h3&gt;
      &lt;p&gt;When opening &lt;a href=&quot;http://localhost:8080/simplepush/&quot; target=&quot;_blank&quot;&gt;http://localhost:8080/simplepush/&lt;/a&gt; again, you should see one button and output with the date.&lt;/p&gt;
      &lt;p&gt;When clicking on the button, the date should be updated.&lt;br&gt;
      But it’s not simple &lt;span class=&quot;caps&quot;&gt;AJAX&lt;/span&gt;!&lt;/p&gt;
      &lt;p&gt;In the background, &lt;span style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;&lt;push&gt;&lt;/push&gt;&lt;/span&gt; opens long-lived session to the server. When you hit button, a server action method publishes the message and RichFaces sends it to all clients which are subscribed to listen on given address topic (determined by the &lt;span style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;TopicKey&lt;/span&gt;). When clients receive that message, an event is fired in order to trigger an &lt;span class=&quot;caps&quot;&gt;AJAX&lt;/span&gt; update of the date output.&lt;/p&gt;
      &lt;p&gt;An advantage over the traditional poll technique is that clients are updated without the necessity of periodically connecting to the server – it off-loads server and provides immediate client updates.&lt;/p&gt;
      &lt;div class=&quot;alert alert-info&quot;&gt;
      &lt;b&gt;Note:&lt;/b&gt; I know, this sample is quite artificial, because real-world applications won’t use a4j:push and updated area on the same page, but the purpose of the blog was mainly show you configuration of the RichFaces Push.&lt;/div&gt;
      &lt;h3&gt;Troubleshooting&lt;/h3&gt;
      &lt;p&gt;If anything didn’t work for you, perhaps you just used the wrong environment and/or you need to configure something additionally, just look at &lt;a href=&quot;https://community.jboss.org/wiki/StartingWithRichFacesPushOnVariousServletContainers&quot; target=&quot;_blank&quot;&gt;Starting with RichFaces Push on Various Containers&lt;/a&gt; article.&lt;/p&gt;
      &lt;h3&gt;Summary&lt;/h3&gt;
      &lt;p&gt;It was necessary to only** add Atmosphere libraries** to the project generated from SimpleApp archetype, we have made sure that the &lt;b&gt;push servlet is registered&lt;/b&gt; and we have setup &lt;b&gt;page and bean&lt;/b&gt; with action simply – just enough for showcasing Push component.&lt;/p&gt;
      &lt;p&gt;Pretty simple, isn’t it?&lt;/p&gt;
      &lt;p&gt;Who knows what I will cover next time regarding the Push technology in RichFaces? :-)&lt;/p&gt;
      &lt;p&gt;Hmm, just stay tuned!&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2011/09/improvements-of-richfaces-editor-in.html</id>
    <title>Improvements of RichFaces Editor in Milestone2</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2011-09-20T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2011/09/improvements-of-richfaces-editor-in.html" rel="alternate" type="text/html" />
    <category term="richfaces"></category>
    <category term="richfaces-component"></category>
    <summary>
      I have blogged about RichFaces Editor component recently which has been available since RichFaces 4.1.0.Milestone1.
      In scope of Milestone2, Editor has been improved with several pretty new and cool features:@lang &#8211; support for localization@config &#8211; fine-grained configuration@ondirty &#8211; event handler for live changes in editor&#8217;s content@skin &#8211; switches between CKEditor skinscreated new skin &#8216;richfaces&#8217;resource optimization (editor does not load any unnecessary resources)
      Skinnability
      rich:editor now bundles &#8216;richfaces&#8217; skin for CKEditor, which makes it&#8217;s appearance close to other components from RichFaces suite, including all of controls and popups.
      You can still switch to other skins available in default distribution of CKEditor (kama, v2 and office2003)...
    </summary>
    <content type="html">
      &lt;p&gt;I have blogged about RichFaces Editor component recently which has been available since RichFaces 4.1.0.Milestone1.&lt;/p&gt;&lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;&lt;div&gt;In scope of Milestone2, Editor has been improved with several pretty new and cool features:&lt;/div&gt;&lt;div&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;b&gt;@lang&lt;/b&gt; – support for localization&lt;/li&gt;
      &lt;li&gt;
      &lt;b&gt;@config&lt;/b&gt; – fine-grained configuration&lt;/li&gt;
      &lt;li&gt;
      &lt;b&gt;@ondirty&lt;/b&gt; – event handler for live changes in editor’s content&lt;/li&gt;
      &lt;li&gt;
      &lt;b&gt;@skin&lt;/b&gt; – switches between CKEditor skins&lt;/li&gt;
      &lt;li&gt;created &lt;b&gt;new skin ‘richfaces’&lt;/b&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;b&gt;resource optimization&lt;/b&gt; (editor does not load any unnecessary resources)&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;&lt;/div&gt;
      &lt;/div&gt;&lt;div&gt;
      &lt;h3&gt;Skinnability&lt;/h3&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;&lt;div&gt;rich:editor now bundles &lt;b&gt;‘richfaces’ skin&lt;/b&gt; for CKEditor, which makes it’s appearance close to other components from RichFaces suite, including all of controls and popups.&lt;/div&gt;&lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;&lt;div&gt;You can still switch to other skins available in default distribution of CKEditor (kama, v2 and office2003) with @skin attribute or you can download and use any other skin.&lt;/div&gt;&lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2011-09-20-improvements-of-richfaces-editor-in/Screenshot.png&quot; onblur=&quot;try {parent.deselectBloggerImageGracefully();} catch(e) {}&quot;&gt;&lt;img src=&quot;http://localhost:4242/images/blog/2011-09-20-improvements-of-richfaces-editor-in/Screenshot.png&quot; border=&quot;0&quot; alt=&quot;&quot; id=&quot;BLOGGER_PHOTO_ID_5654506456131970562&quot; style=&quot;cursor: pointer; width: 400px; height: 191px; &quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;
      &lt;/div&gt;
      &lt;h3&gt;Configuration&lt;/h3&gt;
      &lt;div&gt;Most valuable for customization of Editor is &lt;b&gt;@config attribute&lt;/b&gt; which provides fine-grained configuration of editor. Alternatively, you can use facet with name “config”, which is even better for detailed customization.&lt;/div&gt;&lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;&lt;div&gt;With this facility, you can configure anything what is possible in CKEditor and you are do it in same way like default CKEditor do, just checkout &lt;a href=&quot;https://github.com/richfaces/dev-examples/blob/develop/input-demo/src/main/webapp/examples/editor.xhtml&quot;&gt;developer sample&lt;/a&gt;. For all available options, you can consult &lt;a href=&quot;http://docs.cksource.com/CKEditor_3.x/Developers_Guide/Setting_Configurations#Available_Configuration_Options&quot;&gt;CKEditor’s configuration documentation&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;&lt;div&gt;@config attribute is certainly able to expand &lt;b&gt;EL expressions&lt;/b&gt;, so you can made your editor configuration dynamic.&lt;/div&gt;&lt;div&gt;
      &lt;/div&gt;
      &lt;h3&gt;Dirtiness&lt;/h3&gt;
      &lt;div&gt;Another feature which makes CKEditor integration unique is &lt;b&gt;“dirty” event&lt;/b&gt; (@ondirty event handler) which is fired when you change editor content with any available action.&lt;/div&gt;&lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;&lt;div&gt;Using this flag, you can easily implement auto-saving (with queue attached) or update periodically display of another client with edited value.&lt;/div&gt;&lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;&lt;div&gt;Enjoy the tweaked implementation and let us know on &lt;a href=&quot;http://community.jboss.org/en/richfaces&quot;&gt;RichFaces forums&lt;/a&gt;!&lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2011/09/1-day-conference-in-vienna-slides-and.html</id>
    <title>1-day conference in Vienna - Slides and Wrap up</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2011-09-20T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2011/09/1-day-conference-in-vienna-slides-and.html" rel="alternate" type="text/html" />
    <category term="wrap-up"></category>
    <summary>
      Last event I have attended was a great success.
      I have made two talks there for which I would like to share slides with you:RichFaces 4 rolling to Mobile Era (Slides | Lanyard)Testing JSF with Arquillian and Selenium (Slides | Lanyard)I had got very valuable feedback from attendees on both sessions, thank you!...
    </summary>
    <content type="html">
      &lt;p&gt;Last event I have attended was a great success.&lt;/p&gt;&lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;&lt;div&gt;I have made two talks there for which I would like to share slides with you:&lt;/div&gt;&lt;div&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;b&gt;RichFaces 4 rolling to Mobile Era&lt;/b&gt; (&lt;a href=&quot;http://www.slideshare.net/lfryc/richfaces-4-rolling-to-mobile-era&quot;&gt;Slides&lt;/a&gt; | &lt;a href=&quot;http://lanyrd.com/2011/jsf-and-richfaces-workshop-conference/sgzmd/&quot;&gt;Lanyard&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;
      &lt;b&gt;Testing &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; with Arquillian and Selenium&lt;/b&gt; (&lt;a href=&quot;http://www.slideshare.net/lfryc/testing-jsf-with-arquillian-and-selenium&quot;&gt;Slides&lt;/a&gt; | &lt;a href=&quot;http://lanyrd.com/2011/jsf-and-richfaces-workshop-conference/sgzmf/&quot;&gt;Lanyard&lt;/a&gt;)&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;I had got very valuable feedback from attendees on both sessions, thank you!&lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2011/08/talking-on-richfacesmobiles-and-on-jsf.html</id>
    <title>Talking on RichFaces@mobiles and on JSF testing in Vienna</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2011-08-31T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2011/08/talking-on-richfacesmobiles-and-on-jsf.html" rel="alternate" type="text/html" />
    <category term="event"></category>
    <summary>
      I would like to invite you on JSF and RichFaces workshop UNIQA held at September 7-9th in Vienna, Austria.
      While first two days will be Max Katz covering thoroughly JSF and RichFaces, last conference day will be dedicated to topics related to RichFaces.
      I will be presenting on what can RichFaces offer in upcoming mobile era and what are current state-of-art techniques in testing JSF applications with Arquillian, Selenium and JSFUnit.
      You can also see detailed program and you can watch the event on Lanyard.
      Looking forward to meet you there!...
    </summary>
    <content type="html">
      &lt;p&gt;I would like to invite you on &lt;b&gt;&lt;a href=&quot;http://www.objective.de/en/newspress/uniqa-workshop/&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; and RichFaces workshop &lt;span class=&quot;caps&quot;&gt;UNIQA&lt;/span&gt;&lt;/a&gt;&lt;/b&gt; held at September 7-9th in Vienna, Austria.&lt;/p&gt;
      &lt;p&gt;While first two days will be &lt;a href=&quot;http://mkblog.exadel.com/2011/08/jsfrichfaces-workshop-plus-1-day-conference-in-vienna-austria-sept-7-9/&quot;&gt;Max Katz covering thoroughly &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; and RichFaces&lt;/a&gt;, last conference day will be dedicated to topics related to RichFaces.&lt;/p&gt;
      &lt;p&gt;I will be presenting on what can &lt;b&gt;RichFaces offer in upcoming mobile era&lt;/b&gt; and what are current &lt;b&gt;state-of-art techniques in testing &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; applications&lt;/b&gt; with Arquillian, Selenium and JSFUnit.&lt;/p&gt;
      &lt;p&gt;You can also see &lt;a href=&quot;http://www.objective.de/en/newspress/uniqa-workshop/programm/&quot;&gt;detailed program&lt;/a&gt; and you can watch the &lt;a href=&quot;http://lanyrd.com/2011/jsf-and-richfaces-workshop-conference/&quot;&gt;event on Lanyard&lt;/a&gt;.&lt;/p&gt;
      &lt;p&gt;Looking forward to meet you there!&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2011/08/lot-of-improvements-has-been-done-in-4.html</id>
    <title>Push Improvements in RichFaces 4.1</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2011-08-18T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2011/08/lot-of-improvements-has-been-done-in-4.html" rel="alternate" type="text/html" />
    <category term="richfaces"></category>
    <category term="push"></category>
    <category term="cdi"></category>
    <summary>
      The lot of improvements has been done in 4.1.0.Milestone1 and specifically Push component has been tweaked a much under the hood.
      Push component itself is very important for interactive enterprise applications and we are trying to design its API as much clean as possible.
      RichFaces team, and Nick Belaevski namely, did great job to decouple Push from JMS to avoid unnecessary overhead with connecting to messaging provider.
      On the client-side, changes have been done to support WebSockets as light-weight alternative for long-polling HTTP connections (comet). Clients, which supports them, uses WebSockets by default and fall-backs to long-polling when support is not detected.
      Specifically for...
    </summary>
    <content type="html">
      &lt;p&gt;The lot of improvements has been done in &lt;span style=&quot;font-weight: bold;&quot;&gt;4.1.0.Milestone1&lt;/span&gt; and specifically Push component has been tweaked a much under the hood.&lt;/p&gt;
      &lt;p&gt;Push component itself is very important for &lt;span style=&quot;font-weight: bold;&quot;&gt;interactive enterprise applications&lt;/span&gt; and we are trying to design its &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; as much clean as possible.&lt;/p&gt;
      &lt;p&gt;RichFaces team, and Nick Belaevski namely, did great job to&lt;span style=&quot;font-weight: bold;&quot;&gt; decouple Push from &lt;span class=&quot;caps&quot;&gt;JMS&lt;/span&gt;&lt;/span&gt; to avoid unnecessary overhead with connecting to messaging provider.&lt;/p&gt;
      &lt;p&gt;On the client-side, changes have been done to support &lt;span style=&quot;font-weight: bold;&quot;&gt;WebSockets&lt;/span&gt; as light-weight alternative for long-polling &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; connections (comet). Clients, which supports them, uses WebSockets by default and fall-backs to long-polling when support is not detected.&lt;/p&gt;
      &lt;p&gt;Specifically for &lt;span style=&quot;font-weight: bold;&quot;&gt;4.0.0.Final&lt;/span&gt; users, which would like to try M1 release, they may register message stating deprecation of PushFilter in the server log. It is not strictly necessary to re-configure, but PushFilter has been replaced by &lt;span style=&quot;font-weight: bold;&quot;&gt;PushServlet&lt;/span&gt;, to which it delegates now. Things are even better in Servlets 3.0 environments, when you don’t need register any servlet since that will be done automatically for you.&lt;/p&gt;
      &lt;p&gt;On the server-side, we have introduced option for &lt;span style=&quot;font-weight: bold;&quot;&gt;disabling Push and &lt;span class=&quot;caps&quot;&gt;JMS&lt;/span&gt;&lt;/span&gt; integration in cases when you can’t use enterprise messaging or you don’t require it. To turn &lt;span class=&quot;caps&quot;&gt;JMS&lt;/span&gt; integration off, you just need to provide following contextual parameter in web.xml:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;&amp;lt;context-param&amp;gt;
       &amp;lt;param-name&amp;gt;org.richfaces.push.jms.disable&amp;lt;/param-name&amp;gt;
       &amp;lt;param-value&amp;gt;true&amp;lt;/param-value&amp;gt;
      &amp;lt;/context-param&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;If you would like to &lt;span style=&quot;font-weight: bold;&quot;&gt;try Push&lt;/span&gt;, you may be pleased that it is now in &lt;span style=&quot;font-weight: bold;&quot;&gt;RichFaces Showcase&lt;/span&gt;, however be aware that it can’t be seen in &lt;a href=&quot;http://richfaces-showcase.appspot.com/&quot;&gt;demo hosted on &lt;span class=&quot;caps&quot;&gt;GAE&lt;/span&gt;&lt;/a&gt; since this hosting doesn’t support &lt;span class=&quot;caps&quot;&gt;JMS&lt;/span&gt;. You will need to deploy it at own, and in such case I strongly recommend you &lt;a href=&quot;http://rik-ansikter.blogspot.com/2011/07/richfaces-heading-to-jboss-as7-era.html&quot;&gt;my previous blog&lt;/a&gt;.&lt;/p&gt;
      &lt;p&gt;And what you may expect in near future? We are working on&lt;span style=&quot;font-weight: bold;&quot;&gt; integration with &lt;a href=&quot;http://www.adam-bien.com/roller/abien/entry/java_ee_6_observer_with&quot;&gt;&lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; Events&lt;/a&gt;&lt;/span&gt; feature&lt;span style=&quot;font-weight: bold;&quot;&gt;&lt;/span&gt;, so your application would be allowed to throw messages to the clients very easily. This feature can be already seen in RichFaces Showcase Push samples – it is not really hard to develop simple integration with &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt;.&lt;/p&gt;
      &lt;p&gt;But there were also &lt;span style=&quot;font-weight: bold;&quot;&gt;issues&lt;/span&gt; which we had to overcome – one of them is &lt;a href=&quot;https://issues.jboss.org/browse/RF-11064&quot;&gt;issue with Atmosphere and JBoss Web&lt;/a&gt; which will be addressed also in M2.&lt;/p&gt;
      &lt;p&gt;To overcome this issue, you can temporary switch to using blocking I/O approach:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;&amp;lt;context-param&amp;gt;
            &amp;lt;param-name&amp;gt;org.atmosphere.useBlocking&amp;lt;/param-name&amp;gt;
            &amp;lt;param-value&amp;gt;true&amp;lt;/param-value&amp;gt;
      &amp;lt;/context-param&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;And off-course, if you have &lt;span style=&quot;font-weight: bold;&quot;&gt;ideas how to make Push more user-friendly&lt;/span&gt; than it already is, give us know in &lt;a href=&quot;http://community.jboss.org/en/richfaces&quot;&gt;RichFaces community discussions&lt;/a&gt;. We will be pleased to hear from you!&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2011/08/editor-for-richfaces-41.html</id>
    <title>Editor for RichFaces 4.1</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2011-08-15T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2011/08/editor-for-richfaces-41.html" rel="alternate" type="text/html" />
    <category term="richfaces"></category>
    <category term="richfaces-component"></category>
    <summary>
      You have been requesting and we now answer: RichFaces gets pretty new Editor component, which was lacking from 4.0.0.Final release.
      This component can be found in upcoming 4.1.0.Milestone1 release and is mostly feature complete with exception of skinning which will fit to rest of component suite &#8211; this functionality is targeted for Milestone 2.
      Editor component is using CKEditor implementation internally and it is able to switch between two configurations of toolbar set: basic and full.
      
      It also integrates nicely with rest of JSF 2, thus you can bind e.g. behavior for event denoting the editor content has been changed:
      &lt;rich:editor toolbar="full" value="#{article.text}"&gt;
       ...
    </summary>
    <content type="html">
      &lt;p&gt;You have been requesting and we now answer: RichFaces gets pretty new Editor component, which was lacking from 4.0.0.Final release.&lt;/p&gt;
      &lt;p&gt;This component can be found in upcoming &lt;span style=&quot;font-weight: bold;&quot;&gt;4.1.0.Milestone1&lt;/span&gt; release and is mostly feature complete with exception of skinning which will fit to rest of component suite – this functionality is targeted for Milestone 2.&lt;/p&gt;
      &lt;p&gt;Editor component is using &lt;a href=&quot;http://ckeditor.com/&quot;&gt;CKEditor&lt;/a&gt; implementation internally and it is able to switch between two configurations of toolbar set: &lt;span style=&quot;font-weight: bold;&quot;&gt;basic&lt;/span&gt; and &lt;span style=&quot;font-weight: bold;&quot;&gt;full&lt;/span&gt;.&lt;/p&gt;
      &lt;p&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2011-08-15-editor-for-richfaces-41/Screenshot-23.png&quot;&gt;&lt;img style=&quot;cursor:pointer; cursor:hand;width: 400px; height: 275px;&quot; src=&quot;http://localhost:4242/images/blog/2011-08-15-editor-for-richfaces-41/Screenshot-23.png&quot; alt=&quot;&quot; id=&quot;BLOGGER_PHOTO_ID_5640099601474847346&quot; border=&quot;0&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;p&gt;It also integrates nicely with rest of &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; 2, thus you can bind e.g. &lt;span style=&quot;font-weight: bold;&quot;&gt;behavior for event&lt;/span&gt; denoting the editor content has been changed:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;&amp;lt;rich:editor toolbar=&quot;full&quot; value=&quot;#{article.text}&quot;&amp;gt;
         &amp;lt;a4j:ajax event=&quot;change&quot; action=&quot;#{article.save}&quot; /&amp;gt;
      &amp;lt;/rich:editor&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;It is important to note that Editor uses &lt;span style=&quot;font-weight: bold;&quot;&gt;resource handling servlet&lt;/span&gt; for obtaining own resources. You don’t require any additional configuration to set it up when working with Servlet 3.0 – everything will be registered automatically for you.&lt;/p&gt;
      &lt;p&gt;However in Servlet 2.5 and older environments, it is necessary to register this servlet manually in web.xml:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;&amp;lt;servlet&amp;gt;
         &amp;lt;servlet-name&amp;gt;Resource Servlet&amp;lt;/servlet-name&amp;gt;
         &amp;lt;servlet-class&amp;gt;org.richfaces.webapp.ResourceServlet&amp;lt;/servlet-class&amp;gt;
         &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
      &amp;lt;/servlet&amp;gt;&lt;/code&gt;
      
      &lt;code&gt;&amp;lt;servlet-mapping&amp;gt;
         &amp;lt;servlet-name&amp;gt;Resource Servlet&amp;lt;/servlet-name&amp;gt;
         &amp;lt;url-pattern&amp;gt;/org.richfaces.resources/*&amp;lt;/url-pattern&amp;gt;
      &amp;lt;/servlet-mapping&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;I would appreciate &lt;a href=&quot;http://community.jboss.org/en/richfaces&quot;&gt;your feedback on forums&lt;/a&gt;, how this component stands.&lt;/p&gt;
      &lt;p&gt;You can also watch &lt;a href=&quot;http://community.jboss.org/wiki/RF4Editor&quot;&gt;what is being planned for future&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://localhost:4242/blog/2011/07/richfaces-heading-to-jboss-as7-era.html</id>
    <title>RichFaces Heading to JBoss AS7 Era</title>
    <updated>2014-01-31T10:58:47+00:00</updated>
    <published>2011-07-19T00:00:00Z</published>
    <link href="http://localhost:4242/blog/2011/07/richfaces-heading-to-jboss-as7-era.html" rel="alternate" type="text/html" />
    <category term="richfaces"></category>
    <category term="as7"></category>
    <summary>
      I’m very excited to show RichFaces users how easy (and productive) life can be when running on JBoss Application Server 7!
      It’s not necessary to enumerate all the features of JBoss AS7 (there are others that have already done so), but it’s at least worth mentioning that AS7 is extremely light-weight &#8211; and that’s the UI that developers are interested in!
      Light-weight containers &#8211; Java EE features ready web developers?
      The AS7 core itself starts in no more than 3 seconds. Such a fast start is achieved by an extremely modular architecture where modules are started in parallel. I invite you to see...
    </summary>
    <content type="html">
      &lt;p&gt;I’m very excited to show RichFaces users how easy (and productive) life can be when running on JBoss Application Server 7!&lt;/p&gt;
      &lt;p&gt;It’s not necessary to enumerate all the features of JBoss AS7 (there are &lt;a href=&quot;http://www.jboss.org/as7/articles.html&quot;&gt;others that have already done so&lt;/a&gt;), but it’s at least worth mentioning that AS7 is extremely light-weight – and that’s the UI that developers are interested in!&lt;/p&gt;
      &lt;h3&gt;Light-weight containers – Java EE features ready web developers?&lt;/h3&gt;
      &lt;p&gt;The AS7 core itself starts in no more than 3 seconds. Such a fast start is achieved by an extremely modular architecture where modules are started in parallel. I invite you to see Lincoln’s video showing &lt;a href=&quot;http://bit.ly/jbossas7-vs-firefox&quot;&gt;AS7 fighting in the wild&lt;/a&gt;.&lt;/p&gt;
      &lt;p&gt;What’s so great about AS7 and why should you use it? Let’s start with some &lt;b&gt;benchmarks of real deployment&lt;/b&gt;:&lt;/p&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;b&gt;AS7&lt;/b&gt; – 10.907s – &lt;b&gt;11s&lt;/b&gt;
      &lt;/li&gt;
      	&lt;li&gt;
      &lt;b&gt;AS6&lt;/b&gt; – 31.248s – &lt;b&gt;31s&lt;/b&gt;
      &lt;/li&gt;
      	&lt;li&gt;
      &lt;b&gt;Tomcat 7&lt;/b&gt; – 17.313s – &lt;b&gt;17s&lt;/b&gt;
      &lt;/li&gt;
      	&lt;li&gt;
      &lt;b&gt;Tomcat 6&lt;/b&gt; – 7.065s – &lt;b&gt;7s&lt;/b&gt;
      &lt;/li&gt;
      &lt;/ul&gt;&lt;p&gt;This certainly looks promising.&lt;/p&gt;
      &lt;p&gt;Just note that these results are measured from the startup of the RichFaces Showcase application, which currently employs several hot features of the &lt;b&gt;Java EE stack: &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;JPA&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;JMS&lt;/span&gt; and &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt;&lt;/b&gt;.&lt;/p&gt;
      &lt;p&gt;You can imagine the difference in &lt;b&gt;web development experience&lt;/b&gt; on AS7 and other application servers.&lt;/p&gt;
      &lt;p&gt;Still don’t believe me? Just check out the guide below on how to deploy RichFaces Showcase yourself.&lt;/p&gt;
      &lt;h3&gt;RichFaces 4 running on AS7 here and now&lt;/h3&gt;
      &lt;p&gt;We have prepared &lt;b&gt;two demonstration applications targeting AS7&lt;/b&gt; to show how easy it is to get RichFaces running.&lt;/p&gt;
      &lt;p&gt;We’ll first touch the &lt;b&gt;Showcase&lt;/b&gt; application (since you can deploy it as it is: just clone, build and run) and then go discover &lt;b&gt;Tweetstream&lt;/b&gt; application, which is really nice sample of tweet tracking for both mobile and desktop browsers.&lt;/p&gt;
      &lt;h3&gt;Showcase on AS7&lt;/h3&gt;
      &lt;h4&gt;Clone the project from the Git repository&lt;/h4&gt;
      &lt;p&gt;You need to clone the project from &lt;a href=&quot;https://github.com/richfaces/showcase&quot;&gt;RichFaces Showcase repository&lt;/a&gt;, move into that directory, and then reset to a specific reference point (i.e. a specific commit) like so:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;$ git clone git://github.com/richfaces/showcase.git
      $ cd showcase
      $ git checkout -b blog-demo 54b8211b9bfc065dda32c8809cd9a4e2b7c90b71&lt;/code&gt;&lt;/pre&gt;
      &lt;h4&gt;Build the project&lt;/h4&gt;
      &lt;p&gt;At first, make sure you have properly setup Maven for development with JBoss repositories (check out &lt;a href=&quot;http://community.jboss.org/wiki/MavenGettingStarted-Users&quot;&gt;Maven Getting Started&lt;/a&gt;, paragraph “Configuring Maven to use the JBoss Repository”).&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;$ mvn clean package -Pjbas7 --update-snapshots&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;The Maven build will take some time, but once complete, you will have a &lt;span class=&quot;caps&quot;&gt;WAR&lt;/span&gt; file deployable on AS7.&lt;/p&gt;
      &lt;h4&gt;Download and unpack AS7 distribution&lt;/h4&gt;
      &lt;p&gt;Now you need the actual server, so go to the &lt;a href=&quot;http://www.jboss.org/jbossas/downloads&quot;&gt;JBoss AS download page&lt;/a&gt; and obtain the latest AS7 &lt;a href=&quot;http://download.jboss.org/jbossas/7.0/jboss-as-7.0.0.Final/jboss-as-7.0.0.Final.zip&quot;&gt;distribution archive&lt;/a&gt; (be sure to grab a distribution which contains everything, not only the Web Profile). Then unpack it and enter the newly-created directory. You may also find useful documentation in &lt;a href=&quot;https://docs.jboss.org/author/display/AS7/Getting+started+with+JBoss+AS&quot;&gt;Getting started&lt;/a&gt; with AS7.&lt;/p&gt;
      &lt;h4&gt;Deploy Showcase to AS7&lt;/h4&gt;
      &lt;p&gt;Take the &lt;span class=&quot;caps&quot;&gt;WAR&lt;/span&gt; file from the Maven build (which is located at &lt;code&gt;showcase/target/richfaces-showcase-jbas7.war&lt;/code&gt;), copy it to the &lt;code&gt;deployments&lt;/code&gt; directory, and finally rename it to &lt;code&gt;showcase.war&lt;/code&gt; (&lt;code&gt;jboss-7.0.0/standalone/deployments/showcase.war&lt;/code&gt;).&lt;/p&gt;
      &lt;h4&gt;Start AS7&lt;/h4&gt;
      &lt;p&gt;Enter the &lt;code&gt;jboss-7.0.0/bin&lt;/code&gt; directory and run&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;$ ./standalone.sh --server-config standalone-preview.xml&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;If deployment is successful, you should see&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;registering web context: /showcase
      Deployed &quot;showcase.war&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;on last few lines of the server console.&lt;/p&gt;
      &lt;h4&gt;Enter the Showcase application&lt;/h4&gt;
      &lt;p&gt;Start your browser and point it at: &lt;a href=&quot;http://localhost:8080/showcase/&quot;&gt;http://localhost:8080/showcase/&lt;/a&gt;.&lt;/p&gt;
      &lt;p&gt;Et voilà! You have successfully deployed the RichFaces Showcase application!&lt;/p&gt;
      &lt;p&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2011-07-19-richfaces-heading-to-jboss-as7-era/Screenshot-18.png&quot;&gt;&lt;img style=&quot;cursor:pointer; cursor:hand;width: 400px; height: 320px;&quot; src=&quot;http://localhost:4242/images/blog/2011-07-19-richfaces-heading-to-jboss-as7-era/Screenshot-18.png&quot; alt=&quot;&quot; id=&quot;BLOGGER_PHOTO_ID_5631115830284615074&quot; border=&quot;0&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;h3&gt;Diving Deep into Showcase and AS7 Specific Requirements&lt;/h3&gt;
      &lt;p&gt;Showcase deployment was easy enough; now we’ll go through the behind the scenes configuration of both Showcase and AS7.&lt;/p&gt;
      &lt;p&gt;First,  we needed to deploy in Preview configuration (which was denoted by using &lt;code&gt;--server-config standalone-preview.xml&lt;/code&gt; switch). That was necessary because AS 7.0.0 is certified to JavaEE 6 Web Profile only. The Preview configuration then contains the sample of what’s going to be in Full Profile and what is baking in 7.1.0, but still needs further work.&lt;/p&gt;&lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;&lt;div&gt;I have said that Showcase is using several Java EE 6 technologies: &lt;b&gt;&lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;JPA&lt;/span&gt; and &lt;span class=&quot;caps&quot;&gt;JMS&lt;/span&gt;&lt;/b&gt;. That means AS7 needs to load and configure each of the appropriate modules for these technologies.
      &lt;p&gt;For both &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; and &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt;, it is enough to create two configuration files, &lt;a href=&quot;https://github.com/richfaces/showcase/blob/54b8211b9bfc065dda32c8809cd9a4e2b7c90b71/src/main/webapp/WEB-INF/faces-config.xml&quot;&gt;faces-config.xml&lt;/a&gt; and &lt;a href=&quot;https://github.com/richfaces/showcase/blob/54b8211b9bfc065dda32c8809cd9a4e2b7c90b71/src/main/webapp/WEB-INF/beans.xml&quot;&gt;beans.xml&lt;/a&gt;, to load the appropriate modules. For &lt;span class=&quot;caps&quot;&gt;JPA&lt;/span&gt;, it is necessary to create &lt;a href=&quot;https://github.com/richfaces/showcase/blob/54b8211b9bfc065dda32c8809cd9a4e2b7c90b71/src/main/resources-jbas7/META-INF/persistence.xml&quot;&gt;&lt;code&gt;persistence.xml&lt;/code&gt;&lt;/a&gt; with a proper configuration. Showcase uses ExampleDS as the data source, which is deployed out-of-the-box on AS7 for sample applications.&lt;/p&gt;
      &lt;p&gt;In the case of &lt;span class=&quot;caps&quot;&gt;JMS&lt;/span&gt;, the situation is a bit different, since it is not possible to initialize it by configuring &lt;span class=&quot;caps&quot;&gt;WAR&lt;/span&gt; deployment: RichFaces Push needs to have &lt;span class=&quot;caps&quot;&gt;JMS&lt;/span&gt; topics initialized just before the application starts. The &lt;a href=&quot;http://community.jboss.org/wiki/DetypedDescriptionOfTheAS7ManagementModel&quot;&gt;Java &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; for &lt;span class=&quot;caps&quot;&gt;DMR&lt;/span&gt;&lt;/a&gt; creates topics on the &lt;span class=&quot;caps&quot;&gt;JMS&lt;/span&gt; server bundled with AS7 (HornetQ) when an application is being deployed. Using this &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;, you can manage the server in an elegant way, as the following snippet from the &lt;a href=&quot;https://github.com/richfaces/showcase/blob/54b8211b9bfc065dda32c8809cd9a4e2b7c90b71/src/main/java/org/richfaces/demo/push/provider/AS7MessagingProviderManagement.java&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JMS&lt;/span&gt; provider management script&lt;/a&gt; shows:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;public void createTopic(String topicName, String jndiName) throws Exception {
          ...
          operation = new ModelNode();
          operation.get(&quot;operation&quot;).set(&quot;add&quot;);
          operation.get(&quot;address&quot;).add(&quot;subsystem&quot;, &quot;messaging&quot;);
          operation.get(&quot;address&quot;).add(&quot;jms-topic&quot;, topicName);
          operation.get(&quot;entries&quot;).add(jndiName);
          client.executeAsync(operation, null);
          ...
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;RichFaces Push needs to be configured for using of &lt;b&gt;blocking I/O approach&lt;/b&gt; of managing requests on AS7. You need to configure &lt;code&gt;org.atmosphere.useBlocking=true&lt;/code&gt; in &lt;a href=&quot;https://github.com/richfaces/showcase/blob/54b8211b9bfc065dda32c8809cd9a4e2b7c90b71/src/main/webapp-jee6/WEB-INF/web.xml#L72&quot;&gt;&lt;code&gt;web.xml&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
      &lt;p&gt;These tweaks are necessary to get Showcase working on AS7 without having to perform any custom server management operations before the application is deployed.&lt;/p&gt;
      &lt;p&gt;Now we’re ready to get looking at a higher level and inspect the Tweetstream application and other options of deployment control and server management.&lt;/p&gt;
      &lt;h3&gt;Tweetstream on AS7&lt;/h3&gt;
      &lt;p&gt;Tweetstream is a RichFaces/JSF2 app that was optimized for mobile device browsers.  It was writen by Jay Balunas and Wesley Hales for the JBoss World 2011 Keynote. You may find more information on blogs &lt;a href=&quot;http://relation.to/Bloggers/RichFacesAndTheMobileWebForTheJBossWorld2011Keynote&quot;&gt;RichFaces And The Mobile Web…&lt;/a&gt; and &lt;a href=&quot;http://www.jroller.com/wesleyhales/entry/runtime_type_detection_and_usage&quot;&gt;Runtime Type Detection and Usage with Weld&lt;/a&gt;.&lt;/p&gt;
      &lt;p&gt;Connection to twitter is driven through &lt;b&gt;OAuth credentials and associated security tokens&lt;/b&gt;. These credentials are pre-filled in properties file using &lt;b&gt;fake twitter account created for demonstration purpose&lt;/b&gt;, but I encourage you to change them – Twitter won’t allow two consumers (like the Tweetstream application) to connect using the same application account.&amp;lt;&lt;/p&gt;
      &lt;p&gt;To run Tweetstream, you should follow the same steps you used in the Showcase example above, but additionally you need to &lt;b&gt;setup&lt;/b&gt; &lt;b&gt;Twitter OAuth credentials&lt;/b&gt; and also &lt;b&gt;setup &lt;span class=&quot;caps&quot;&gt;JMS&lt;/span&gt;&lt;/b&gt;. We will also inspect &lt;b&gt;another way to deploy &lt;span class=&quot;caps&quot;&gt;WAR&lt;/span&gt; files&lt;/b&gt;.&lt;/p&gt;
      &lt;p&gt;The following section assumes that you have already &lt;b&gt;downloaded and unpacked AS7&lt;/b&gt; (using the Showcase instructions above).&lt;/p&gt;
      &lt;h4&gt;Clone the Project from the Git Repository&lt;/h4&gt;
      &lt;p&gt;You need to clone project from &lt;a href=&quot;https://github.com/richfaces/tweetstream&quot;&gt;RichFaces Tweetstream repository&lt;/a&gt;, move into that directory, and then reset to a specific reference point (i.e. a specific commit) like so:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;$ git clone git://github.com/richfaces/tweetstream.git
      $ cd tweetstream
      $ git checkout -b blog-demo ccae090ef0c59c9275fb011aa426a88f53544fe1&lt;/code&gt;&lt;/pre&gt;
      &lt;h4&gt;Change the Twitter4j Credentials (optional)&lt;/h4&gt;
      &lt;p&gt;This is really not that hard, but it does require some effort.  Because these steps change from time to time you should refer to &lt;a href=&quot;http://twitter4j.org/en/configuration.html&quot;&gt;http://twitter4j.org/en/configuration.html&lt;/a&gt; and &lt;a href=&quot;https://dev.twitter.com/pages/auth&quot;&gt;https://dev.twitter.com/pages/auth&lt;/a&gt; for up-to-date details.&lt;/p&gt;
      &lt;p&gt;Once you have access to the values in &lt;code&gt;tweetstream/src/main/resources/twitter4j.properties&lt;/code&gt;:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;oauth.consumerKey=**************************
      oauth.consumerSecret=**************************
      oauth.accessToken=**************************
      oauth.accessTokenSecret=**************************&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;Update with these your own values.&lt;/p&gt;
      &lt;h4&gt;Change Keywords that Tweetstream Tracks (optional)&lt;/h4&gt;
      &lt;p&gt;By default, Tweetstream tracks various JBoss related keywords with twitter4j.  If you want to change the tracking list, just enter another keyword (each on its own line) in this file:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;tweetstream/src/main/resources/twittertracks.properties&lt;/code&gt;&lt;/pre&gt;
      &lt;h4&gt;Build the Project&lt;/h4&gt;
      &lt;p&gt;Before starting a build, make sure you have properly setup Maven for development with JBoss repositories (check out &lt;a href=&quot;http://community.jboss.org/wiki/MavenGettingStarted-Users&quot;&gt;Maven Getting Started&lt;/a&gt;, paragraph “Configuring Maven to use the JBoss Repository”).&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;$ mvn clean package --update-snapshots&lt;/code&gt;&lt;/pre&gt;
      &lt;h4&gt;Start AS7&lt;/h4&gt;
      &lt;p&gt;Without deploying the application, start the server by entering the &lt;code&gt;jboss-7.0.0/bin&lt;/code&gt; directory and running:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;$ ./standalone.sh --server-config standalone-preview.xml&lt;/code&gt;&lt;/pre&gt;
      &lt;h4&gt;Create the &lt;span class=&quot;caps&quot;&gt;JMS&lt;/span&gt; Topic on AS7&lt;/h4&gt;
      &lt;p&gt;To do this, you have two choices: use AS7’s command line admin interface, or use the web console. Both are bundled with AS7 distribution:&lt;/p&gt;
      &lt;h5&gt;Command-line interface&lt;/h5&gt;
      &lt;p&gt;To start the command line interface, ensure AS7 is running and enter the jboss-7.0.0 directory. From this directory, follow these steps:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;$ ./jboss-admin.sh
      [disconnected /] connect
      [standalone@localhost:9999 /] add-jms-topic --name=twitter --entries=topic/twitter&lt;/code&gt;&lt;/pre&gt;
      &lt;h5&gt;Using the Web Console&lt;/h5&gt;
      &lt;p&gt;Navigate to &lt;a href=&quot;http://localhost:9990/console/&quot;&gt;http://localhost:9990/console/&lt;/a&gt; in your browser. In the management console, select &lt;code&gt;Messaging &amp;gt; Messaging Provider&lt;/code&gt;, look for &lt;code&gt;Subresources&lt;/code&gt;, and switch to the &lt;code&gt;Topics&lt;/code&gt; tab. Hit  the &lt;code&gt;Add&lt;/code&gt; button (on the right) and in the popup titled &lt;code&gt;Create JMS Topic&lt;/code&gt;, enter &lt;code&gt;twitter&lt;/code&gt; as the name and &lt;code&gt;topic/twitter&lt;/code&gt; as the &lt;span class=&quot;caps&quot;&gt;JNDI&lt;/span&gt;.&lt;/p&gt;
      &lt;p&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2011-07-19-richfaces-heading-to-jboss-as7-era/Screenshot-20.png&quot;&gt;&lt;img style=&quot;cursor:pointer; cursor:hand;width: 400px; height: 238px;&quot; src=&quot;http://localhost:4242/images/blog/2011-07-19-richfaces-heading-to-jboss-as7-era/Screenshot-20.png&quot; alt=&quot;&quot; id=&quot;BLOGGER_PHOTO_ID_5631115959117155314&quot; border=&quot;0&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;h4&gt;Deploy Tweetstream to AS7&lt;/h4&gt;
      &lt;p&gt;You can certainly use the deployment way mentioned in the Showcase guide above, but I will show here two different ways to deploy: by using the web console, or using the command line interface.&lt;/p&gt;
      &lt;h5&gt;Using the Web Console&lt;/h5&gt;
      &lt;p&gt;Enter the console again (&lt;a href=&quot;http://localhost:9990/console/&quot;&gt;http://localhost:9990/console/&lt;/a&gt;) and select &lt;code&gt;Deployments &amp;gt; Manage Deployments&lt;/code&gt; and hit the &lt;code&gt;Add Content&lt;/code&gt; button (on the right). In the popup, Choose a &lt;span class=&quot;caps&quot;&gt;WAR&lt;/span&gt; file to deploy and hit &lt;code&gt;Next&lt;/code&gt; button. Leave the default values in the next popup screen and hit the &lt;code&gt;Finish&lt;/code&gt; button. The popup will disappear and you will see your &lt;span class=&quot;caps&quot;&gt;WAR&lt;/span&gt; in the list of deployed resources. Hit the &lt;code&gt;Enable&lt;/code&gt; button for &lt;code&gt;tweetstream.war&lt;/code&gt;. You should see a green ball indicating successful deployment.&lt;/p&gt;
      &lt;h5&gt;Using the Command Line Interface&lt;/h5&gt;
      &lt;p&gt;Start the command line interface again and follow these steps:&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;$ **./jboss-admin.sh**
      [disconnected /] connect[standalone@localhost:9999 /] deploy  /path_to_tweetstream/target/tweetstream.war 
      tweetstream.war' deployed successfully.&lt;/code&gt;
      
      &lt;code&gt;&amp;lt;a href=&quot;/images/blog/2011-07-19-richfaces-heading-to-jboss-as7-era/Screenshot-19.png&quot;&amp;gt;&amp;lt;img style=&quot;cursor:pointer; cursor:hand;width: 400px; height: 224px;&quot; src=&quot;/images/blog/2011-07-19-richfaces-heading-to-jboss-as7-era/Screenshot-19.png&quot; alt=&quot;&quot; id=&quot;BLOGGER_PHOTO_ID_5631116023812325106&quot; border=&quot;0&quot; /&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;h4&gt;Enjoy the Tweetstream application!&lt;/h4&gt;
      &lt;p&gt;Enter &lt;a href=&quot;http://localhost:8080/tweetstream/&quot;&gt;http://localhost:8080/tweetstream/&lt;/a&gt; in your browser. From now on, new tweets are displayed on the left side of the page and the top hashes and tweeters counts are displayed on the right side.&lt;/p&gt;
      &lt;/div&gt;&lt;div&gt;
      &lt;p&gt;&lt;a href=&quot;http://localhost:4242/images/blog/2011-07-19-richfaces-heading-to-jboss-as7-era/Screenshot-19.png&quot;&gt;&lt;img style=&quot;cursor:pointer; cursor:hand;width: 400px; height: 320px;&quot; src=&quot;http://localhost:4242/images/blog/2011-07-19-richfaces-heading-to-jboss-as7-era/Screenshot-19.png&quot; alt=&quot;&quot; id=&quot;BLOGGER_PHOTO_ID_5631115900869300738&quot; border=&quot;0&quot;&gt;&lt;/a&gt;&lt;/p&gt;
      &lt;p&gt;As you can see, AS7 deployment is simple, and multiple means of deployment are provided. Nevertheless, application startup time has been reduced dramatically, finally giving web developers the speed they need!&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
</feed>
